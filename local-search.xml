<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python入门视频教程-笔记</title>
    <link href="/road2dasheng/06_Pyhton%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/road2dasheng/06_Pyhton%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="B站黑马程序员-Python视频教程笔记"><a href="#B站黑马程序员-Python视频教程笔记" class="headerlink" title="B站黑马程序员-Python视频教程笔记"></a><a href="https://www.bilibili.com/video/BV1qW4y1a7fU?p=4&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-Python视频教程</a>笔记</h4><h4 id="一、-你好-Python"><a href="#一、-你好-Python" class="headerlink" title="一、 你好 Python"></a>一、 你好 Python</h4><h5 id="1-1-初识Python"><a href="#1-1-初识Python" class="headerlink" title="1.1  初识Python"></a>1.1  初识Python</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;起源&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206184959746.png" alt="image-20230206184959746"></li><li><em><strong>&#x3D;&#x3D;优雅&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185323576.png" alt="image-20230206185323576"></li><li><em><strong>&#x3D;&#x3D;应用场景&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185455855.png" alt="image-20230206185455855"></li></ul></blockquote><h5 id="1-2-编程语言"><a href="#1-2-编程语言" class="headerlink" title="1.2  编程语言"></a>1.2  编程语言</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;人类语言&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185740936.png" alt="image-20230206185740936"></li><li><em><strong>&#x3D;&#x3D;计算机不理解人类语言&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185859865.png" alt="image-20230206185859865"></li><li><em><strong>&#x3D;&#x3D;编程语言将人类语言转化为固定格式的语言，然后经翻译程序（编译器或解释器）转换为二进制数据&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185951565.png" alt="image-20230206185951565"></li><li><em><strong>&#x3D;&#x3D;为什么不直接把人类语言通过翻译器转换给计算机&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206190350124.png" alt="image-20230206190350124"></li></ul></blockquote><h5 id="1-3-Python安装"><a href="#1-3-Python安装" class="headerlink" title="1.3 Python安装"></a>1.3 Python安装</h5><h6 id="1-3-1-windows"><a href="#1-3-1-windows" class="headerlink" title="1.3.1 windows"></a>1.3.1 windows</h6><blockquote><ul><li>下载<br><img src="/road2dasheng/img/06/image-20230206202200345.png" alt="image-20230206202200345"></li><li>安装<br>1：<br><img src="/road2dasheng/img/06/image-20230206203053241.png" alt="image-20230206203053241"><br>2：<br><img src="/road2dasheng/img/06/image-20230206203131493.png" alt="image-20230206203131493"><br>3：<br><img src="/road2dasheng/img/06/image-20230206203340212.png" alt="image-20230206203340212"><br>4：<br><img src="/road2dasheng/img/06/image-20230206203510838.png" alt="image-20230206203510838"><br>5：<br><img src="/road2dasheng/img/06/image-20230206203609719.png" alt="image-20230206203609719"><br>6：重启电脑，打开CMD，输入python</li></ul></blockquote><h6 id="1-3-2-MacOS（未写）"><a href="#1-3-2-MacOS（未写）" class="headerlink" title="1.3.2 MacOS（未写）"></a>1.3.2 MacOS（未写）</h6><h6 id="1-3-3-Linux（未写完）"><a href="#1-3-3-Linux（未写完）" class="headerlink" title="1.3.3 Linux（未写完）"></a>1.3.3 Linux（未写完）</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;依赖程序&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206214009799.png" alt="image-20230206214009799"></li><li><em><strong>&#x3D;&#x3D;下载&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206214243047.png" alt="image-20230206214243047"><br><img src="/road2dasheng/img/06/image-20230206214331536.png" alt="image-20230206214331536"></li><li><em><strong>&#x3D;&#x3D;安装&#x3D;&#x3D;</strong></em><br>1：<br><img src="/road2dasheng/img/06/image-20230206203053241.png" alt="image-20230206203053241"><br>2：<br><img src="/road2dasheng/img/06/image-20230206203131493.png" alt="image-20230206203131493"><br>3：<br><img src="/road2dasheng/img/06/image-20230206203340212.png" alt="image-20230206203340212"><br>4：<br><img src="/road2dasheng/img/06/image-20230206203510838.png" alt="image-20230206203510838"><br>5：<br><img src="/road2dasheng/img/06/image-20230206203609719.png" alt="image-20230206203609719"><br>6：***&#x3D;&#x3D;重启电脑，打开CMD，输入python&#x3D;&#x3D;***</li></ul></blockquote><h5 id="1-4-Python解释器"><a href="#1-4-Python解释器" class="headerlink" title="1.4 Python解释器"></a>1.4 Python解释器</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215145597.png" alt="image-20230206215145597"></li><li><em><strong>&#x3D;&#x3D;位置&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215224043.png" alt="image-20230206215224043"></li><li><em><strong>&#x3D;&#x3D;.py文件&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215346393.png" alt="image-20230206215346393"></li></ul></blockquote><h5 id="1-5-Python开发环境"><a href="#1-5-Python开发环境" class="headerlink" title="1.5 Python开发环境"></a>1.5 Python开发环境</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;Python程序的开发方式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215703149.png" alt="image-20230206215703149"></li><li><em><strong>&#x3D;&#x3D;Pycharm&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215850954.png" alt="image-20230206215850954"></li></ul></blockquote><h6 id="1-5-1-下载"><a href="#1-5-1-下载" class="headerlink" title="1.5.1 下载"></a>1.5.1 下载</h6><blockquote><p>   <img src="/road2dasheng/img/06/image-20230206215954695.png" alt="image-20230206215954695"></p></blockquote><h6 id="1-5-2-安装"><a href="#1-5-2-安装" class="headerlink" title="1.5.2 安装"></a>1.5.2 安装</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206220857348.png" alt="image-20230206220857348"><br><img src="/road2dasheng/img/06/image-20230206220931223.png" alt="image-20230206220931223"><br><img src="/road2dasheng/img/06/image-20230206220951229.png" alt="image-20230206220951229"><br><img src="/road2dasheng/img/06/image-20230206221010183.png" alt="image-20230206221010183"><br><img src="/road2dasheng/img/06/image-20230206221025464.png" alt="image-20230206221025464"><br><img src="/road2dasheng/img/06/image-20230206221043659.png" alt="image-20230206221043659"></p></blockquote><h6 id="1-5-3-使用"><a href="#1-5-3-使用" class="headerlink" title="1.5.3 使用"></a>1.5.3 使用</h6><blockquote><ol><li><em><strong>&#x3D;&#x3D;新建工程&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206221501809.png" alt="image-20230206221501809"></li><li><em><strong>&#x3D;&#x3D;指定工程路径以及选择Python解释器&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206221746955.png" alt="image-20230206221746955"></li><li><em><strong>&#x3D;&#x3D;配置Python解释器&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206221814288.png" alt="image-20230206221814288"></li><li><em><strong>&#x3D;&#x3D;确认工程路径和解释器&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206221927453.png" alt="image-20230206221927453"> </li><li><em><strong>&#x3D;&#x3D;工程创建完成&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206222257781.png" alt="image-20230206222257781"></li></ol></blockquote><hr><h4 id="二、Python基础语法"><a href="#二、Python基础语法" class="headerlink" title="二、Python基础语法"></a>二、Python基础语法</h4><h5 id="2-1-字面量"><a href="#2-1-字面量" class="headerlink" title="2.1 字面量"></a>2.1 字面量</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206225020124.png" alt="image-20230206225020124"></p><ul><li><em><strong>&#x3D;&#x3D;常用的值类型&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206225339746.png" alt="image-20230206225339746"><br><img src="/road2dasheng/img/06/image-20230206225450175.png" alt="image-20230206225450175"></li></ul></blockquote><h5 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206225802843.png" alt="image-20230206225802843"></p></blockquote><h5 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206230018642.png" alt="image-20230206230018642"></p></blockquote><h5 id="2-4-数据类型"><a href="#2-4-数据类型" class="headerlink" title="2.4 数据类型"></a>2.4 数据类型</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206230308771.png" alt="image-20230206230308771"></p><ul><li><em><strong>&#x3D;&#x3D;type()语句：用于查看数据的类型&#x3D;&#x3D;</strong></em></li></ul><p><img src="/road2dasheng/img/06/image-20230206230448848.png" alt="image-20230206230448848"></p><ul><li><em><strong>&#x3D;&#x3D;变量无类型&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206230607854.png" alt="image-20230206230607854"></li><li><em><strong>&#x3D;&#x3D;字符串类型的定义方式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206230707480.png" alt="image-20230206230707480"></li></ul></blockquote><h5 id="2-5-数据类型转换"><a href="#2-5-数据类型转换" class="headerlink" title="2.5 数据类型转换"></a>2.5 数据类型转换</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206230804066.png" alt="image-20230206230804066"></p><ul><li><em><strong>&#x3D;&#x3D;常见的转换语句&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206230846417.png" alt="image-20230206230846417"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206230926846.png" alt="image-20230206230926846"></li></ul></blockquote><h5 id="2-6-标识符"><a href="#2-6-标识符" class="headerlink" title="2.6 标识符"></a>2.6 标识符</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206232605676.png" alt="image-20230206232605676"></p></blockquote><blockquote><ul><li><p><em><strong>&#x3D;&#x3D;命名规则&#x3D;&#x3D;</strong></em></p><p><img src="/road2dasheng/img/06/image-20230206232545339.png" alt="image-20230206232545339"></p><p>1 - 内容限定</p><p><img src="/road2dasheng/img/06/image-20230206231318650.png" alt="image-20230206231318650"><br>2 - 大小写敏感<br><img src="/road2dasheng/img/06/image-20230206231432769.png" alt="image-20230206231432769"><br>3 - 不能使用关键字<br><img src="/road2dasheng/img/06/image-20230206231537662.png" alt="image-20230206231537662"></p></li></ul></blockquote><blockquote><ul><li><h6 id="x3D-x3D-命名规范：以变量为例-x3D-x3D"><a href="#x3D-x3D-命名规范：以变量为例-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;命名规范：以变量为例&#x3D;&#x3D;"></a><em><strong>&#x3D;&#x3D;命名规范：以变量为例&#x3D;&#x3D;</strong></em></h6><p><img src="/road2dasheng/img/06/image-20230206232456752.png" alt="image-20230206232456752"><br>1 - 见名知意<br><img src="/road2dasheng/img/06/image-20230206232435368.png" alt="image-20230206232435368"><br>2 - 下划线命名法</p><p><img src="/road2dasheng/img/06/image-20230206232412840.png" alt="image-20230206232412840"><br>3 - 英文字母全小写<br><img src="/road2dasheng/img/06/image-20230206232345777.png" alt="image-20230206232345777"></p></li></ul></blockquote><h5 id="2-7-运算符"><a href="#2-7-运算符" class="headerlink" title="2.7 运算符"></a>2.7 运算符</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;算术运算符&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206232901942.png" alt="image-20230206232901942"></li><li><em><strong>&#x3D;&#x3D;赋值运算符&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206232942892.png" alt="image-20230206232942892"></li><li><em><strong>&#x3D;&#x3D;复合运算符&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206233012036.png" alt="image-20230206233012036"></li></ul></blockquote><h5 id="2-8-字符串扩展"><a href="#2-8-字符串扩展" class="headerlink" title="2.8 字符串扩展"></a>2.8 字符串扩展</h5><h6 id="2-8-1-字符串的三种定义方式"><a href="#2-8-1-字符串的三种定义方式" class="headerlink" title="2.8.1 字符串的三种定义方式"></a>2.8.1 字符串的三种定义方式</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206233254712.png" alt="image-20230206233254712"></p><ul><li><em><strong>&#x3D;&#x3D;引号嵌套&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206233408531.png" alt="image-20230206233408531"></li></ul></blockquote><h6 id="2-8-2-字符串拼接"><a href="#2-8-2-字符串拼接" class="headerlink" title="2.8.2 字符串拼接"></a>2.8.2 字符串拼接</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206233614942.png" alt="image-20230206233614942"></p><ul><li><em><strong>&#x3D;&#x3D;注意&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206233658022.png" alt="image-20230206233658022"></li></ul></blockquote><h6 id="2-8-3-字符串格式化"><a href="#2-8-3-字符串格式化" class="headerlink" title="2.8.3 字符串格式化"></a>2.8.3 字符串格式化</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206233818043.png" alt="image-20230206233818043"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206233944307.png" alt="image-20230206233944307"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206234021770.png" alt="image-20230206234021770"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206234118627.png" alt="image-20230206234118627"></p></blockquote><h6 id="2-8-4-格式化的数字精度控制"><a href="#2-8-4-格式化的数字精度控制" class="headerlink" title="2.8.4 格式化的数字精度控制"></a>2.8.4 格式化的数字精度控制</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206234306806.png" alt="image-20230206234306806"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206234447985.png" alt="image-20230206234447985"></p></blockquote><h6 id="2-8-5-字符串格式化方式2"><a href="#2-8-5-字符串格式化方式2" class="headerlink" title="2.8.5 字符串格式化方式2"></a>2.8.5 字符串格式化方式2</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206234737583.png" alt="image-20230206234737583"></p></blockquote><h6 id="2-8-6-表达式的格式化"><a href="#2-8-6-表达式的格式化" class="headerlink" title="2.8.6 表达式的格式化"></a>2.8.6 表达式的格式化</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206234946380.png" alt="image-20230206234946380"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206235014790.png" alt="image-20230206235014790"></p></blockquote><h5 id="2-9-数据输入：input语句"><a href="#2-9-数据输入：input语句" class="headerlink" title="2.9 数据输入：input语句"></a>2.9 数据输入：input语句</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206235251638.png" alt="image-20230206235251638"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206235311420.png" alt="image-20230206235311420"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206235343068.png" alt="image-20230206235343068"></p></blockquote><hr><h4 id="三、Python判断语句"><a href="#三、Python判断语句" class="headerlink" title="三、Python判断语句"></a>三、Python判断语句</h4><h5 id="3-1-前言"><a href="#3-1-前言" class="headerlink" title="3.1 前言"></a>3.1 前言</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207080344967.png" alt="image-20230207080344967"></p></blockquote><h5 id="3-2-布尔类型和比较运算符"><a href="#3-2-布尔类型和比较运算符" class="headerlink" title="3.2 布尔类型和比较运算符"></a>3.2 布尔类型和比较运算符</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;布尔类型的定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207085452264.png" alt="image-20230207085452264"></li><li><em><strong>&#x3D;&#x3D;比较运算符&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207085541085.png" alt="image-20230207085541085"><br><img src="/road2dasheng/img/06/image-20230207085607512.png" alt="image-20230207085607512"></li></ul></blockquote><h5 id="3-3-if-语句"><a href="#3-3-if-语句" class="headerlink" title="3.3 if 语句"></a>3.3 if 语句</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207085858733.png" alt="image-20230207085858733"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br>1、判断条件的结果一定要是布尔类型<br><img src="/road2dasheng/img/06/image-20230207090145521.png" alt="image-20230207090145521"><br>2、不要忘记判断条件后的： 引号<br>3、归属于if语句的代码块，需在前方填充4个空格缩进<br><img src="/road2dasheng/img/06/image-20230207090241671.png" alt="image-20230207090241671"></li></ul></blockquote><h5 id="3-4-if-else-语句"><a href="#3-4-if-else-语句" class="headerlink" title="3.4 if else 语句"></a>3.4 if else 语句</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207091258510.png" alt="image-20230207091258510"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207091419242.png" alt="image-20230207091419242"></li></ul></blockquote><h5 id="3-5-if-elif-else-语句"><a href="#3-5-if-elif-else-语句" class="headerlink" title="3.5 if elif else 语句"></a>3.5 if elif else 语句</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207091727164.png" alt="image-20230207091727164"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br>1、elif可以写多个<br><img src="/road2dasheng/img/06/image-20230207092501700.png" alt="image-20230207092501700"><br>2、判断是互斥且有序的，上一个满足后面的就不会判断了<br><img src="/road2dasheng/img/06/image-20230207092636447.png" alt="image-20230207092636447"><br>3、可以在条件判断中，直接写input语句，节省代码量<br><img src="/road2dasheng/img/06/image-20230207092650573.png" alt="image-20230207092650573"><br>4、可以将input输入语句直接写入判断条件中，节省代码量<br><img src="/road2dasheng/img/06/image-20230207092745514.png" alt="image-20230207092745514"></li></ul></blockquote><h5 id="3-6-判断语句的嵌套"><a href="#3-6-判断语句的嵌套" class="headerlink" title="3.6 判断语句的嵌套"></a>3.6 判断语句的嵌套</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207092940295.png" alt="image-20230207092940295"></p><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207093131987.png" alt="image-20230207093131987"></li><li><em><strong>&#x3D;&#x3D;简单嵌套&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207093223164.png" alt="image-20230207093223164"></li><li><em><strong>&#x3D;&#x3D;自由嵌套&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207093250553.png" alt="image-20230207093250553"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207093326824.png" alt="image-20230207093326824"></li></ul></blockquote><hr><h4 id="四、循环语句"><a href="#四、循环语句" class="headerlink" title="四、循环语句"></a>四、循环语句</h4><h5 id="4-1-前言"><a href="#4-1-前言" class="headerlink" title="4.1 前言"></a>4.1 前言</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207094109353.png" alt="image-20230207094109353"></p></blockquote><h5 id="4-2-While-循环"><a href="#4-2-While-循环" class="headerlink" title="4.2 While 循环"></a>4.2 While 循环</h5><h6 id="4-2-1-基础语法"><a href="#4-2-1-基础语法" class="headerlink" title="4.2.1 基础语法"></a>4.2.1 基础语法</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230207094506878.png" alt="image-20230207094506878"></p></blockquote><h6 id="4-2-2-注意事项"><a href="#4-2-2-注意事项" class="headerlink" title="4.2.2 注意事项"></a>4.2.2 注意事项</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230207094606623.png" alt="image-20230207094606623"></p></blockquote><h6 id="4-2-3-嵌套应用"><a href="#4-2-3-嵌套应用" class="headerlink" title="4.2.3 嵌套应用"></a>4.2.3 嵌套应用</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095034307.png" alt="image-20230207095034307"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095135492.png" alt="image-20230207095135492"></li></ul></blockquote><h6 id="4-2-4-嵌套案例"><a href="#4-2-4-嵌套案例" class="headerlink" title="4.2.4 嵌套案例"></a>4.2.4 嵌套案例</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;打印九九乘法表 &#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095345159.png" alt="image-20230207095345159"></li><li><em><strong>&#x3D;&#x3D;补充知识&#x3D;&#x3D;</strong></em><br>1、print输出不换行<br><img src="/road2dasheng/img/06/image-20230207095448843.png" alt="image-20230207095448843"><br>2、制表符 \t<br><img src="/road2dasheng/img/06/image-20230207095531049.png" alt="image-20230207095531049"></li></ul></blockquote><h5 id="4-3-for-循环"><a href="#4-3-for-循环" class="headerlink" title="4.3 for 循环"></a>4.3 for 循环</h5><h6 id="4-3-1-基础语法"><a href="#4-3-1-基础语法" class="headerlink" title="4.3.1 基础语法"></a>4.3.1 基础语法</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;与while循环的比较&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095917289.png" alt="image-20230207095917289"></li><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095951281.png" alt="image-20230207095951281"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207100031385.png" alt="image-20230207100031385"></li></ul></blockquote><h6 id="4-3-2-range-语句"><a href="#4-3-2-range-语句" class="headerlink" title="4.3.2 range 语句"></a>4.3.2 range 语句</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;可迭代类型&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207100157295.png" alt="image-20230207100157295"></li><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207100539084.png" alt="image-20230207100539084"></li></ul></blockquote><h6 id="4-3-3-变量作用域"><a href="#4-3-3-变量作用域" class="headerlink" title="4.3.3 变量作用域"></a>4.3.3 变量作用域</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230207101332358.png" alt="image-20230207101332358"><br><img src="/road2dasheng/img/06/image-20230207101402400.png" alt="image-20230207101402400"></p></blockquote><h6 id="4-3-4-嵌套应用"><a href="#4-3-4-嵌套应用" class="headerlink" title="4.3.4 嵌套应用"></a>4.3.4 嵌套应用</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207101514750.png" alt="image-20230207101514750"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br>1、缩进<br><img src="/road2dasheng/img/06/image-20230207101536850.png" alt="image-20230207101536850"><br>2、while循环和for循环可以相互嵌套<br><img src="/road2dasheng/img/06/image-20230207101649473.png" alt="image-20230207101649473"></li></ul></blockquote><h5 id="4-4-循环中断：break-和continue"><a href="#4-4-循环中断：break-和continue" class="headerlink" title="4.4 循环中断：break 和continue"></a>4.4 循环中断：break 和continue</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207101800526.png" alt="image-20230207101800526"></p><ul><li><em><strong>&#x3D;&#x3D;continue 关键字&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207101913748.png" alt="image-20230207101913748"><br><img src="/road2dasheng/img/06/image-20230207102101672.png" alt="image-20230207102101672"></li><li><em><strong>&#x3D;&#x3D;break 关键字&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207102154320.png" alt="image-20230207102154320"><br><img src="/road2dasheng/img/06/image-20230207102216322.png" alt="image-20230207102216322"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br>1、continue和break，在for和while循环中作用一致<br>2、在嵌套循环中，只能作用在所在的循环上，无法对上层循环起作用<br>！！！2.1 continue关键字只可以控制：它所在的循环临时中断<br><img src="/road2dasheng/img/06/image-20230207102446620.png" alt="image-20230207102446620"><br>！！！  2.2 break关键字同样只可以控制：它所在的循环永久中断<br><img src="/road2dasheng/img/06/image-20230207102526697.png" alt="image-20230207102526697"></li></ul></blockquote><h4 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h4><h5 id="5-1-函数介绍"><a href="#5-1-函数介绍" class="headerlink" title="5.1 函数介绍"></a>5.1 函数介绍</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;内涵&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103404563.png" alt="image-20230207103404563"></li><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103708768.png" alt="image-20230207103708768"></li></ul></blockquote><h5 id="5-2-函数的定义"><a href="#5-2-函数的定义" class="headerlink" title="5.2 函数的定义"></a>5.2 函数的定义</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;基础定义语法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103916445.png" alt="image-20230207103916445"></li><li><em><strong>&#x3D;&#x3D;使用步骤&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103933388.png" alt="image-20230207103933388"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103948446.png" alt="image-20230207103948446"></li></ul></blockquote><h5 id="5-3-函数的参数"><a href="#5-3-函数的参数" class="headerlink" title="5.3 函数的参数"></a>5.3 函数的参数</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104228957.png" alt="image-20230207104228957"></li><li><em><strong>&#x3D;&#x3D;使用方式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104347274.png" alt="image-20230207104347274"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104406994.png" alt="image-20230207104406994"></li></ul></blockquote><h5 id="5-4-函数的返回值"><a href="#5-4-函数的返回值" class="headerlink" title="5.4 函数的返回值"></a>5.4 函数的返回值</h5><h6 id="5-4-1-return-语句"><a href="#5-4-1-return-语句" class="headerlink" title="5.4.1 return 语句"></a>5.4.1 return 语句</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104559834.png" alt="image-20230207104559834"></li><li><em><strong>&#x3D;&#x3D;使用方法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104658277.png" alt="image-20230207104658277"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104715112.png" alt="image-20230207104715112"></li></ul></blockquote><h6 id="5-4-2-None"><a href="#5-4-2-None" class="headerlink" title="5.4.2 None"></a>5.4.2 None</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104940205.png" alt="image-20230207104940205"></li><li><em><strong>&#x3D;&#x3D;如何返回None&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105134128.png" alt="image-20230207105134128"></li><li><em><strong>&#x3D;&#x3D;使用场景&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105309116.png" alt="image-20230207105309116"></li></ul></blockquote><h5 id="5-5-函数说明文档"><a href="#5-5-函数说明文档" class="headerlink" title="5.5 函数说明文档"></a>5.5 函数说明文档</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105443438.png" alt="image-20230207105443438"><br><img src="/road2dasheng/img/06/image-20230207105522316.png" alt="image-20230207105522316"></li><li><em><strong>&#x3D;&#x3D;定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105607996.png" alt="image-20230207105607996"></li></ul></blockquote><h5 id="5-6-函数的嵌套调用"><a href="#5-6-函数的嵌套调用" class="headerlink" title="5.6 函数的嵌套调用"></a>5.6 函数的嵌套调用</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105715000.png" alt="image-20230207105715000"></li><li><em><strong>&#x3D;&#x3D;执行流程&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105731678.png" alt="image-20230207105731678"></li></ul></blockquote><h5 id="5-7-变量的作用域"><a href="#5-7-变量的作用域" class="headerlink" title="5.7 变量的作用域"></a>5.7 变量的作用域</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;局部变量&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207110159172.png" alt="image-20230207110159172"></li><li><em><strong>&#x3D;&#x3D;全局变量&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207110235347.png" alt="image-20230207110235347"></li><li><em><strong>&#x3D;&#x3D;global关键字：将函数内定义的变量声明为全局变量&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207110407641.png" alt="image-20230207110407641"><br><img src="/road2dasheng/img/06/image-20230207110445275.png" alt="image-20230207110445275"></li></ul></blockquote><h4 id="六、python-数据容器"><a href="#六、python-数据容器" class="headerlink" title="六、python 数据容器"></a>六、python 数据容器</h4><h5 id="6-1-数据容器入门"><a href="#6-1-数据容器入门" class="headerlink" title="6.1 数据容器入门"></a>6.1 数据容器入门</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207141359044.png" alt="image-20230207141359044"></li><li><em><strong>&#x3D;&#x3D;分类&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207141542038.png" alt="image-20230207141542038"></li></ul></blockquote><h5 id="6-2-数据容器：list-列表"><a href="#6-2-数据容器：list-列表" class="headerlink" title="6.2 数据容器：list(列表)"></a>6.2 数据容器：list(列表)</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;列表的定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207141932174.png" alt="image-20230207141932174"></li></ul><p><em><strong>&#x3D;&#x3D;！列表特点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207143200206.png" alt="image-20230207143200206"></p><ul><li><em><strong>&#x3D;&#x3D;列表的下标索引&#x3D;&#x3D;</strong></em><br>  <em>正向索引</em><br>  <img src="/road2dasheng/img/06/image-20230207142423850.png" alt="image-20230207142423850"></li></ul><p>  <em>反向索引</em><br>  <img src="/road2dasheng/img/06/image-20230207142450740.png" alt="image-20230207142450740"></p><p>  <em>嵌套索引</em><br>  <img src="/road2dasheng/img/06/image-20230207142530435.png" alt="image-20230207142530435"></p><ul><li><em><strong>&#x3D;&#x3D;列表的常用操作（方法）&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207142853698.png" alt="image-20230207142853698"></li></ul></blockquote><h5 id="6-3-list（列表）的遍历"><a href="#6-3-list（列表）的遍历" class="headerlink" title="6.3 list（列表）的遍历"></a>6.3 list（列表）的遍历</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;使用while循环遍历列表&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207143652064.png" alt="image-20230207143652064"></li><li><em><strong>&#x3D;&#x3D;使用for循环遍历列表&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207143732181.png" alt="image-20230207143732181"></li><li><em><strong>&#x3D;&#x3D;区别&#x3D;&#x3D;</strong></em><img src="/img/06/image-20230207143756454.png" alt="image-20230207143756454" style="zoom:80%;" /></li></ul></blockquote><h5 id="6-4-数据容器：tuple-元组"><a href="#6-4-数据容器：tuple-元组" class="headerlink" title="6.4 数据容器：tuple(元组)"></a>6.4 数据容器：tuple(元组)</h5><blockquote><ul><li>元组的作用<br><img src="/road2dasheng/img/06/image-20230207144019289.png" alt="image-20230207144019289"></li><li><em><strong>&#x3D;&#x3D;元组的定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207144037482.png" alt="image-20230207144037482"></li><li><em><strong>&#x3D;&#x3D;元组的操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207144127804.png" alt="image-20230207144127804"><br><img src="/road2dasheng/img/06/image-20230207144251970.png" alt="image-20230207144251970"></li><li>元组的特点<br><img src="/road2dasheng/img/06/image-20230207144321973.png" alt="image-20230207144321973"></li></ul></blockquote><h5 id="6-5-数据容器：str-字符串"><a href="#6-5-数据容器：str-字符串" class="headerlink" title="6.5 数据容器：str(字符串)"></a>6.5 数据容器：str(字符串)</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;内涵&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207144520635.png" alt="image-20230207144520635"></li><li><em><strong>&#x3D;&#x3D;索引&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207144544004.png" alt="image-20230207144544004"></li><li><em><strong>&#x3D;&#x3D;操作（方法）&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207162543753.png" alt="image-20230207162543753"></li><li><em><strong>&#x3D;&#x3D;特点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207162712846.png" alt="image-20230207162712846"></li><li><em><strong>&#x3D;&#x3D;比较大小&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207165658035.png" alt="image-20230207165658035"><br><img src="/road2dasheng/img/06/image-20230207165758635.png" alt="image-20230207165758635"></li></ul></blockquote><h5 id="6-6-数据容器（序列）的切片"><a href="#6-6-数据容器（序列）的切片" class="headerlink" title="6.6 数据容器（序列）的切片"></a>6.6 数据容器（序列）的切片</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;序列的含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163130319.png" alt="image-20230207163130319"></li><li><em><strong>&#x3D;&#x3D;序列的常用操作 - 切片&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163229732.png" alt="image-20230207163229732"></li><li><em><strong>&#x3D;&#x3D;切片示例&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163308099.png" alt="image-20230207163308099"><br><img src="/road2dasheng/img/06/image-20230207163337009.png" alt="image-20230207163337009"></li></ul></blockquote><h5 id="6-7-数据容器：set-集合"><a href="#6-7-数据容器：set-集合" class="headerlink" title="6.7 数据容器：set(集合)"></a>6.7 数据容器：set(集合)</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163525868.png" alt="image-20230207163525868"></li><li><em><strong>&#x3D;&#x3D;定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163559846.png" alt="image-20230207163559846"></li><li><em><strong>&#x3D;&#x3D;常用操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163623278.png" alt="image-20230207163623278"></li><li><em><strong>&#x3D;&#x3D;特点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163823734.png" alt="image-20230207163823734"></li></ul></blockquote><h5 id="6-8-数据容器：dict-字典、映射"><a href="#6-8-数据容器：dict-字典、映射" class="headerlink" title="6.8 数据容器：dict(字典、映射)"></a>6.8 数据容器：dict(字典、映射)</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164411010.png" alt="image-20230207164411010"></li><li><em><strong>&#x3D;&#x3D;定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164506391.png" alt="image-20230207164506391"></li><li><em><strong>&#x3D;&#x3D;字典数据的获取&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164549697.png" alt="image-20230207164549697"></li><li><em><strong>&#x3D;&#x3D;嵌套&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164637288.png" alt="image-20230207164637288"><br><img src="/road2dasheng/img/06/image-20230207164714188.png" alt="image-20230207164714188"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164758604.png" alt="image-20230207164758604"></li><li><em><strong>&#x3D;&#x3D;常用操作（方法）&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164859281.png" alt="image-20230207164859281"></li><li><em><strong>&#x3D;&#x3D;特点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164915100.png" alt="image-20230207164915100"></li></ul></blockquote><h5 id="6-9-数据容器的通用操作"><a href="#6-9-数据容器的通用操作" class="headerlink" title="6.9 数据容器的通用操作"></a>6.9 数据容器的通用操作</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;数据容器对比&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207165249073.png" alt="image-20230207165249073"></li><li><em><strong>&#x3D;&#x3D;数据容器通用操作（方法）&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207165432366.png" alt="image-20230207165432366"></li></ul></blockquote><h5 id="6-10-综合案例"><a href="#6-10-综合案例" class="headerlink" title="6.10 综合案例"></a>6.10 综合案例</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207165920874.png" alt="image-20230207165920874"></p></blockquote><hr><h4 id="七、函数进阶"><a href="#七、函数进阶" class="headerlink" title="七、函数进阶"></a>七、函数进阶</h4><h5 id="7-1-函数多返回值"><a href="#7-1-函数多返回值" class="headerlink" title="7.1 函数多返回值"></a>7.1 函数多返回值</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207170256424.png" alt="image-20230207170256424"><br><img src="/road2dasheng/img/06/image-20230207170321882.png" alt="image-20230207170321882"></p></blockquote><h5 id="7-2-函数多种传参方式"><a href="#7-2-函数多种传参方式" class="headerlink" title="7.2 函数多种传参方式"></a>7.2 函数多种传参方式</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;参数种类&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170620424.png" alt="image-20230207170620424"></li><li><em><strong>&#x3D;&#x3D;位置参数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170605629.png" alt="image-20230207170605629"></li><li><em><strong>&#x3D;&#x3D;关键字参数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170729644.png" alt="image-20230207170729644"></li><li><em><strong>&#x3D;&#x3D;缺省参数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170748546.png" alt="image-20230207170748546"></li><li><em><strong>&#x3D;&#x3D;不定长参数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170814643.png" alt="image-20230207170814643"></li></ul><p><img src="/road2dasheng/img/06/image-20230207171209075.png" alt="image-20230207171209075"></p><p><img src="/road2dasheng/img/06/image-20230207171619291.png" alt="image-20230207171619291"><br><em><strong>&#x3D;&#x3D;综上：&#x3D;&#x3D;</strong></em><br>位置不定长传递以*号标记一个形式参数，以元组的形式接受参数，形式参数一般命名为args<br>关键字不定长传递以**号标记一个形式参数，以字典的形式接受参数，形式参数一般命名为kwargs</p></blockquote><h5 id="7-3-匿名函数"><a href="#7-3-匿名函数" class="headerlink" title="7.3 匿名函数"></a>7.3 匿名函数</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;函数作为参数传递&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207172044975.png" alt="image-20230207172044975"></li><li><em><strong>&#x3D;&#x3D;lambda匿名函数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207172204828.png" alt="image-20230207172204828"></li></ul></blockquote><hr><h4 id="八、python文件操作"><a href="#八、python文件操作" class="headerlink" title="八、python文件操作"></a>八、python文件操作</h4><h5 id="8-0-文件及其操作的含义"><a href="#8-0-文件及其操作的含义" class="headerlink" title="8.0 文件及其操作的含义"></a>8.0 文件及其操作的含义</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;什么是文件&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175440492.png" alt="image-20230207175440492"></li><li><em><strong>&#x3D;&#x3D;什么是文件操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175516480.png" alt="image-20230207175516480"></li></ul></blockquote><h5 id="8-1-文件的编码"><a href="#8-1-文件的编码" class="headerlink" title="8.1 文件的编码"></a>8.1 文件的编码</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;什么是文件编码&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175036934.png" alt="image-20230207175036934"></li><li><em><strong>&#x3D;&#x3D;文件编码方式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175120133.png" alt="image-20230207175120133">注：UTF-8是目前全球通用的编码格式，除非有特殊需求，否则，一律以UTF-8格式进行文件编码即可。</li></ul></blockquote><h5 id="8-2-文件的读取"><a href="#8-2-文件的读取" class="headerlink" title="8.2 文件的读取"></a>8.2 文件的读取</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;常用方法汇总&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175755741.png" alt="image-20230207175755741"></li><li><em><strong>&#x3D;&#x3D;常用方法详述&#x3D;&#x3D;</strong></em><br>1、open()方法<br><img src="/road2dasheng/img/06/image-20230207175904706.png" alt="image-20230207175904706"><br><img src="/road2dasheng/img/06/image-20230207180132972.png" alt="image-20230207180132972"><br>2、***&#x3D;&#x3D;read()方法&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180840856.png" alt="image-20230207180840856"><br>3、***&#x3D;&#x3D;readlines()方法&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180749863.png" alt="image-20230207180749863"><br>4、***&#x3D;&#x3D;readline()方法&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180550876.png" alt="image-20230207180550876"><br>5、***&#x3D;&#x3D;for循环读取文件行&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180524473.png" alt="image-20230207180524473"><br>6、***&#x3D;&#x3D;close()关闭文件对象&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180507636.png" alt="image-20230207180507636"><br>7、***&#x3D;&#x3D;with open()方法&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180436525.png" alt="image-20230207180436525"></li></ul></blockquote><h5 id="8-3-文件的写入"><a href="#8-3-文件的写入" class="headerlink" title="8.3 文件的写入"></a>8.3 文件的写入</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;文件的写操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181036813.png" alt="image-20230207181036813"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181059768.png" alt="image-20230207181059768"></li></ul></blockquote><h5 id="8-4-文件的追加"><a href="#8-4-文件的追加" class="headerlink" title="8.4 文件的追加"></a>8.4 文件的追加</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;文件的追加操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181213717.png" alt="image-20230207181213717"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181244031.png" alt="image-20230207181244031"></li></ul></blockquote><h5 id="8-5-文件操作综合案例"><a href="#8-5-文件操作综合案例" class="headerlink" title="8.5 文件操作综合案例"></a>8.5 文件操作综合案例</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207181328964.png" alt="image-20230207181328964"></p></blockquote><hr><h4 id="九、python异常、模块与包"><a href="#九、python异常、模块与包" class="headerlink" title="九、python异常、模块与包"></a>九、python异常、模块与包</h4><h5 id="9-1-了解异常"><a href="#9-1-了解异常" class="headerlink" title="9.1 了解异常"></a>9.1 了解异常</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;什么是异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181919475.png" alt="image-20230207181919475"></li><li><em><strong>&#x3D;&#x3D;bug是什么&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181937325.png" alt="image-20230207181937325"></li></ul></blockquote><h5 id="9-2-异常的捕获方法"><a href="#9-2-异常的捕获方法" class="headerlink" title="9.2 异常的捕获方法"></a>9.2 异常的捕获方法</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;为什么要捕获异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207183444545.png" alt="image-20230207183444545"></li><li><em><strong>&#x3D;&#x3D;捕获异常的方法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207183649135.png" alt="image-20230207183649135"><br><em><strong>&#x3D;&#x3D;0、语法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184923110.png" alt="image-20230207184923110"><br><em><strong>&#x3D;&#x3D;1、捕获常规异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207183815732.png" alt="image-20230207183815732"><br><em><strong>&#x3D;&#x3D;2、捕获指定异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207183859846.png" alt="image-20230207183859846"><br><em><strong>&#x3D;&#x3D;3、捕获多个异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184508899.png" alt="image-20230207184508899"><br><em><strong>&#x3D;&#x3D;4、捕获异常并输出描述信息&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184554469.png" alt="image-20230207184554469"><br><em><strong>&#x3D;&#x3D;5、捕获所有异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184610533.png" alt="image-20230207184610533"><br><em><strong>&#x3D;&#x3D;6、异常else&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184635432.png" alt="image-20230207184635432"><br><em><strong>&#x3D;&#x3D;7、异常finally&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184703979.png" alt="image-20230207184703979"></li></ul></blockquote><h5 id="9-3-异常的传递"><a href="#9-3-异常的传递" class="headerlink" title="9.3 异常的传递"></a>9.3 异常的传递</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207185119362.png" alt="image-20230207185119362"><br><img src="/road2dasheng/img/06/image-20230207185153893.png" alt="image-20230207185153893"></p></blockquote><h5 id="9-4-Python模块"><a href="#9-4-Python模块" class="headerlink" title="9.4 Python模块"></a>9.4 Python模块</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;模块的含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207185658434.png" alt="image-20230207185658434"></li><li><em><strong>&#x3D;&#x3D;模块的导入：模块的导入一般写在代码文件的开头位置&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207185743071.png" alt="image-20230207185743071"><br><em><strong>&#x3D;&#x3D;1、import模块名&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212004261.png" alt="image-20230207212004261"><br><em><strong>&#x3D;&#x3D;2、from 模块名 import 功能名&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212023320.png" alt="image-20230207212023320"><br>***&#x3D;&#x3D;3、from 模块名 import <em>&#x3D;&#x3D;</em>**<br><img src="/road2dasheng/img/06/image-20230207212033935.png" alt="image-20230207212033935"><br><em><strong>&#x3D;&#x3D;4、as定义别名&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212058354.png" alt="image-20230207212058354"></li><li><em><strong>&#x3D;&#x3D;自定义模块&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212242291.png" alt="image-20230207212242291"></li><li><em><strong>&#x3D;&#x3D;测试模块&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212611827.png" alt="image-20230207212611827"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br>1、<br><img src="/road2dasheng/img/06/image-20230207212836404.png" alt="image-20230207212836404"><br>2、<br><img src="/road2dasheng/img/06/image-20230207212955319.png" alt="image-20230207212955319"></li></ul></blockquote><h5 id="9-5-Python包"><a href="#9-5-Python包" class="headerlink" title="9.5 Python包"></a>9.5 Python包</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213214547.png" alt="image-20230207213214547"></li><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213245082.png" alt="image-20230207213245082"></li><li><em><strong>&#x3D;&#x3D;创建&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213330021.png" alt="image-20230207213330021"></li><li><em><strong>&#x3D;&#x3D;使用&#x3D;&#x3D;</strong></em><br><em><strong>&#x3D;&#x3D;方式1：&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213404521.png" alt="image-20230207213404521"><br><em><strong>&#x3D;&#x3D;方式2：&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213559951.png" alt="image-20230207213559951"></li></ul></blockquote><h5 id="9-6-安装第三方Python包"><a href="#9-6-安装第三方Python包" class="headerlink" title="9.6 安装第三方Python包"></a>9.6 安装第三方Python包</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;什么是第三方包&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213731865.png" alt="image-20230207213731865"></li><li><em><strong>&#x3D;&#x3D;安装第三方包&#x3D;&#x3D;</strong></em><br><em><strong>&#x3D;&#x3D;1、pip命令&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213848844.png" alt="image-20230207213848844"><br><img src="/road2dasheng/img/06/image-20230207213925315.png" alt="image-20230207213925315"><br><em><strong>&#x3D;&#x3D;2、pycharm&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207214036558.png" alt="image-20230207214036558"></li></ul></blockquote><h4 id="十、数据可视化"><a href="#十、数据可视化" class="headerlink" title="十、数据可视化"></a>十、数据可视化</h4><h5 id="10-1-json数据格式"><a href="#10-1-json数据格式" class="headerlink" title="10.1 json数据格式"></a>10.1 json数据格式</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207215102933.png" alt="image-20230207215102933"></li><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207215135798.png" alt="image-20230207215135798"><br><img src="/road2dasheng/img/06/image-20230207215211600.png" alt="image-20230207215211600"></li><li><em><strong>&#x3D;&#x3D;python数据和Json数据的转化&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207220224205.png" alt="image-20230207220224205"></li></ul></blockquote><h5 id="10-2-pyecharts模块介绍"><a href="#10-2-pyecharts模块介绍" class="headerlink" title="10.2 pyecharts模块介绍"></a>10.2 pyecharts模块介绍</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207222046588.png" alt="image-20230207222046588"></p></blockquote><h5 id="10-3-折线图可视化"><a href="#10-3-折线图可视化" class="headerlink" title="10.3 折线图可视化"></a>10.3 折线图可视化</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207230131006.png" alt="image-20230207230131006"></p></blockquote><h5 id="10-4-地图可视化"><a href="#10-4-地图可视化" class="headerlink" title="10.4  地图可视化"></a>10.4  地图可视化</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207230421518.png" alt="image-20230207230421518"></p></blockquote><h5 id="10-5-动态展示柱状图"><a href="#10-5-动态展示柱状图" class="headerlink" title="10.5 动态展示柱状图"></a>10.5 动态展示柱状图</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207230337591.png" alt="image-20230207230337591"></p></blockquote><hr><h4 id="十一、面向对象"><a href="#十一、面向对象" class="headerlink" title="十一、面向对象"></a>十一、面向对象</h4><h5 id="11-1-初识对象"><a href="#11-1-初识对象" class="headerlink" title="11.1 初识对象"></a>11.1 初识对象</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;为什么需要使用对象？&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/Python%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0.assets/image-20230213221001714.png" alt="image-20230213221001714"><br><img src="/road2dasheng/img/06/image-20230213223431699.png" alt="image-20230213223431699"></li></ul></blockquote><h5 id="11-2-成员方法"><a href="#11-2-成员方法" class="headerlink" title="11.2 成员方法"></a>11.2 成员方法</h5><blockquote><ul><li><p><strong>&#x3D;&#x3D;<em>掌握类的定义和使用语法</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213225057127.png" alt="image-20230213225057127"></p></li><li><p><strong>&#x3D;&#x3D;<em>成员变量和成员方法</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213225331339.png" alt="image-20230213225331339"></p></li><li><p><strong>&#x3D;&#x3D;<em>成员方法的定义</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213225751002.png" alt="image-20230213225751002"></p></li><li><p><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em></p><p>只有通过self，成员方法才能访问成员变量；self出现在形参列表中，但是不占用参数位置，无需理会</p></li><li><p><img src="/road2dasheng/img/06/image-20230213230040689.png" alt="image-20230213230040689"></p></li></ul></blockquote><h5 id="11-3-类和对象"><a href="#11-3-类和对象" class="headerlink" title="11.3 类和对象"></a>11.3 类和对象</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>使用类描述事物的思想</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213230633155.png" alt="image-20230213230633155"></li><li><em><strong>&#x3D;&#x3D;为什么要创建对象&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230213230909912.png" alt="image-20230213230909912"><br><img src="/road2dasheng/img/06/image-20230213231122142.png" alt="image-20230213231122142"><br><img src="/road2dasheng/img/06/image-20230213231226296.png" alt="image-20230213231226296"></li><li><strong>&#x3D;&#x3D;<em>面向对象编程</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213231908044.png" alt="image-20230213231908044"></li><li><strong>&#x3D;&#x3D;<em>面向对象编程的三大特点</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213235847804.png" alt="image-20230213235847804"></li></ul></blockquote><h5 id="11-4-构造方法"><a href="#11-4-构造方法" class="headerlink" title="11.4 构造方法"></a>11.4 构造方法</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>属性（成员变量）的赋值</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213232507159.png" alt="image-20230213232507159"></li><li><strong>&#x3D;&#x3D;<em>构造方法</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213232833224.png" alt="image-20230213232833224"></li></ul></blockquote><h5 id="11-5-几种常用的类内置方法"><a href="#11-5-几种常用的类内置方法" class="headerlink" title="11.5 几种常用的类内置方法"></a>11.5 几种常用的类内置方法</h5><blockquote><ul><li><em><em>&#x3D;&#x3D;__*str__字符串方法</em>&#x3D;&#x3D;</em>*<br><img src="/road2dasheng/img/06/image-20230213234630538.png" alt="image-20230213234630538"></li><li><em><em>&#x3D;&#x3D;__*lt__小于符号比较方法</em>&#x3D;&#x3D;</em>*<br><img src="/road2dasheng/img/06/image-20230213234919460.png" alt="image-20230213234919460"></li><li><em><em>&#x3D;&#x3D;__*le__小于等于比较方法</em>&#x3D;&#x3D;</em>*<br><img src="/road2dasheng/img/06/image-20230213235231368.png" alt="image-20230213235231368"></li><li><em><strong>&#x3D;&#x3D;__eq__相等比较方法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230213235446084.png" alt="image-20230213235446084"></li></ul></blockquote><h5 id="11-6-封装"><a href="#11-6-封装" class="headerlink" title="11.6 封装"></a>11.6 封装</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>内涵</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214000034229.png" alt="image-20230214000034229"></li><li><strong>&#x3D;&#x3D;<em>私有成员</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214000140224.png" alt="image-20230214000140224"><br><img src="/road2dasheng/img/06/image-20230214000508065.png" alt="image-20230214000508065"><br><img src="/road2dasheng/img/06/image-20230214000747254.png" alt="image-20230214000747254"><br><img src="/road2dasheng/img/06/image-20230214001033295.png" alt="image-20230214001033295"></li></ul></blockquote><h5 id="11-7-继承"><a href="#11-7-继承" class="headerlink" title="11.7 继承"></a>11.7 继承</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>为什么需要继承</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214001353910.png" alt="image-20230214001353910"><br><img src="/road2dasheng/img/06/image-20230214001541910.png" alt="image-20230214001541910"></li><li><strong>&#x3D;&#x3D;<em>单继承</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214001758592.png" alt="image-20230214001758592"></li><li><strong>&#x3D;&#x3D;<em>多继承</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214001903960.png" alt="image-20230214001903960"><br><img src="/road2dasheng/img/06/image-20230214002109552.png" alt="image-20230214002109552"></li><li><em><strong>&#x3D;&#x3D;复写&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230214002838304.png" alt="image-20230214002838304"><br><img src="/road2dasheng/img/06/image-20230214003222493.png" alt="image-20230214003222493"></li></ul></blockquote><h5 id="11-8-类型注解"><a href="#11-8-类型注解" class="headerlink" title="11.8 类型注解"></a>11.8 类型注解</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>为什么需要类型注解</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214003420099.png" alt="image-20230214003420099"><br><img src="/road2dasheng/img/06/image-20230214003507600.png" alt="image-20230214003507600"><br><img src="/road2dasheng/img/06/image-20230214003614850.png" alt="image-20230214003614850"></li><li><strong>&#x3D;&#x3D;<em>类型注解的作用</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214003806560.png" alt="image-20230214003806560"></li><li><strong>&#x3D;&#x3D;<em>变量类型注解的语法</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214004010760.png" alt="image-20230214004010760"><br><img src="/road2dasheng/img/06/image-20230214004402225.png" alt="image-20230214004402225"><br><img src="/road2dasheng/img/06/image-20230214004459426.png" alt="image-20230214004459426"><br><img src="/road2dasheng/img/06/image-20230214004647996.png" alt="image-20230214004647996"></li><li><em><strong>&#x3D;&#x3D;类型注解的限制&#x3D;&#x3D;</strong></em><br> <img src="/road2dasheng/img/06/image-20230214004801118.png" alt="image-20230214004801118"></li><li><strong>&#x3D;&#x3D;<em>函数（方法）的类型注解 - 形参注解</em>&#x3D;&#x3D;</strong><br> <img src="/road2dasheng/img/06/image-20230214005256695.png" alt="image-20230214005256695"></li><li><em><strong>&#x3D;&#x3D;函数（方法）的类型注解 - 返回值注解&#x3D;&#x3D;</strong></em><br> <img src="/road2dasheng/img/06/image-20230214005412412.png" alt="image-20230214005412412"></li><li><em><strong>&#x3D;&#x3D;Union类型&#x3D;&#x3D;</strong></em><br> <img src="/road2dasheng/img/06/image-20230214005653174.png" alt="image-20230214005653174"><br> <img src="/road2dasheng/img/06/image-20230214005751943.png" alt="image-20230214005751943"></li></ul></blockquote><h5 id="11-9-多态"><a href="#11-9-多态" class="headerlink" title="11.9 多态"></a>11.9 多态</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;多态：同样的行为（函数），传入不同的对象，得到不同的状态&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230214010029907.png" alt="image-20230214010029907"><br><img src="/road2dasheng/img/06/image-20230214010221187.png" alt="image-20230214010221187"></li><li><em><strong>&#x3D;&#x3D;抽象类&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230214010644501.png" alt="image-20230214010644501"><br><img src="/road2dasheng/img/06/image-20230214010926228.png" alt="image-20230214010926228"><br><img src="/road2dasheng/img/06/image-20230214011308788.png" alt="image-20230214011308788"></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git&amp;Github视频教程-笔记</title>
    <link href="/road2dasheng/05_Git&amp;GitHub%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/road2dasheng/05_Git&amp;GitHub%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://www.bilibili.com/video/BV1sJ411D7xN/?p=2&spm_id_from=pageDriver&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-Git视频课程</a>笔记</p><h3 id="一、Git介绍"><a href="#一、Git介绍" class="headerlink" title="一、Git介绍"></a>一、Git介绍</h3><blockquote><p>git是目前世界上最先进的分布式版本控制系统</p></blockquote><h4 id="Git与Github的区别"><a href="#Git与Github的区别" class="headerlink" title="Git与Github的区别"></a>Git与Github的区别</h4><blockquote><p>（1）Git是一个分布式版本控制系统，简单的说就是一个软件，用于记录一个或若干个文件内容变化，以便将来查阅特定版本修改情况的软件</p></blockquote><blockquote><p>（2）Github是一个为用户提供Git服务的网站，简单的说就是一个可以存放代码的地方（不过可以放的肯定不止有代码）。Github除了提供管理Git的web界面外，还提供了订阅、关注、讨论组、在线编辑器等丰富的功能。</p></blockquote><hr><h3 id="二、Git的使用"><a href="#二、Git的使用" class="headerlink" title="二、Git的使用"></a>二、Git的使用</h3><h4 id="2-1-本地仓库"><a href="#2-1-本地仓库" class="headerlink" title="2.1 本地仓库"></a>2.1 本地仓库</h4><h5 id="2-1-1-工作流程"><a href="#2-1-1-工作流程" class="headerlink" title="2.1.1 工作流程"></a>2.1.1 工作流程</h5><blockquote><p><strong>① Git本地操作的三个区域：</strong><br><img src="/road2dasheng/img/05/05_02.png" alt="git-本地操作-三个区域.jpg"><br><strong>② 工作流程：</strong><br><img src="/road2dasheng/img/05/05_03.png" alt="git-本地操作-工作流程.jpg"></p></blockquote><hr><h5 id="2-1-2-创建本地仓库"><a href="#2-1-2-创建本地仓库" class="headerlink" title="2.1.2 创建本地仓库"></a>2.1.2 创建本地仓库</h5><blockquote><p><strong>① 在安装好后首次使用需要先进行全局配置</strong><br>在桌面空白处右键，点击“Git Bash Here”,输入：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config -- global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config -- global user.email <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>② 创建本地仓库</strong><br>当我们需要使用Git去管理某个新项目&#x2F;已存在的项目的时候，就需要创建仓库了。<br>注意：创建仓库使用的目录不一定要求是空目录，选择一个非空目录也是可以的，但是不建议在现有项目上来学习Git。<br>注意：为了避免在学习或使用过程中出现各种奇葩问题，请不要使用包含中文的目录名（父目录也是如此）</p></blockquote><blockquote><blockquote><p><strong>a. 创建空目录</strong></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">cd</span> documents<br><span class="hljs-built_in">mkdir</span> pro_git<br></code></pre></td></tr></table></figure><blockquote><blockquote><p><strong>b. 在命令行中进入pro_git</strong></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> pro_git<br></code></pre></td></tr></table></figure><blockquote><blockquote><p><strong>c. Git仓库初始化（让Git知道，它需要来管理这个目录）</strong></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>命令执行结果：在pro_git目录里生成.git文件夹。注意：该文件夹是由Git创建的，不能删除也不能随意更改里面的内容</p><blockquote><blockquote><p><strong>d.Git常用操作指令</strong></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">指令1：git status                  //查看当前状态`<br><br>指令2.1：git add 文件名            //添加一个文件到缓存区<br>指令2.2：git add 文件名1 文件名2   //添加多个文件到缓存区<br>指令2.3：git add .                 //添加当前目录到缓存区<br><br>指令3：git commit -m <span class="hljs-string">&quot;注释内容&quot;</span>    //提交至版本库<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-3-版本回退"><a href="#2-1-3-版本回退" class="headerlink" title="2.1.3 版本回退"></a>2.1.3 版本回退</h5><p>版本回退分为两步骤进行操作：</p><blockquote><p><strong>步骤1：</strong><br>查看版本，确定需要回到的时刻点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">//指令：<br>git <span class="hljs-built_in">log</span>                  //显示日志<br>git <span class="hljs-built_in">log</span> --pretty=oneline //显示日志（每条日志只显示一行）<br></code></pre></td></tr></table></figure><blockquote><p><strong>步骤2：</strong><br>回退操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//指令：<br>git reset --hard 提交编号  //回退到“提交编号”对应的版本<br></code></pre></td></tr></table></figure><p>注意：回到过去之后，要想再回到之前最新版本的时候，则需要使用指令去查看历史操作，以得到最新的commit id。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//指令：<br>git reflog<br></code></pre></td></tr></table></figure><hr><h4 id="2-2-远程仓库"><a href="#2-2-远程仓库" class="headerlink" title="2.2 远程仓库"></a>2.2 远程仓库</h4><blockquote><p>以 <em><strong>github</strong></em> 为例。</p></blockquote><h5 id="2-2-1-远程仓库的创建"><a href="#2-2-1-远程仓库的创建" class="headerlink" title="2.2.1 远程仓库的创建"></a>2.2.1 远程仓库的创建</h5><blockquote><p><a href="https://note.youdao.com/s/EXjUteza">Github的使用</a></p></blockquote><h5 id="2-2-2-两种常规使用方式"><a href="#2-2-2-两种常规使用方式" class="headerlink" title="2.2.2 两种常规使用方式"></a>2.2.2 两种常规使用方式</h5><blockquote><p>方式1：基于HTTPS协议</p><blockquote><p>a.创建空目录，名字建议和远程仓库的名字一样</p></blockquote></blockquote><blockquote><blockquote><p>b.使用指令克隆远程仓库到本地<br><code>git clone 远程仓库地址</code></p></blockquote></blockquote><blockquote><blockquote><p>c.对克隆的仓库进行相关操作<br>c-1 添加到暂存区<br><code>git add 文件名</code></p></blockquote></blockquote><blockquote><blockquote><p>c-2 提交到本地仓库<br><code>git commit -m &quot;注释&quot;</code></p></blockquote></blockquote><blockquote><blockquote><p>c-3 提交到远程仓库<br><code>git push</code><br>注意：首次往远程仓库提交内容的时候会出现错误，原因在于不是任何人都可以往远程仓库提交内容，必须先鉴权。<br>具体操作为：<a href="https://www.bilibili.com/video/BV18v411w7WL/?spm_id_from=333.337.search-card.all.click&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">Github不再支持密码验证的解决方案</a></p></blockquote></blockquote><blockquote><blockquote><p>c-4 将远程仓库的文件pull到本地仓库<br><code>git pull</code></p></blockquote></blockquote><p><em><strong>&#x3D;&#x3D;提醒：每天工作前先git pull获取远程仓库最新的版本；每天下班前要git push将本地代码提交到远程仓库；&#x3D;&#x3D;</strong></em></p><hr><blockquote><p>方式2：**&#x3D;&#x3D;基于SSH协议(推荐)&#x3D;&#x3D;**<br>注：该方式与基于HTTPS协议的方式相比，只是影响github对于用户身份的鉴权方式，对于git的具体操作（如git add, git commit等）没有任何影响。</p></blockquote><blockquote><blockquote><p>a. 生成客户端公私钥文件<br>注：<a href="https://blog.csdn.net/lili1158/article/details/127688072">需要先安装openSSH</a><br><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code></p></blockquote></blockquote><blockquote><blockquote><p>b. 上传公钥文件内容（&#x2F;c&#x2F;Users&#x2F;zhawb&#x2F;.ssh&#x2F;id_rsa.pub）</p></blockquote></blockquote><blockquote><blockquote><p>c. 后续操作与方式1:a~c一样</p></blockquote></blockquote><hr><h4 id="2-3-分支管理"><a href="#2-3-分支管理" class="headerlink" title="2.3 分支管理"></a>2.3 分支管理</h4><h5 id="2-3-1-分支的概念"><a href="#2-3-1-分支的概念" class="headerlink" title="2.3.1 分支的概念"></a>2.3.1 分支的概念</h5><blockquote><p>--在版本回退时，每次提交后都会有记录，Git把它们串成时间线，形成类似于时间轴的就是一个分支，我们称之为master分支。<br>--在开发的时候往往是团队协作，多人进行开发，因此光有一个分支是无法满足多人同时开发的需求的，并且在分支上工作并不影响其他分支的正常使用，会更加安全，Git鼓励开发者使用分支去完成一些开发任务，如下图所示：</p></blockquote><blockquote><p><img src="/road2dasheng/img/05/05_04.jpg" alt="分支的概念.png"></p></blockquote><hr><h5 id="2-3-2-分支管理的相关指令"><a href="#2-3-2-分支管理的相关指令" class="headerlink" title="2.3.2 分支管理的相关指令"></a>2.3.2 分支管理的相关指令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看分支：git branch<br><br>创建分支：git branch 分支名<br><br>切换分支：git checkout 分支名<br><br>删除分支：git branch -d 分支名<br><br>合并分支：git merge 分支名<br><br>创建并切换分支：git checkout -b 分支名<br><br>删除远程仓库分支：git push origin -d 分支名<br><br>将当前分支与远程仓库关联：git push --set-upstream origin 分支名<br><br></code></pre></td></tr></table></figure><blockquote><p>注：<br>1、当前分支的前面有个“*”的标记<br><img src="/road2dasheng/img/05/05_05.jpg" alt="当前分支.png"><br>2、在删除分支的时候，一定要先退出要删除的分支，然后才能删除</p></blockquote><hr><h4 id="2-4-忽略文件"><a href="#2-4-忽略文件" class="headerlink" title="2.4 忽略文件"></a>2.4 忽略文件</h4><blockquote><p>场景：在项目目录下有很多万年不变的文件目录，或者还有一些目录即便有改动，我们也不想让其提交到远程仓库的文档，此时我们可以使用“忽略文件”机制来实现需求。</p></blockquote><blockquote><p>具体操作：新建一个名为.gitignore的文件，该文件用于声明忽略文件或不忽略文件的规则，规则对当前目录及其子目录生效。</p></blockquote><blockquote><p>常见规则：</p></blockquote><pre><code class="hljs">1） /文件夹名称/            过滤整个文件夹2） *.zip                   过滤所有的.zip文件3） /文件夹名称/文件名称    过滤该文件夹下的某个文件4） !文件名称               不过滤具体某个文件</code></pre><hr><h3 id="三、git常用命令"><a href="#三、git常用命令" class="headerlink" title="三、git常用命令"></a>三、git常用命令</h3><p><img src="/road2dasheng/img/05/05_01.jpg" alt="git常用命令"></p><hr><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://www.bilibili.com/video/BV1st411r7Sj/?p=4&spm_id_from=pageDriver&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-GitHub视频课程</a>笔记</p><h3 id="一、使用GitHub-的目的"><a href="#一、使用GitHub-的目的" class="headerlink" title="一、使用GitHub 的目的"></a>一、使用GitHub 的目的</h3><p>借助github托管项目代码</p><h3 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h3><h4 id="2-1-仓库-repository"><a href="#2-1-仓库-repository" class="headerlink" title="2.1 仓库(repository)"></a>2.1 仓库(repository)</h4><p>仓库用来存放项目代码，&#x3D;&#x3D;每个项目对应一个仓库&#x3D;&#x3D;，多个开源项目则有多个仓库</p><h4 id="2-2-收藏-star"><a href="#2-2-收藏-star" class="headerlink" title="2.2 收藏(star)"></a>2.2 收藏(star)</h4><p>收藏项目，方便下次查看</p><h4 id="2-3-复制克隆项目-fork"><a href="#2-3-复制克隆项目-fork" class="headerlink" title="2.3 复制克隆项目(fork)"></a>2.3 复制克隆项目(fork)</h4><p>fork的项目是独立存在的</p><h4 id="2-4-发起请求-pull-request"><a href="#2-4-发起请求-pull-request" class="headerlink" title="2.4 发起请求(pull request)"></a>2.4 发起请求(pull request)</h4><p><img src="/road2dasheng/img/05/05_06.jpg" alt="pull request.jpg"></p><h4 id="2-5-关注-watch"><a href="#2-5-关注-watch" class="headerlink" title="2.5 关注(watch)"></a>2.5 关注(watch)</h4><p>如果关注了某个项目，那么该项目以后有任何更新，都会第一时间提醒你</p><h4 id="2-6-事务卡片-issue"><a href="#2-6-事务卡片-issue" class="headerlink" title="2.6 事务卡片(issue)"></a>2.6 事务卡片(issue)</h4><p>用于交流讨论</p><h4 id="2-7-GitHub主页"><a href="#2-7-GitHub主页" class="headerlink" title="2.7 GitHub主页"></a>2.7 GitHub主页</h4><p>该页左侧主要显示用户动态以及关注用户或关注仓库的动态；右侧显示所有的git库</p><h4 id="2-8-仓库主页"><a href="#2-8-仓库主页" class="headerlink" title="2.8 仓库主页"></a>2.8 仓库主页</h4><p>主要显示项目的信息，如：项目代码，版本，star&#x2F;fork&#x2F;watch情况等</p><h4 id="2-9-个人主页"><a href="#2-9-个人主页" class="headerlink" title="2.9 个人主页"></a>2.9 个人主页</h4><p>个人信息：头像，个人简介，关注我的人，我关注的人，我关注的git库，我的开源项目，我贡献的开源项目等信息</p><h3 id="三、注册github账号"><a href="#三、注册github账号" class="headerlink" title="三、注册github账号"></a>三、注册github账号</h3><p><a href="https://www.github.com/">Github官方网址</a></p><h3 id="四、创建仓库-x2F-创建新项目"><a href="#四、创建仓库-x2F-创建新项目" class="headerlink" title="四、创建仓库&#x2F;创建新项目"></a>四、创建仓库&#x2F;创建新项目</h3><p>note: 一个仓库对应一个开源项目；通过git可以管理仓库<br><strong>仓库主页说明：</strong><br><img src="/road2dasheng/img/05/05_07.jpg" alt="仓库主页说明.png">)</p><h3 id="五、仓库管理"><a href="#五、仓库管理" class="headerlink" title="五、仓库管理"></a>五、仓库管理</h3><h4 id="5-1-新建文件"><a href="#5-1-新建文件" class="headerlink" title="5.1 新建文件"></a>5.1 新建文件</h4><h4 id="5-2-编辑文件"><a href="#5-2-编辑文件" class="headerlink" title="5.2 编辑文件"></a>5.2 编辑文件</h4><h4 id="5-3-删除文件"><a href="#5-3-删除文件" class="headerlink" title="5.3 删除文件"></a>5.3 删除文件</h4><h4 id="5-4-上传文件"><a href="#5-4-上传文件" class="headerlink" title="5.4 上传文件"></a>5.4 上传文件</h4><h4 id="5-5-搜索仓库文件"><a href="#5-5-搜索仓库文件" class="headerlink" title="5.5 搜索仓库文件"></a>5.5 搜索仓库文件</h4><h4 id="5-6-下载-x2F-检出项目"><a href="#5-6-下载-x2F-检出项目" class="headerlink" title="5.6 下载&#x2F;检出项目"></a>5.6 下载&#x2F;检出项目</h4><h3 id="六、Github-Issues"><a href="#六、Github-Issues" class="headerlink" title="六、Github Issues"></a>六、Github Issues</h3><p>用于交流解决问题</p><h3 id="七、开源项目贡献流程"><a href="#七、开源项目贡献流程" class="headerlink" title="七、开源项目贡献流程"></a>七、开源项目贡献流程</h3><h4 id="7-1-新建Issue"><a href="#7-1-新建Issue" class="headerlink" title="7.1 新建Issue"></a>7.1 新建Issue</h4><p>提交使用的问题或建议或想法</p><h4 id="7-2-新建pull-request"><a href="#7-2-新建pull-request" class="headerlink" title="7.2 新建pull request"></a>7.2 新建pull request</h4><p>步骤：（1）fork项目<br>（2）修改自己仓库的代码<br>（3）新建pull request<br>（4）等待原项目作者审核操作</p>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码托管</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习入门视频教程-笔记</title>
    <link href="/road2dasheng/04_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/road2dasheng/04_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="B站黑马程序员-机器学习入门视频课程笔记"><a href="#B站黑马程序员-机器学习入门视频课程笔记" class="headerlink" title="B站黑马程序员-机器学习入门视频课程笔记"></a><a href="https://www.bilibili.com/video/BV1pf4y1y7kw/?spm_id_from=333.880.my_history.page.click&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-机器学习入门视频课程</a>笔记</h3><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1-1-人工智能"><a href="#1-1-人工智能" class="headerlink" title="1.1 人工智能"></a>1.1 人工智能</h4><h5 id="1-1-1-人工智能应用场景"><a href="#1-1-1-人工智能应用场景" class="headerlink" title="1.1.1 人工智能应用场景"></a>1.1.1 人工智能应用场景</h5><p><img src="/road2dasheng/img/04/04_01.png" alt="人工智能应用场景"></p><h5 id="1-1-2-人工智能小案例"><a href="#1-1-2-人工智能小案例" class="headerlink" title="1.1.2 人工智能小案例"></a>1.1.2 人工智能小案例</h5><p><img src="/road2dasheng/img/04/04_02.png" alt="人工智能小案例"></p><h5 id="1-1-3-人工智能发展必备三要素"><a href="#1-1-3-人工智能发展必备三要素" class="headerlink" title="1.1.3 人工智能发展必备三要素"></a>1.1.3 人工智能发展必备三要素</h5><p><img src="/road2dasheng/img/04/04_03.png" alt="人工智能发展必备三要素"></p><blockquote><ul><li>算力之CPU、GPU对比：CPU主要适合IO密集型的任务; GPU主要适合计算密集型任务</li><li>什么类型的程序适合在GPU上运行 <img src="/road2dasheng/img/04/04_04.png" alt="什么类型的程序适合在GPU上运行"></li><li><a href="http://www.sohu.com/a/201309334_468740">CPU和GPU的区别</a></li><li><a href="https://buzzorange.com/techorange/2017/09/27/what-intel-google-nvidia-microsoft-do-for-ai-chips/">Google TPU介绍</a></li></ul></blockquote><h5 id="1-1-4-人工智能、机器学习和深度学习"><a href="#1-1-4-人工智能、机器学习和深度学习" class="headerlink" title="1.1.4 人工智能、机器学习和深度学习"></a>1.1.4 人工智能、机器学习和深度学习</h5><p><img src="/road2dasheng/img/04/04_05.png" alt="人工智能、机器学习和深度学习的关系"></p><blockquote><p>机器学习是人工智能的一个实现途径，深度学习是机器学习的一个方法发展而来的</p></blockquote><h5 id="1-1-5-人工智能的发展历程"><a href="#1-1-5-人工智能的发展历程" class="headerlink" title="1.1.5 人工智能的发展历程"></a>1.1.5 人工智能的发展历程</h5><blockquote><ol><li>起源<blockquote><ul><li>图灵测试<img src="/road2dasheng/img/04/04_06.png" alt="图灵测试"></li><li>达特茅斯会议 <img src="/road2dasheng/img/04/04_07.png" alt="达特茅斯会议"></li></ul></blockquote></li><li>发展<blockquote><ul><li>学术界可谓仁者见仁、智者见智，我们将人工智能的发展历程划分为以下6个阶段：<img src="/road2dasheng/img/04/04_08.png" alt="人工智能发展阶段"><img src="/road2dasheng/img/04/04_09.png" alt="人工智能发展阶段"></li></ul></blockquote></li></ol></blockquote><h5 id="1-1-6-人工智能主要分支"><a href="#1-1-6-人工智能主要分支" class="headerlink" title="1.1.6 人工智能主要分支"></a>1.1.6 人工智能主要分支</h5><blockquote><p>通讯、感知与行动是现代人工智能的三个关键能力</p><p>&#x3D;&#x3D;分支一：计算机视觉（CV）&#x3D;&#x3D;</p><blockquote><p>  计算机视觉(CV)是指机器感知环境的能力。这一技术类别中的经典任务有图像形成、图像处理、图像提取和图像的三维推理。物体检测和人脸识别是其比较成功的研究领域。<img src="/road2dasheng/img/04/04_10.png" alt="分支一：计算机视觉"></p></blockquote><p>&#x3D;&#x3D;分支二：语音识别&#x3D;&#x3D;</p><blockquote><p> 语音识别是指识别语音(说出的语言)并将其转换成对应文本的技术。相反的任务(文本转语音&#x2F;TTS)也是这一领域内一个类似的研究主题。<img src="/road2dasheng/img/04/04_11.png" alt="分支二：语音识别"><br> 语音识别领域仍然面临着声纹识别和「鸡尾酒会效应」等一些特殊情况的难题。<br> 现代语音识别系统严重依赖于云，在离线时可能就无法取得理想的工作效果。</p></blockquote><p>&#x3D;&#x3D;分支三：文本挖掘&#x2F;分类&#x3D;&#x3D;</p><blockquote><p>这里的文本挖掘主要是指文本分类，该技术可用于理解、组织和分类结构化或非结构化文文档。其涵盖的主要任务有句法分析、情绪分析和垃圾信息检测。<img src="/road2dasheng/img/04/04_12.png" alt="分支三：文本挖掘/分类"><br>文本挖掘和分类领域的一个瓶颈出现在歧义和有偏差的数据上。</p></blockquote><p>&#x3D;&#x3D;分支四：机器翻译&#x3D;&#x3D;</p><blockquote><p>机器翻译(MT)是利用机器的力量自动将一种自然语言(源语言)的文本翻译成另一种语言(目标语言)。<img src="/road2dasheng/img/04/04_13.png" alt="分支四：机器翻译"><br>在某些情况下，俚语和行话等内容的翻译会比较困难(受限词表问题)。<br>专业领域的机器翻译(比如医疗领域)表现通常不好。</p></blockquote><p>&#x3D;&#x3D;分支五：机器人&#x3D;&#x3D;</p><blockquote><p>机器人学(Robotics)研究的是机器人的设计、制造、运作和应用，以及控制它们的计算机系统、传感反馈和信息处理。<img src="/road2dasheng/img/04/04_14.png" alt="分支五：机器人"></p></blockquote><p>&#x3D;&#x3D;总的来说，人工智能领域的研究前沿正逐渐从搜索、知识和推理领域转向机器学习、深度学习、计算机视觉和机器人领域。&#x3D;&#x3D;</p></blockquote><h4 id="1-2-机器学习工作流程"><a href="#1-2-机器学习工作流程" class="headerlink" title="1.2 机器学习工作流程"></a>1.2 机器学习工作流程</h4><h5 id="1-2-1-什么是机器学习"><a href="#1-2-1-什么是机器学习" class="headerlink" title="1.2.1 什么是机器学习"></a>1.2.1 什么是机器学习</h5><blockquote><p>机器学习是指从数据中自动分析获得模型，并利用模型对未知数据进行预测。 <img src="/road2dasheng/img/04/04_15.png" alt="机器学习"></p></blockquote><h5 id="1-2-2-机器学习工作流程"><a href="#1-2-2-机器学习工作流程" class="headerlink" title="1.2.2 机器学习工作流程"></a>1.2.2 机器学习工作流程</h5><blockquote><p>获取数据 -&gt; 数据基本处理 -&gt; 特征工程 -&gt; 机器学习（模型训练）-&gt; 结果达到要求,上线服务 -&gt; 结果未达到要求，重复前述步骤  <img src="/road2dasheng/img/04/04_16.png" alt="机器学习工作流程"></p></blockquote><h5 id="1-2-3-数据集介绍"><a href="#1-2-3-数据集介绍" class="headerlink" title="1.2.3 数据集介绍"></a>1.2.3 数据集介绍</h5><blockquote><p>&#x3D;&#x3D;- 数据简介&#x3D;&#x3D;</p><blockquote><p>一行数据成为一个样本<br>一列数据成为一个特征<br>有些数据有目标值（标签值），有些数据没有目标值</p></blockquote><p>&#x3D;&#x3D;- 数据类型构成&#x3D;&#x3D;</p><blockquote><p>类型一：特征值 + 目标值（连续的或离散的）<br>类型二：只有特征值，没有目标值</p></blockquote><p>&#x3D;&#x3D;- 数据分割&#x3D;&#x3D;</p><blockquote><p>训练数据：用于训练，构建模型<br>测试数据：在模型检验时使用，用于评估模型是否有效<br>两种数据的划分比例：7:3 或 8:2 或 7.5:2.5</p></blockquote></blockquote><h5 id="1-2-4-数据基本处理"><a href="#1-2-4-数据基本处理" class="headerlink" title="1.2.4 数据基本处理"></a>1.2.4 数据基本处理</h5><blockquote><p>即对数据进行缺失值、去除异常值等处理</p></blockquote><h5 id="1-2-5-特征工程"><a href="#1-2-5-特征工程" class="headerlink" title="1.2.5 特征工程"></a>1.2.5 特征工程</h5><blockquote><ul><li><p>定义</p><blockquote><p>指使用专业背景知识和技巧处理数据，使得特征能在机器学习算法上发挥更好的作用的过程</p></blockquote></li><li><p>作用</p><blockquote><p>机器学习领域的大神Andrew Ng(吴恩达)老师说“Coming up with features is difficult, time-consuming, requires expert knowledge. “Applied machine learning” is basically feature engineering. ”<br>&#x3D;&#x3D;业界广泛流传：数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。&#x3D;&#x3D;</p></blockquote></li><li><p>内涵</p><blockquote><p>&#x3D;&#x3D;– 特征提取&#x3D;&#x3D;</p><blockquote><p> 将任意数据（如文本或图像）转换为可用于机器学习的数字特征<img src="/road2dasheng/img/04/04_17.png" alt="特征提取"><br> &#x3D;&#x3D;– 特征预处理&#x3D;&#x3D;<br>通过一些转换函数将特征数据转换成更加适合算法模型的特征数据过程<img src="/road2dasheng/img/04/04_18.png" alt="特征预处理"><br>&#x3D;&#x3D;– 特征降维&#x3D;&#x3D;<br> 指在某些限定条件下，降低随机变量(特征)个数，得到一组“不相关”主变量的过程<img src="/road2dasheng/img/04/04_19.png" alt="特征降维"></p></blockquote></blockquote></li></ul></blockquote><h5 id="1-2-6-机器学习"><a href="#1-2-6-机器学习" class="headerlink" title="1.2.6 机器学习"></a>1.2.6 机器学习</h5><blockquote><p>选择合适的算法对模型进行训练（具体内容见[[#^edf363 | 机器学习算法]]）</p></blockquote><h5 id="1-2-7-模型评估"><a href="#1-2-7-模型评估" class="headerlink" title="1.2.7 模型评估"></a>1.2.7 模型评估</h5><blockquote><p>对训练好的模型进行评估（具体内容见[[#^cbe98e| 模型评估]]）</p></blockquote><h5 id="1-2-8-拓展阅读"><a href="#1-2-8-拓展阅读" class="headerlink" title="1.2.8 拓展阅读"></a>1.2.8 拓展阅读</h5><p>[[#^bce1d5 | 机器学习项目的完整流程]]</p><h4 id="1-3-机器学习算法"><a href="#1-3-机器学习算法" class="headerlink" title="1.3 机器学习算法"></a>1.3 机器学习算法</h4><p>^edf363</p><h5 id="1-3-1-监督学习"><a href="#1-3-1-监督学习" class="headerlink" title="1.3.1 监督学习"></a>1.3.1 监督学习</h5><blockquote><ul><li><p>定义</p><blockquote><p>输入数据是由输入特征值和目标值所组成。<br>函数的输出值可以是一个连续的值(称为回归)；或是有限个离散值(称为分类)</p></blockquote></li><li><p>回归问题</p><blockquote><p>如预测房价，根据样本集拟合出一条连续曲线 <img src="/road2dasheng/img/04/04_20.png" alt="回归问题"></p></blockquote></li><li><p>分类问题</p><blockquote><p>如根据肿瘤特征判断良性还是恶性，得到的结果是“良性”或者“恶性”，是离散的。<img src="/road2dasheng/img/04/04_21.png" alt="分类问题"></p></blockquote></li></ul></blockquote><h5 id="1-3-2-无监督学习"><a href="#1-3-2-无监督学习" class="headerlink" title="1.3.2 无监督学习"></a>1.3.2 无监督学习</h5><blockquote><ul><li>定义<blockquote><p>输入数据是由输入特征值组成，没有目标值。<br>输入数据没有被标记，也没有确定的结果。样本数据类别未知。需要根据样本间的相似性对样本集进行类别划分。<img src="/road2dasheng/img/04/04_22.png" alt="无监督学习"></p></blockquote></li></ul></blockquote><h5 id="1-3-3-半监督学习"><a href="#1-3-3-半监督学习" class="headerlink" title="1.3.3 半监督学习"></a>1.3.3 半监督学习</h5><blockquote><ul><li>定义<br>训练集同时包含有标记样本数据和未标记样本数据。</li></ul></blockquote><h5 id="1-3-4-强化学习"><a href="#1-3-4-强化学习" class="headerlink" title="1.3.4 强化学习"></a>1.3.4 强化学习</h5><blockquote><ul><li>定义<blockquote><p>实质是make decisions 问题，即自动进行决策，并且可以做连续决策。<img src="/road2dasheng/img/04/04_23.png" alt="强化学习"></p></blockquote></li><li>&#x3D;&#x3D;强化学习的目标是获得最多的累计奖励&#x3D;&#x3D;</li></ul></blockquote><h5 id="1-3-5-上述算法对比"><a href="#1-3-5-上述算法对比" class="headerlink" title="1.3.5 上述算法对比"></a>1.3.5 上述算法对比</h5><blockquote><ul><li>&#x3D;&#x3D;监督学习和无监督学习的对比&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_24.png" alt="监督学习和无监督学习的对比"></li></ul><p>-&#x3D;&#x3D;监督学习和半监督学习训练方式的对比&#x3D;&#x3D;</p><blockquote><p>–  监督学习的训练方式<img src="/road2dasheng/img/04/04_25.png" alt="监督学习和半监督学习训练方式的对比"><br>– 半监督学习的训练方式 <img src="/road2dasheng/img/04/04_26.png" alt="监督学习和半监督学习训练方式的对比"></p></blockquote><ul><li>&#x3D;&#x3D;监督学习和强化学习的对比&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_27.png" alt="监督学习和强化学习的对比"></li></ul></blockquote><h5 id="1-3-6-总结"><a href="#1-3-6-总结" class="headerlink" title="1.3.6 总结"></a>1.3.6 总结</h5><blockquote><p>&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_29.png" alt="监督学习和强化学习的对比"></p></blockquote><h5 id="1-3-7-拓展阅读"><a href="#1-3-7-拓展阅读" class="headerlink" title="1.3.7 拓展阅读"></a>1.3.7 拓展阅读</h5><blockquote><ul><li>[[#^5ed916 | 独立同分布]]</li><li><a href="http://sports.sina.com.cn/chess/weiqi/2017-10-21/doc-ifymyyxw4023875.shtml">Alphago进化史 漫画告诉你Zero为什么这么牛</a></li></ul></blockquote><h4 id="1-4-模型评估"><a href="#1-4-模型评估" class="headerlink" title="1.4 模型评估"></a>1.4 模型评估</h4><p>^cbe98e</p><h5 id="1-4-1-作用"><a href="#1-4-1-作用" class="headerlink" title="1.4.1 作用"></a>1.4.1 作用</h5><blockquote><p>模型评估是模型开发过程不可或缺的一部分。它有助于发现表达数据的最佳模型和所选模型将来工作的性能如何。</p></blockquote><h5 id="1-4-2-类型"><a href="#1-4-2-类型" class="headerlink" title="1.4.2 类型"></a>1.4.2 类型</h5><blockquote><ul><li><p>按照数据集的目标值不同，可以把模型评估分为分类模型评估和回归模型评估。</p></li><li><p>分类模型评估指标</p><blockquote><p>– <a href="https://cloud.tencent.com/developer/article/1510724">准确率(Accuracy)、精确率(Precision)和召回率(Recall)</a></p><ul><li><ul><li><a href="https://blog.csdn.net/matrix_space/article/details/50384518">F1-score</a></li></ul></li><li><ul><li><a href="https://zhuanlan.zhihu.com/p/33407505">AUC</a></li></ul></li></ul></blockquote></li><li><p>回归模型评估</p><blockquote><p>– <a href="https://zhuanlan.zhihu.com/p/143169742">均方根误差</a><br>– <a href="https://zhuanlan.zhihu.com/p/143169742">相对平方误差</a><br>– <a href="https://zhuanlan.zhihu.com/p/143169742">平均绝对误差 </a><br>– <a href="https://zhuanlan.zhihu.com/p/143169742">相对绝对误差</a></p></blockquote></li></ul></blockquote><h5 id="1-4-3-拟合"><a href="#1-4-3-拟合" class="headerlink" title="1.4.3 拟合"></a>1.4.3 拟合</h5><blockquote><p>模型的表现效果大致可以分为两类：过拟合、欠拟合。<img src="/road2dasheng/img/04/04_30.png" alt="拟合"></p><ul><li>欠拟合<img src="/road2dasheng/img/04/04_31.png" alt="欠拟合"></li><li>过拟合<img src="/road2dasheng/img/04/04_32.png" alt="过拟合"></li></ul></blockquote><h4 id="1-5-深度学习简介"><a href="#1-5-深度学习简介" class="headerlink" title="1.5 深度学习简介"></a>1.5 深度学习简介</h4><h5 id="1-5-1-定义"><a href="#1-5-1-定义" class="headerlink" title="1.5.1 定义"></a>1.5.1 定义</h5><blockquote><ul><li>深度学习（Deep Learning）（也称为深度结构学习[Deep Structured Learning]、层次学习[Hierarchical Learning]或者是深度机器学习 [Deep Machine Learning]）</li><li>是一类算法集合</li><li>是机器学习的一个分支</li><li>&#x3D;&#x3D;深度学习方法近年来，在会话识别、图像识别和对象侦测等领域表现出了惊人的准确性。&#x3D;&#x3D;</li><li>但是，“深度学习”这个词语很古老，它在1986年由Dechter在机器学习领域提出，然后在2000年有Aizenberg等人引入到人工神经网络中。而现在，由于Alex Krizhevsky在2012年使用卷积网络结构赢得了Image Net比赛之后受到大家的瞩目。</li></ul></blockquote><h5 id="1-5-2-起源"><a href="#1-5-2-起源" class="headerlink" title="1.5.2 起源"></a>1.5.2 起源</h5><blockquote><ul><li><a href="https://zh.wikipedia.org/zh-hans/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">神经网络</a></li><li><a href="https://zh.wikipedia.org/zh-hans/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">卷积神经网络</a></li></ul></blockquote><h5 id="1-5-3-演示"><a href="#1-5-3-演示" class="headerlink" title="1.5.3 演示"></a>1.5.3 演示</h5><blockquote><p><a href="http://playground.tensorflow.org/">深度学习演示</a></p></blockquote><h5 id="1-5-4-各层负责内容"><a href="#1-5-4-各层负责内容" class="headerlink" title="1.5.4 各层负责内容"></a>1.5.4 各层负责内容</h5><blockquote><p>&#x3D;&#x3D;多层神经网络，在最初几层是识别简单内容，后面几层是识别一些复杂内容&#x3D;&#x3D;</p><ul><li>1层：负责识别颜色及简单纹理<img src="/road2dasheng/img/04/04_33.png" alt="1层"></li><li>2层：一些神经元可以识别更加细化的纹理，布纹，刻纹，叶纹等<img src="/road2dasheng/img/04/04_34.png" alt="2层"></li><li>3层：一些神经元负责感受黑夜里的黄色烛光，高光，萤火，鸡蛋黄色等<img src="/road2dasheng/img/04/04_35.png" alt="3层"></li><li>4层：一些神经元识别萌狗的脸，宠物形貌，圆柱体事物，七星瓢虫等的存在<img src="/road2dasheng/img/04/04_36.png" alt="4层"></li><li>5层：一些神经元负责识别花，黑眼圈动物，鸟，键盘，原型屋顶等<img src="/road2dasheng/img/04/04_37.png" alt="5层"></li></ul></blockquote><h3 id="二、算法"><a href="#二、算法" class="headerlink" title="二、算法"></a>二、算法</h3><h4 id="2-1-K-近邻算法"><a href="#2-1-K-近邻算法" class="headerlink" title="2.1 K-近邻算法"></a>2.1 K-近邻算法</h4><blockquote><ul><li>K Nearest Neighbor算法⼜叫KNN算法，这个算法是机器学习⾥⾯⼀个⽐较经典的算法，总体来说KNN算法是相对⽐较容易理解的算法<img src="/road2dasheng/img/04/04_38.png" alt="KNN"></li><li>&#x3D;&#x3D;根据你的“邻居”来推断出你的类别&#x3D;&#x3D;</li></ul></blockquote><h5 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h5><blockquote><ul><li>如果⼀个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的⼤多数属于某⼀个类别，则该样本也属于这个类别。&#x3D;&#x3D;KNN算法最早是由Cover和Hart提出的⼀种分类算法&#x3D;&#x3D;</li></ul></blockquote><h5 id="2-1-2-距离公式"><a href="#2-1-2-距离公式" class="headerlink" title="2.1.2 距离公式"></a>2.1.2 距离公式</h5><blockquote><ul><li>基本性质<img src="/road2dasheng/img/04/04_43.png" alt="距离公式的基本性质"></li><li>常见的距离公式 <blockquote><p>–  &#x3D;&#x3D;欧式距离(Euclidean Distance)&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_39.png" alt="欧式距离公式"><br>– &#x3D;&#x3D;曼哈顿距离(Manhattan Distance)&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_44.png" alt="曼哈顿距离公式"><br>– &#x3D;&#x3D;切⽐雪夫距离(Chebyshev Distance)&#x3D;&#x3D;<br>国际象棋中，国王可以直⾏、横⾏、斜⾏，所以国王⾛⼀步可以移动到相邻8个⽅格中的任意⼀个。国王从格⼦(x1,y1) ⾛到格⼦(x2,y2)最少需要多少步？这个距离就叫切⽐雪夫距离<img src="/road2dasheng/img/04/04_45.png" alt="切比雪夫距离公式"><br>– &#x3D;&#x3D;闵可夫斯基距离(Minkowski Distance)&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_46.png" alt="闵可夫斯基距离公式"><br>– &#x3D;&#x3D;上述距离公式的缺点&#x3D;&#x3D;&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_47.png" alt="闵可夫斯基距离公式的缺点"><br>– &#x3D;&#x3D;拓展阅读&#x3D;&#x3D;</p></blockquote></li></ul></blockquote><h5 id="2-1-3-应用"><a href="#2-1-3-应用" class="headerlink" title="2.1.3 应用"></a>2.1.3 应用</h5><blockquote><ul><li>电影类型分析<img src="/road2dasheng/img/04/04_40.png" alt="电影类型分析"><img src="/road2dasheng/img/04/04_41.png" alt="电影类型分析"></li><li>&#x3D;&#x3D;算法流程总结&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_42.png" alt="KNN算法流程"></li><li>API调用</li></ul></blockquote><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><h4 id="1-机器学习项目的完整流程"><a href="#1-机器学习项目的完整流程" class="headerlink" title="1_机器学习项目的完整流程"></a>1_机器学习项目的完整流程</h4><p>^bce1d5</p><h5 id="1-1-抽象成数学问题"><a href="#1-1-抽象成数学问题" class="headerlink" title="1.1 抽象成数学问题"></a>1.1 抽象成数学问题</h5><blockquote><p>明确问题是进行机器学习的第一步。机器学习的训练过程通常都是一件非常耗时的事情，胡乱尝试时间成本是非常高的。 这里的抽象成数学问题，指的明确我们可以获得什么样的数据，抽象出的问题，是一个分类还是回归或者是聚类的问题。</p></blockquote><h5 id="1-2-获取数据"><a href="#1-2-获取数据" class="headerlink" title="1.2 获取数据"></a>1.2 获取数据</h5><blockquote><ul><li>数据决定了机器学习结果的上限，而算法只是尽可能逼近这个上限。</li><li>数据要有代表性，否则必然会过拟合。</li><li>而且对于分类问题，数据偏斜不能过于严重，不同类别的数据数量不要有数量级的差距。</li><li>而且还要对数据的量级有一个评估，多少个样本，多少个特征，可以估算出其对内存的消耗程度，判断训练过程中内存是否能够放得下。如果 放不下就得考虑改进算法或者使用一些降维的技巧了。如果数据量实在太大，那就要考虑分布式了。</li></ul></blockquote><h5 id="1-3-特征预处理与特征选择"><a href="#1-3-特征预处理与特征选择" class="headerlink" title="1.3 特征预处理与特征选择"></a>1.3 特征预处理与特征选择</h5><blockquote><ul><li>良好的数据要能够提取出良好的特征才能真正发挥作用。</li><li>特征预处理、数据清洗是很关键的步骤，往往能够使得算法的效果和性能得到显著提高。归一化、离散化、因子化、缺失值处理、去除共线性 等，数据挖掘过程中很多时间就花在它们上面。这些工作简单可复制，收益稳定可预期，是机器学习的基础必备步骤。</li><li>筛选出显著特征、摒弃非显著特征，需要机器学习工程师反复理解业务。这对很多结果有决定性的影响。特征选择好了，非常简单的算法也能 得出良好、稳定的结果。这需要运用特征有效性分析的相关技术，如相关系数、卡方检验、平均互信息、条件熵、后验概率、逻辑回归权重等 方法。</li></ul></blockquote><h5 id="1-4-训练模型与调优"><a href="#1-4-训练模型与调优" class="headerlink" title="1.4 训练模型与调优"></a>1.4 训练模型与调优</h5><blockquote><p>直到这一步才能用到具体的算法进行训练。现在很多算法都能够封装成黑盒供人使用。但是真正考验水平的是调整这些算法的（超）参 数，使得结果变得更加优良。这需要我们对算法的原理有深入的理解。理解越深入，就越能发现问题的症结，提出良好的调优方案。</p></blockquote><h5 id="1-5-模型诊断"><a href="#1-5-模型诊断" class="headerlink" title="1.5 模型诊断"></a>1.5 模型诊断</h5><blockquote><ul><li>用于确定模型调优的方向与思路</li><li>过拟合、欠拟合 判断是模型诊断中至关重要的一步。常见的方法如交叉验证，绘制学习曲线等。过拟合的基本调优思路是增加数据量，降低模 型复杂度。欠拟合的基本调优思路是提高特征数量和质量，增加模型复杂度。</li><li>误差分析也是机器学习至关重要的步骤。通过观察误差样本全面分析产生误差的原因:是参数的问题还是算法选择的问题，是特征的问题还是数据本身的问题……</li><li>诊断后的模型需要进行调优，调优后的新模型需要重新进行诊断，这是一个反复迭代不断逼近的过程，需要不断地尝试， 进而达到最优状态。</li></ul></blockquote><h5 id="1-6-模型融合"><a href="#1-6-模型融合" class="headerlink" title="1.6 模型融合"></a>1.6 模型融合</h5><blockquote><ul><li>一般来说，模型融合后都能使得效果有一定提升。而且效果很好。</li><li>工程上，主要提升算法准确度的方法是分别在模型的前端（特征清洗和预处理，不同的采样模式）与后端（模型融合）上下功夫。因为他们比较标准可复制，效果比较稳定。而直接调参的工作不会很多，毕竟大量数据训练起来太慢了，而且效果难以保证。</li></ul></blockquote><h5 id="1-7-上线运行"><a href="#1-7-上线运行" class="headerlink" title="1.7 上线运行"></a>1.7 上线运行</h5><blockquote><p>这一部分内容主要跟工程实现的相关性比较大。工程上是结果导向，模型在线上运行的效果直接决定模型的成败。 不单纯包括其准确程度、误差等情况，还包括其运行的速度(时间复杂度)、资源消耗程度（空间复杂度）、稳定性是否可接受。</p></blockquote><h5 id="1-8-总结"><a href="#1-8-总结" class="headerlink" title="1.8 总结"></a>1.8 总结</h5><blockquote><p>&#x3D;&#x3D;这些工作流程主要是工程实践上总结出的一些经验。并不是每个项目都包含完整的一个流程。这里的部分只是一个指导性的说明，只有大家自 己多实践，多积累项目经验，才会有自己更深刻的认识。&#x3D;&#x3D;</p></blockquote><h4 id="2-独立同分布IID（Independent-and-Identically-Distributed）"><a href="#2-独立同分布IID（Independent-and-Identically-Distributed）" class="headerlink" title="2_独立同分布IID（Independent and Identically Distributed）"></a>2_独立同分布IID（Independent and Identically Distributed）</h4><p>^5ed916</p><h5 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h5><blockquote><p>在概率统计理论中，如果变量序列或者其他随机变量有相同的概率分布，并且互相独立，那么这些随机变量是独立同分布。 在西瓜书中解释是：输入空间中的所有样本服从一个隐含未知的分布，训练数据所有样本都是独立地从这个分布上采样而得。</p></blockquote><h5 id="2-2-独立、同分布和独立同分布的简单解释"><a href="#2-2-独立、同分布和独立同分布的简单解释" class="headerlink" title="2.2 独立、同分布和独立同分布的简单解释"></a>2.2 独立、同分布和独立同分布的简单解释</h5><blockquote><p>&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_28.png" alt="监督学习和强化学习的对比"></p></blockquote><h5 id="2-3-机器学习领域的重要假设"><a href="#2-3-机器学习领域的重要假设" class="headerlink" title="2.3 机器学习领域的重要假设"></a>2.3 机器学习领域的重要假设</h5><blockquote><p>&#x3D;&#x3D;IID独立同分布即假设训练数据和测试数据是满足相同分布的，它是通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障。&#x3D;&#x3D;</p></blockquote><h5 id="2-4-目前发展"><a href="#2-4-目前发展" class="headerlink" title="2.4 目前发展"></a>2.4 目前发展</h5><blockquote><ul><li>机器学习并不总要求独立同分布，在不少问题中要求样本数据采样自同一个分布是因为希望用训练数据集得到的模型可以合理的用于测试数据集，使用独立同分布假设能够解释得通。</li><li>目前一些机器学习内容已经不再囿于独立同分布假设下，一些问题会假设样本没有同分布。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux入门视频教程-笔记</title>
    <link href="/road2dasheng/03_Linux%E5%85%A5%E9%97%A8/"/>
    <url>/road2dasheng/03_Linux%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="B站黑马程序员-Linux入门视频课程笔记"><a href="#B站黑马程序员-Linux入门视频课程笔记" class="headerlink" title="B站黑马程序员-Linux入门视频课程笔记"></a><a href="https://www.bilibili.com/video/BV1n84y1i7td?p=24&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-Linux入门视频课程</a>笔记</h3><h4 id="1-初识Linux"><a href="#1-初识Linux" class="headerlink" title="1. 初识Linux"></a>1. 初识Linux</h4><h5 id="1-1-Linux内核"><a href="#1-1-Linux内核" class="headerlink" title="1.1 Linux内核"></a>1.1 Linux内核</h5><blockquote><ul><li><img src="/road2dasheng/img/03/image-20230202175738140.png" alt="image-20230202175738140"></li></ul></blockquote><h5 id="1-2-Linux发行版"><a href="#1-2-Linux发行版" class="headerlink" title="1.2 Linux发行版"></a>1.2 Linux发行版</h5><blockquote><ul><li><img src="/road2dasheng/img/03/image-20230202180326202.png" alt="image-20230202180326202"></li><li><img src="/road2dasheng/img/03/image-20230202180845094.png" alt="image-20230202180845094"></li></ul></blockquote><h5 id="1-3-WSL：-Windows-Subsystem-for-Linux"><a href="#1-3-WSL：-Windows-Subsystem-for-Linux" class="headerlink" title="1.3 WSL： Windows Subsystem for Linux"></a>1.3 WSL： Windows Subsystem for Linux</h5><blockquote><p>WSL作为windows10系统带来的全新特性，正在逐步颠覆开发人员既有的选择</p><blockquote><ul><li>传统方式获取Linux操作系统环境，是安装完整的虚拟机，如VMWare</li><li>使用WSL，可以以非常轻量化的方式，得到Linux系统环境 </li><li>WSL图解<br><img src="/road2dasheng/img/03/image-20230202192204547.png" alt="image-20230202192204547"></li><li>WSL部署<br><img src="/road2dasheng/img/03/image-20230202192639405.png" alt="image-20230202192639405"></li></ul></blockquote></blockquote><h5 id="1-4-虚拟机快照"><a href="#1-4-虚拟机快照" class="headerlink" title="1.4 虚拟机快照"></a>1.4 虚拟机快照</h5><blockquote><ul><li>虚拟机快照可以保存虚拟机的状态，当虚拟机出现问题时，可以通过预先制作的快照恢复到制作时候的状态，用作备份用<br><img src="/road2dasheng/img/03/image-20230202215145813.png" alt="image-20230202215145813"></li></ul></blockquote><hr><h4 id="2-Linux基础命令"><a href="#2-Linux基础命令" class="headerlink" title="2. Linux基础命令"></a>2. Linux基础命令</h4><h5 id="2-1-重要知识点"><a href="#2-1-重要知识点" class="headerlink" title="2.1 重要知识点"></a>2.1 重要知识点</h5><blockquote><p>Linux的目录结构</p><blockquote><ul><li>Linux的顶级目录只有一个，称为“根目录”</li><li>Windows系统的顶级目录可以有多个，即各个盘符</li></ul></blockquote></blockquote><blockquote><p>Linux路径的描述形式</p><blockquote><ul><li>在Linux系统中，路径之间的层级关系，使用:&#x2F;来表示</li><li>在Windows系统中，路径之间的层级关系，使用:\来表示</li></ul></blockquote></blockquote><blockquote><p>Linux特殊路径符</p><blockquote><ul><li><code>.</code> :表示当前目录</li><li><code>..</code> :表示上一级目录</li><li><code>~</code> :表示HOME目录</li></ul></blockquote></blockquote><blockquote><p>通配符<code>*</code>：表示通配符，即匹配任意内容（包含空），用于做模糊匹配</p><blockquote><ul><li><code>test*</code>：表示匹配任何以test开头的内容</li><li><code>*test</code>：表示匹配任何以test结尾的内容</li><li><code>*test*</code>：表示匹配任何包含test的内容</li></ul></blockquote></blockquote><h5 id="2-2-文件操作命令1"><a href="#2-2-文件操作命令1" class="headerlink" title="2.2 文件操作命令1"></a>2.2 文件操作命令1</h5><blockquote><ul><li>touch命令<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">touch</span> Linux路径<br><span class="hljs-comment"># touch命令无选项，参数必填，表示要创建的文件路径</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>cat命令<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">cat</span> Linux路径<br><span class="hljs-comment"># cat命令无选项，参数必填，表示被查看的文件路径</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>more命令 | less命令<blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">* 语法：more | less Linux路径</span><br># <span class="hljs-keyword">more</span>命令 | less命令均无选项，参数必填，表示被查看的文件路径<br># <span class="hljs-keyword">cat</span>命令是直接将内容全部显示出来，而<span class="hljs-keyword">more</span>命令 | less命令支持翻页<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="2-3-文件操作命令2"><a href="#2-3-文件操作命令2" class="headerlink" title="2.3 文件操作命令2"></a>2.3 文件操作命令2</h5><blockquote><ul><li>cp命令:用于复制文件或文件夹<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">touch</span> [-r] 参数1 参数2<br><span class="hljs-comment"># -r选项：可选，用于复制文件夹使用，表示递归</span><br><span class="hljs-comment"># 参数1：Linux路径，表示被复制的文件或文件夹</span><br><span class="hljs-comment"># 参数2：Linux路径，表示粘贴的地方</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>mv命令:用于移动文件或文件夹<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">mv</span> 参数1 参数2<br><span class="hljs-comment"># 参数1：表示被移动的文件或文件夹</span><br><span class="hljs-comment"># 参数2：表示要移动去的地方，如果目标不存在，则对被移动的文件进行改名（即1的名称会被改为2的名称），以确保目标存在</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>rm命令:用于删除文件或文件夹<blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">* 语法：<span class="hljs-built_in">rm</span> [-<span class="hljs-type">r</span> -<span class="hljs-type">f</span>] 参数<span class="hljs-number">1</span> 参数<span class="hljs-number">2</span> ······ 参数N<br><span class="hljs-comment"># -r选项：用于删除文件夹</span><br><span class="hljs-comment"># -f选项：表示force，强制删除（不会弹出提示确认信息）</span><br>!普通用户删除内容不会弹出提示，只有root管理员用户删除内容才会有内容提示，所以一般普通用户用不到<span class="hljs-operator">-f</span>选项<br><span class="hljs-comment"># 参数1、参数2、······参数N表示要删除的文件或文件夹路径，按照空格隔开</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="2-4-查找命令"><a href="#2-4-查找命令" class="headerlink" title="2.4 查找命令"></a>2.4 查找命令</h5><blockquote><ul><li>which命令:用于查看所使用的一系列命令的程序文件的位置<blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>语法：which 要查找的命令 <br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>find命令：用于搜索指定的文件<blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">* 语法：<span class="hljs-built_in">find</span> 起始路径 -name “被查找文件名”<br><span class="hljs-comment"># 支持通配符进行模糊搜索</span><br><br>* 语法：<span class="hljs-built_in">find</span> 起始路径 -size +|-n[k|M|G]<br><span class="hljs-comment"># +、-表示大于和小于</span><br><span class="hljs-comment"># n表示文件大小的数字</span><br><span class="hljs-comment"># k、M、G表示单位:kb、MB、GB</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="2-5-grep、wc和管道符"><a href="#2-5-grep、wc和管道符" class="headerlink" title="2.5 grep、wc和管道符"></a>2.5 grep、wc和管道符</h5><blockquote><ul><li>grep命令：用于从文件中通过关键字过滤文件行<blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">* 语法：grep [-n] 关键字 文件路径<br><span class="hljs-meta"># 选项，-n：可选，表示在结果中显示匹配的行的行号</span><br><span class="hljs-meta"># 参数1，关键字：必填，表示过滤的关键字，如果带有空格或其它特殊符号，建议使用<span class="hljs-string">&quot;&quot;</span>将其包围起来</span><br><span class="hljs-meta"># 参数2，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>wc命令：用于统计文件的行数、单词数量等<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">wc</span> [-c -m -l -w] 文件路径<br><span class="hljs-comment"># 选项，-c：统计bytes数量</span><br><span class="hljs-comment"># 选项，-m：统计字符数量</span><br><span class="hljs-comment"># 选项，-l：统计行数</span><br><span class="hljs-comment"># 选项，-w：统计单词数量</span><br><span class="hljs-comment"># 参数，文件路径：被统计的文件，可作为内容输入的端口</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>管道符：将管道符左边命令的结果，作为右边命令的输入<blockquote><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-symbol">*</span> 语法：命令1|<span class="hljs-string">命令2</span><br><span class="hljs-string"># 管道符可以嵌套使用：命令1</span>|<span class="hljs-string">命令2</span>|<span class="hljs-string">命令3</span>|<span class="hljs-string">···</span>|<span class="hljs-string">命令N</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="2-6-echo和重定向符"><a href="#2-6-echo和重定向符" class="headerlink" title="2.6 echo和重定向符"></a>2.6 echo和重定向符</h5><blockquote><ul><li>echo命令：用于在命令行内输出指定内容<blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">* 语法：echo 输出的内容<br><span class="hljs-meta"># 无需选项，只有一个参数，表示要输出的内容，如果内容里带有空格或其它特殊符号，建议使用<span class="hljs-string">&quot;&quot;</span>将其包围起来</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>反引号（或飘号）&#96;：被其包围的内容，会被作为命令执行，而非普通字符<blockquote><p><img src="/road2dasheng/img/03/image-20230203180328836.png" alt="image-20230203180328836"></p></blockquote></li></ul></blockquote><blockquote><ul><li>重定向符：将左侧命令的结果覆盖或追加到右侧指定的文件中<blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">：将左侧命令的结果，覆盖写入到符号右侧指定的文件中</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;：将左侧命令的结果，追加写入到符号右侧指定的文件中</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>tail命令：用于查看文件尾部内容，跟踪文件的最新更改<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">tail</span> [-f -num] Linux路径<br><span class="hljs-comment"># 选项，-f：表示持续跟踪</span><br><span class="hljs-comment"># 选项，-num：表示查看尾部num(具体数字)行，不填默认10行</span><br><span class="hljs-comment"># 参数，Linux路径：表示被跟踪的文件路径</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><hr><h4 id="3-Linux用户和权限"><a href="#3-Linux用户和权限" class="headerlink" title="3. Linux用户和权限"></a>3. Linux用户和权限</h4><h5 id="3-1-认知root用户"><a href="#3-1-认知root用户" class="headerlink" title="3.1 认知root用户"></a>3.1 认知root用户</h5><blockquote><p>什么是root用户？</p><blockquote><ul><li>无论windows、MacOS、Linux均采用多用户的管理模式进行权限管理</li><li>在Linux系统中，拥有最大权限的账户名为：root（超级管理员）</li><li>普通用户的权限一般在其home目录内是不受限的，而一旦出了home目录，在大多地方普通用户就仅有只读和执行权限，没有修改权限</li></ul></blockquote></blockquote><blockquote><p>掌握su命令</p><blockquote><ul><li>su命令就是用于账户切换的系统命令，全称为Switch User</li><li>语法：<code>su [-] [用户名]</code> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">* -符是可选的，表示是否在切换用户后加载环境变量，建议带上<br>* 参数：用户名，表示要切换的用户，用户名也可以省略，省略表示切换到root<br>* 切换用户后，可以通过<span class="hljs-keyword">exit</span>命令退回上一个用户，也可以使用快捷键Ctrl+d<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><blockquote><p>掌握sudo命令</p><blockquote><ul><li>虽然通过su命令可以切换到root用户得到最大权限，但不建议长期使用root用户，避免带来系统损坏</li><li>可以使用sudo命令，为普通的命令授权，临时以root身份执行</li><li>语法：<code>sudo 其它命令</code><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>在其它命令之前，带上sudo，即可为这条命令临时赋予root授权<br><span class="hljs-bullet">* </span>但是并不是所有的用户，都有权利使用sudo，需要为普通用户配置sudo认证<br><span class="hljs-bullet">* </span>配置sudo认证：用root用户执行visudo命令，增加相应配置项<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><h5 id="3-2-用户、用户组管理"><a href="#3-2-用户、用户组管理" class="headerlink" title="3.2 用户、用户组管理"></a>3.2 用户、用户组管理</h5><blockquote><p>用户、用户组的概念</p><blockquote><ul><li>Linux系统中可以配置多个用户和多个用户组，用户也可以加入多个用户组</li><li><img src="/road2dasheng/img/03/image-20230201165252463.png" alt="image-20230201165252463"></li><li>Linux中关于权限的管控级别有2个级别，分别是：<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>针对用户的权限控制<br><span class="hljs-bullet">* </span>针对用户组的权限控制<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><blockquote><p>用户、用户组的命令</p><blockquote><ul><li>创建用户组<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">groupadd 用户组名<br><span class="hljs-bullet">* </span>需要用root用户执行<br></code></pre></td></tr></table></figure></li><li>删除用户组<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">groupdel 用户组名<br><span class="hljs-bullet">* </span>需要用root用户执行<br></code></pre></td></tr></table></figure></li><li>创建用户<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">uesradd [-g -d] 用户名<br>* 需要用root用户执行<br>* 选项：-g，指定用户的组，不指定-g，会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g<br>* 选项：-d，指定用户home路径，不指定，home目录默认在：/home/用户名<br></code></pre></td></tr></table></figure></li><li>删除用户<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">userdel [-r] 用户名<br>* 需要用root用户执行<br>* 选项：-r，删除用户的home目录，不使用-r，删除用户时，home目录保留 <br></code></pre></td></tr></table></figure></li><li>查看用户所属组<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">id [用户名]<br><span class="hljs-bullet">* </span>需要用root用户执行<br><span class="hljs-bullet">* </span>参数：用户名，被查看的用户，如果不提供则查看自身<br></code></pre></td></tr></table></figure></li><li>修改用户所属组<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">usermod</span> -aG 用户组 用户名<br>· 需要用root用户执行<br>· 将指定用户加入指定用户组<br></code></pre></td></tr></table></figure></li><li>查看系统中全部用户信息</li><li><img src="/road2dasheng/img/03/image-20230201173417822.png" alt="image-20230201173417822"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">getent passwd<br>* 显示的信息含义为:<br>用户名:密码(x):用户ID:组ID:描述信息(无用):home目录:执行终端（默认bash）<br></code></pre></td></tr></table></figure></li><li>查看系统中全部用户组信息</li><li><img src="/road2dasheng/img/03/image-20230201174256230.png" alt="image-20230201174256230"><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">getent <span class="hljs-keyword">group</span><br><span class="hljs-title">* 显示的信息含义为:</span><br><span class="hljs-title">用户组名:密码(x</span>):用户组ID<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><h5 id="3-3-查看权限控制"><a href="#3-3-查看权限控制" class="headerlink" title="3.3 查看权限控制"></a>3.3 查看权限控制</h5><blockquote><ul><li>查看Linux文件的权限管控信息</li></ul><blockquote><ul><li>通过<code>ls -l</code>命令以列表形式查看内容，并显示权限细节&#96;</li></ul><p><img src="/road2dasheng/img/03/image-20230201175837692.png" alt="image-20230201175837692"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>序号1，表示文件、文件夹的权限控制信息<br><span class="hljs-bullet">* </span>序号2，表示文件、文件夹所属用户<br><span class="hljs-bullet">* </span>序号3，表示文件、文件夹所属用户组<br></code></pre></td></tr></table></figure></blockquote></blockquote><blockquote><ul><li>Linux中读、写、执行三种权限的含义</li></ul><blockquote><p>** <img src="/road2dasheng/img/03/image-20230201181730316.png" alt="image-20230201181730316"></p><p>** <img src="/road2dasheng/img/03/image-20230201181933171.png" alt="image-20230201181933171"></p></blockquote></blockquote><h5 id="3-4-修改权限控制-chmod命令"><a href="#3-4-修改权限控制-chmod命令" class="headerlink" title="3.4 修改权限控制 - chmod命令"></a>3.4 修改权限控制 - chmod命令</h5><blockquote><ul><li>可以通过chmod命令，修改文件、文件夹的权限信息</li></ul><blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">语法：chmod [-R] 权限 文件或文件夹<br><br>* 选项：-R，对文件夹内的全部内容应用同样的操作<br><br> ！注意：只有文件、文件夹的所属用户或root用户可以修改<br><br># 示例：chmod u<span class="hljs-operator">=</span>rwx<span class="hljs-punctuation">,</span>g<span class="hljs-operator">=</span>rx<span class="hljs-punctuation">,</span>o<span class="hljs-operator">=</span><span class="hljs-keyword">x</span> hello.txt<span class="hljs-punctuation">,</span> 将文件权限修改修改为：rwxr-<span class="hljs-keyword">x</span>--<span class="hljs-keyword">x</span><br>       chmod -R u<span class="hljs-operator">=</span>rwx<span class="hljs-punctuation">,</span>g<span class="hljs-operator">=</span>rx<span class="hljs-punctuation">,</span>o<span class="hljs-operator">=</span><span class="hljs-keyword">x</span> test<span class="hljs-punctuation">,</span> 将文件夹test以及文件夹内全部内容权限设              置为：rwxr-<span class="hljs-keyword">x</span>--<span class="hljs-keyword">x</span><br></code></pre></td></tr></table></figure></blockquote></blockquote><blockquote><ul><li>使用数字序号标记权限<blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">* 权限可以用<span class="hljs-number">3</span>位数字来代表，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其它用户权限<br>&gt;* r=<span class="hljs-number">4</span>，w=<span class="hljs-number">2</span>，x=<span class="hljs-number">1</span><br>* rwx的相互组合可以得到从<span class="hljs-number">0</span>到<span class="hljs-number">7</span>的<span class="hljs-number">8</span>种权限组合<br>  如<span class="hljs-number">7</span>代表<span class="hljs-symbol">:rwx</span>，<span class="hljs-number">5</span>代表<span class="hljs-symbol">:r-x</span>，<span class="hljs-number">1</span>代表<span class="hljs-symbol">:--x</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="3-5-修改权限控制-chown命令"><a href="#3-5-修改权限控制-chown命令" class="headerlink" title="3.5 修改权限控制 - chown命令"></a>3.5 修改权限控制 - chown命令</h5><blockquote><p>使用chown命令，可以修改文件、文件夹的所属用户和用户组</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">语法：<span class="hljs-built_in">chown</span> [-R] [用户][:][用户组] 文件或文件夹<br>* 选项：-R，同<span class="hljs-built_in">chmod</span>，对文件夹内全部内容应用相同规则<br>* 选项：用户，修改所属用户<br>* 选项：用户组，修改所属用户组<br>* “:”符号是用于分隔用户和用户组<br><br>! 注意：普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行<br><br><span class="hljs-comment"># 示例：chown root hello.txt，将hello.txt所属用户修改为root</span><br>       <span class="hljs-built_in">chown</span> :root hello.txt，将hello.txt所属用户组修改为root<br>       <span class="hljs-built_in">chown</span> root:<span class="hljs-built_in">test</span> hello.txt，将hello.txt所属用户修改为root,用户组修改为<span class="hljs-built_in">test</span><br>       <span class="hljs-built_in">chown</span> -R root <span class="hljs-built_in">test</span>，将<span class="hljs-built_in">test</span>文件夹和文件夹内全部内容的所属用户修改为root<br></code></pre></td></tr></table></figure></blockquote></blockquote><hr><h4 id="4-vi-vim编辑器"><a href="#4-vi-vim编辑器" class="headerlink" title="4. vi\vim编辑器"></a>4. vi\vim编辑器</h4><blockquote><ul><li>vi\vim是visual interface的简称，是Linux中最经典的文本编辑器</li><li>同图形化界面中的文本编辑器一样，vi是命令行下对文本文件进行编辑的绝佳选择</li><li>vim是vi的加强版本，兼容vi的所有指令，不仅能编辑文本，而且还具有shell程序的编辑功能，可以用不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性</li></ul></blockquote><h5 id="4-1-三种工作模式"><a href="#4-1-三种工作模式" class="headerlink" title="4.1 三种工作模式"></a>4.1 三种工作模式</h5><blockquote><ul><li><p>命令模式（Command mode）：此模式下所敲的按键，编辑器都理解为命令，以命令驱动执行不同的功能，所以此模式下不能自由进行文本编辑</p></li><li><p>输入模式（Insert mode）：也就是所谓的编辑模式、插入模式，所以此模式下可以对文件内容进行自由编辑</p></li><li><p>底线模式（Last line mode）：以:开始，通常用于文件的保存、退出</p><p><img src="/road2dasheng/img/03/image-20230203204551402.png" alt="image-20230203204551402"></p></li></ul></blockquote><h5 id="4-2-快捷键"><a href="#4-2-快捷键" class="headerlink" title="4.2 快捷键"></a>4.2 快捷键</h5><blockquote><ul><li><img src="/road2dasheng/img/03/image-20230203210542149.png" alt="image-20230203210542149"></li><li><img src="/road2dasheng/img/03/image-20230203210614769.png" alt="image-20230203210614769"></li><li><img src="/road2dasheng/img/03/image-20230203210647887.png" alt="image-20230203210647887"></li></ul></blockquote><hr><h4 id="5-Linux实用操作"><a href="#5-Linux实用操作" class="headerlink" title="5. Linux实用操作"></a>5. Linux实用操作</h4><h5 id="5-1-各类实用快捷键"><a href="#5-1-各类实用快捷键" class="headerlink" title="5.1 各类实用快捷键"></a>5.1 各类实用快捷键</h5><blockquote><ul><li>强制停止<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>Ctrl + C：用于程序出问题时或者命令输错时强制停止<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>退出、登出<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">* Ctrl + d：用于退出某些特定程序，利于<span class="hljs-keyword">python</span>，但不能用于<span class="hljs-keyword">vi</span>\<span class="hljs-keyword">vim</span>的退出<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>历史命令搜索<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>history：显示已经执行过的命令，序号越大说明执行的时间与此刻的时间越接近<br><span class="hljs-bullet">* </span>!命令前缀：从已经执行过的命令中自下往上匹配与命令前缀相同的那一条命令并直接执行<br><span class="hljs-bullet">* </span>Ctrl + r：输入内容去匹配历史命令，如果搜索到的内容时需要的，那么回车可以直接执行，如果不想执行，可以按下-&gt;或&lt;-键<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>光标移动<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>ctrl + a：跳到命令开头<br><span class="hljs-bullet">* </span>ctrl + e：跳到命令结尾<br><span class="hljs-bullet">* </span>ctrl + &lt;-键：向左跳一个单词<br><span class="hljs-bullet">* </span>ctrl + -&gt;键：向右跳一个单词<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>清屏<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>ctrl + l：清空终端内容<br><span class="hljs-bullet">* </span>clear命令：清空终端内容<br></code></pre></td></tr></table></figure></li></ul></blockquote><h5 id="5-2-软件安装"><a href="#5-2-软件安装" class="headerlink" title="5.2 软件安装"></a>5.2 软件安装</h5><blockquote><p>操作系统安装软件的方式一般分为：下载安装包自行安装或者系统的应用商店内安装</p></blockquote><blockquote><ul><li>使用yum为CentOS系统安装软件<blockquote><p>yum命令：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake">* 语法：yum [-y] [<span class="hljs-keyword">install</span> | <span class="hljs-keyword">remove</span> | search] 软件名称<br><span class="hljs-comment"># 选项，-y：自动确认，无需手动确认安装或卸载过程</span><br><span class="hljs-comment"># install：安装</span><br><span class="hljs-comment"># remove：卸载</span><br><span class="hljs-comment"># search：搜索</span><br>! yum命令需要root权限哦，可以su切换到root，或使用sudo提权<br>! yum命令需要联网<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>使用apt为Ubuntu系统安装软件<blockquote><p>apt命令：DEB包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake">* 语法：apt [-y] [<span class="hljs-keyword">install</span> | <span class="hljs-keyword">remove</span> | search] 软件名称<br><span class="hljs-comment"># 选项，-y：自动确认，无需手动确认安装或卸载过程</span><br><span class="hljs-comment"># install：安装</span><br><span class="hljs-comment"># remove：卸载</span><br><span class="hljs-comment"># search：搜索</span><br>! apt命令需要root权限哦，可以su切换到root，或使用sudo提权<br>! apt命令需要联网<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-3-systemctl命令"><a href="#5-3-systemctl命令" class="headerlink" title="5.3 systemctl命令"></a>5.3 systemctl命令</h5><blockquote><ul><li>Linux系统很多软件（内置或第三方）均支持使用systemctl命令控制：启动、停止、开机自启。能够被systemctl管理的软件，一般也称之为：服务<blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">* 语法：systemctl start | stop | status | <span class="hljs-built_in">enable</span> | <span class="hljs-built_in">disable</span> 服务名<br><span class="hljs-comment"># start：启动</span><br><span class="hljs-comment"># stop： 关闭</span><br><span class="hljs-comment"># status： 查看状态</span><br><span class="hljs-comment"># enable： 开启开机自启</span><br><span class="hljs-comment"># disable：关闭开机自启</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>系统内置的服务比较多，比如：<blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>NetworkManager，主网络服务；<br><span class="hljs-bullet">* </span>network，副网络服务；<br><span class="hljs-bullet">* </span>firewalld，防火墙服务；<br><span class="hljs-bullet">* </span>sshd，ssh服务（XShell远程登录Linux使用的就是这个服务）<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>除了内置的服务以外，部分第三方软件安装后也可以以systemctl进行控制，并且其它第三方软件通过手动添加后也能进行控制<blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">部分第三方软件：<br><span class="hljs-number">1</span>、安装ntp软件<br>* 语法：yum <span class="hljs-keyword">install</span> -y ntp <br><span class="hljs-comment"># 可以通过ntpd服务名，配合systemctl进行控制</span><br><br><span class="hljs-number">2</span>、安装apache服务器软件<br>* 语法：yum <span class="hljs-keyword">install</span> -y httpd<br><span class="hljs-comment"># 可以通过httpd服务名，配合systemctl进行控制</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-4-软链接"><a href="#5-4-软链接" class="headerlink" title="5.4 软链接"></a>5.4 软链接</h5><blockquote><ul><li>在系统中创建软链接，可以将文件、文件夹链接到其它位置。类似Windows系统中的《快捷方式》<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">ln</span> -s 参数1 参数2<br><span class="hljs-comment"># -s选项：创建软连接</span><br><span class="hljs-comment"># 参数1：被链接的文件或文件夹</span><br><span class="hljs-comment"># 参数2：要链接去的目的地</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-5-日期和时区"><a href="#5-5-日期和时区" class="headerlink" title="5.5 日期和时区"></a>5.5 日期和时区</h5><blockquote><ul><li>date命令：用于在命令行中查看系统的时间<blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs excel">* 语法：<span class="hljs-built_in">date</span> [-d] [+格式化字符串]<br># -d选项：按照给定的字符串显示日期，一般用于日期计算<br>  <span class="hljs-built_in">year</span>  -  年<br>  <span class="hljs-built_in">month</span> -  月<br>  <span class="hljs-built_in">day</span>   -  天<br>  <span class="hljs-built_in">hour</span>  -  小时<br>  <span class="hljs-built_in">minute</span> - 分钟<br>  <span class="hljs-built_in">second</span> - 秒<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/road2dasheng/img/03/image-20230204094126253.png" alt="image-20230204094126253"></h2></blockquote></li></ul><blockquote><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haml"># 格式化字符串：通过特定的字符串标记，来控制显示的日期格式<br><span class="hljs-tag">  %<span class="hljs-selector-tag">Y</span></span> - 年<br><span class="hljs-tag">  %<span class="hljs-selector-tag">y</span></span> - 年份后两位数字 (00..99)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">m</span></span> - 月份 (01..12)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">d</span></span> - 日 (01..31)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">H</span></span> - 小时 (00..23)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">M</span></span> - 分钟 (00..59)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">S</span></span> - 秒 (00..60)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">s</span></span> - 自 1970-01-01 00:00:00 UTC 到现在的秒数<br>！使用date命令本体，无选项，是直接查看时间 <br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230204093218562.png" alt="image-20230204093218562"><br><img src="/road2dasheng/img/03/image-20230204093302400.png" alt="image-20230204093302400"><br><img src="/road2dasheng/img/03/image-20230204093325753.png" alt="image-20230204093325753"><br>！如上，由于中间带有空格，所以使用双引号包围格式化字符串，作为整体。</p></blockquote></blockquote><blockquote><ul><li>修改Linux时区：一般通过date查看的日期时间是不准确的，这是因为系统默认时区非中国的东八区<blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">* 语法：rm -f <span class="hljs-regexp">/etc/</span>localtime<br>       sudo ln -s <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai /</span>etc/localtime<br># 即：将系统自带的localtime文件删除，并将<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia/Shanghai文件链接为localtime文件即可<br># 执行上述命令需要切换到root账户<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>ntp程序：可以自动联网同步时间，也可以通过手动校准时间<blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">* 自动校准： <br>  1、安装ntp<br>     yum -y install<span class="hljs-built_in"> ntp</span><br><span class="hljs-built_in"></span>  2、启动并设置开机自启<br>     systemctl start<span class="hljs-built_in"> ntp</span><br><span class="hljs-built_in"></span>     systemctl <span class="hljs-built_in">enable</span><span class="hljs-built_in"> ntp</span><br><span class="hljs-built_in"></span>* 手动校准：<br>   1、安装ntp<br>     yum -y install ntp、<br>   2、通过阿里云提供的服务网址配合ntpdate（安装ntp后会附带这个命令）命令进行校准<br>     ntpdate -u ntp.aliyun.com<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-6-IP地址、主机名"><a href="#5-6-IP地址、主机名" class="headerlink" title="5.6  IP地址、主机名"></a>5.6  IP地址、主机名</h5><blockquote><ul><li>IP地址：每一台联网的电脑都会有一个地址，用于和其它计算机进行通讯；<blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># IP地址主要有2个版本，V4版本和V6版本（V6很少用，课程暂不涉及）；</span><br><span class="hljs-meta"># IPv4版本的地址格式是：a.b.c.d，其中abcd表示0~255的数字，如192.168.88.101就是一个标准的IP地址</span><br><span class="hljs-meta"># 可以通过ifconfig命令查看本机的ip地址，如无法使用ifconfig命令，可以安装net-tools</span><br></code></pre></td></tr></table></figure></blockquote></li><li>特殊IP地址<blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"># <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>：这个<span class="hljs-built_in">IP</span>地址用于指代本机<br>#   <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>：可以用于指代本机；可以在端口绑定中用来确定绑定关系；在一些<span class="hljs-built_in">IP</span>地址限制中，表示所有<span class="hljs-built_in">IP</span>的意思，如放行规则设              置为<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>，表示允许任意<span class="hljs-built_in">IP</span>访问<br></code></pre></td></tr></table></figure></blockquote></li><li>主机名：每一台电脑除了对外联络地址（IP地址）以外，也可以有一个名字，称之为主机名<blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 可以使用<span class="hljs-built_in">hostname</span>命令查看主机名<br># 可以使用hostnamectl <span class="hljs-keyword">set</span>-<span class="hljs-built_in">hostname</span> 主机名，修改主机名（需root）<br></code></pre></td></tr></table></figure></blockquote></li><li>域名解析：通过主机名或字符地址去代替数字化的IP地址<blockquote><p><img src="/road2dasheng/img/03/image-20230204101954961.png" alt="image-20230204101954961"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"># 即先查看本机的记录（私人地址本，Windows看C:\Windows\System32\drivers\etc\hosts；Linux看/etc/hosts），再联   网去DNS服务器（如<span class="hljs-number">114.114.114.114</span>，<span class="hljs-number">8.8.8.8</span>等）询问<br></code></pre></td></tr></table></figure></blockquote></li><li>配置主机名映射<blockquote><p>比如一般情况下XShell是通过IP地址连接到Linux服务器，但也可以在Windows系统的C:\Windows\System32\drivers\etc\hosts文件中修改配置实现通过域名进行连接<br><img src="/road2dasheng/img/03/image-20230204102736125.png" alt="image-20230204102736125"></p></blockquote></li><li>在虚拟机中配置固定IP地址<br>虚拟机的Linux操作系统，其IP地址是通过DHCP服务获取的，即动态获取IP地址，所以每次重启设备后都会获取一次，可能导致IP地址频繁变更，这种情况会造成需要频繁修改远程连接到系统的终端软件的配置，以及相关域名的解析文件（如果有的话）而将虚拟机的IP进行固定便会减少这些不必要的麻烦<blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">配置步骤：<br> <span class="hljs-number">1</span>、在VMware Workstation中配置<span class="hljs-built_in">IP</span>地址网关和网段（<span class="hljs-built_in">IP</span>地址的范围）<br></code></pre></td></tr></table></figure><p> <img src="/road2dasheng/img/03/image-20230204220924720.png" alt="image-20230204220924720"></p></blockquote></li></ul><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">2、在Linux系统中手动修改配置文件，固定IP<br>   使用vim编辑/etc/sysconfig/network-scripts/ifcfg-ens33文件，填入如下内容,然后执行    <br>   systemctl restart network 重启网卡<br></code></pre></td></tr></table></figure><p> <img src="/road2dasheng/img/03/image-20230204221258688.png" alt="image-20230204221258688"></p></blockquote></blockquote><h5 id="5-7-网络传输"><a href="#5-7-网络传输" class="headerlink" title="5.7  网络传输"></a>5.7  网络传输</h5><blockquote><ul><li>ping命令：用于检查指定的网络服务器是否处于可联通状态<blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">* 语法：<span class="hljs-built_in">ping</span> [-c num] ip或主机名<br><span class="hljs-meta"># 选项，-c, num：检查的次数（num次），不使用-c选项，将无限次数持续检查</span><br><span class="hljs-meta"># 参数，ip或主机名：被检查的服务器的ip地址或主机名地址</span><br></code></pre></td></tr></table></figure></blockquote></li><li>wget命令：非交互式的文件下载器，可以在命令行内下载网络文件<blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 语法：wget [-b] url<br><span class="hljs-meta prompt_"># </span><span class="language-bash">选项，-b：表示后台下载，会将日志写入到当前工作目录的wget-log文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数，url：下载链接</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过<span class="hljs-built_in">tail</span>命令可以监控后台下载进度：<span class="hljs-built_in">tail</span> -f wget-log</span><br>！无论下载是否完成，都会生成要下载的文件，如果下载未完成，需及时清理未完成的不可用文件<br></code></pre></td></tr></table></figure></blockquote></li><li>curl命令：发送http网络请求，可用于下载文件、获取信息等<blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 语法：curl [-o] url<br><span class="hljs-meta prompt_"># </span><span class="language-bash">选项，-o：用于下载文件，当url是下载链接时，可以使用此选项保存文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数，url：要发起请求的网络地址</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过<span class="hljs-built_in">tail</span>命令可以监控后台下载进度：<span class="hljs-built_in">tail</span> -f wget-log</span><br>！无论下载是否完成，都会生成要下载的文件，如果下载未完成，需及时清理未完成的不可用文件<br></code></pre></td></tr></table></figure></blockquote></li><li>端口：是设备与外界通讯交流的出入口<blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>、端口分类<br>物理端口：又可称之为接口，是可见的端口，如USB接口，RJ45网口，HDMI端口等<br>虚拟端口：是指计算机内部的端口，是不可见的，是用来操作系统和外部进行交互使用的<br><br><span class="hljs-number">2</span>、端口作用<br>计算机程序之间的通讯，通过<span class="hljs-built_in">IP</span>只能锁定计算机，但是无法锁定具体的程序，通过端口可以锁定计算机上具体的程序，确保程序之间进行沟通 <br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230204224134019.png" alt="image-20230204224134019"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>、虚拟端口分类<br><span class="hljs-attribute">Linux</span>系统可以支持<span class="hljs-number">65535</span>个端口，这<span class="hljs-number">6</span>万多个端口分为<span class="hljs-number">3</span>类进行使用：<br><span class="hljs-comment"># 公认端口：1~1023，通常用于一些系统内置或知名程序的预留使用，如SSH、HTTPS服务的22、443端口</span><br><span class="hljs-comment"># 注册端口：1024~49151，通常可以随意使用，用于松散的绑定一些程序\服务</span><br><span class="hljs-comment"># 动态端口：49152~65535，通常不会固定绑定程序，而是当程序对外进行网络链接时，用于临时使用</span><br><br><span class="hljs-attribute">4</span>、查看端口占用<br><span class="hljs-comment"># 安装nmap：yum -y install nmap；然后执行命令：nmap 被查看的IP地址</span><br>  <span class="hljs-comment"># 安装netstat：yum -y install net-tools；然后执行命令：netstat -anp | grep 端口号</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-8-进程管理"><a href="#5-8-进程管理" class="headerlink" title="5.8  进程管理"></a>5.8  进程管理</h5><blockquote><ul><li>进程的概念<blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 程序的运行是被操作系统所管理的。</span><br><span class="hljs-meta"># 为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程</span><br><span class="hljs-meta"># 每一个进程都会被分配一个独有的：进程ID（进程号）</span><br></code></pre></td></tr></table></figure></blockquote></li><li>查看进程：可以通过ps命令查看进程信息<blockquote><p>1、查看全部进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">* 语法：<span class="hljs-built_in">ps</span> [-<span class="hljs-type">e</span> -<span class="hljs-type">f</span>]<br><span class="hljs-comment"># 选项，-e：显示出全部的进程</span><br><span class="hljs-comment"># 选项，-f：以完全格式化的形式展示信息（展示全部信息）</span><br>！一般来说，固定用法就是： <span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span> 列出全部进程的全部信息<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230204233623508.png" alt="image-20230204233623508"></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-meta"># UID：进程所属的用户ID</span><br><span class="hljs-meta"># PID：进程的进程号ID</span><br><span class="hljs-meta"># PPID：进程的父ID（启动此进程的其它进程）</span><br><span class="hljs-meta"># C：此进程的CPU占用率（百分比）</span><br><span class="hljs-meta"># STIME：进程的启动时间</span><br><span class="hljs-meta"># TTY：启动此进程的终端序号，如显示?，表示非终端启动</span><br><span class="hljs-meta"># TIME：进程占用CPU的时间</span><br><span class="hljs-meta"># <span class="hljs-keyword">CMD</span>：进程对应的名称或启动路径或启动命令</span><br></code></pre></td></tr></table></figure><p>2、查看指定进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">* 语法：<span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> 关键字<br># 关键字：命令名称\UID\PID等<br># 如：<span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> <span class="hljs-number">30001</span>，过滤带有<span class="hljs-number">30001</span>关键字的进程信息（一般指代过滤<span class="hljs-number">30001</span>进程号）<br></code></pre></td></tr></table></figure><p>3、关闭进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">kill</span> [-9] PID <br><span class="hljs-comment"># 选项，-9：表示强制关闭进程，不使用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身处理机制</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-9-主机状态"><a href="#5-9-主机状态" class="headerlink" title="5.9  主机状态"></a>5.9  主机状态</h5><blockquote><ul><li>查看系统资源占用<blockquote><p>top命令：查看CPU、内存使用情况，类似Windows的任务管理器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">* 语法：<span class="hljs-attribute">top</span><br># 默认每<span class="hljs-number">5</span>秒刷新一次，按<span class="hljs-selector-tag">q</span>或ctrl + c退出<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205112815476.png" alt="image-20230205112815476"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一行</span><br>  top:命令名称；14:36:57:当前系统时间；2 <span class="hljs-built_in">users</span>:2个用户登录；load average:1、5、15分钟负载<br><span class="hljs-comment"># 第二行</span><br>  Tasks：175个进程；2 running：1个进程在运行；177 sleeping：174个进程睡眠；0个停止和僵尸进程<br><span class="hljs-comment"># 第三行</span><br>  %Cpu(s):CPU使用率；us:用户CPU使用率；sy:系统CPU使用率；ni:高优先级进程占用CPU时间百分比；   <span class="hljs-built_in">id</span>:空闲CPU率；wa:IO等待CPU占用率；hi:CPU硬件中断率；si:CPU软件中断率；st：强制等待占用CPU率<br><span class="hljs-comment"># 第四行和第五行</span><br>  Kib Mem：物理内存；total：总量；free：空闲；used：使用；buff/cache：buff和cache占用<br>  KibSwap：虚拟内存；total：总量；free：空闲；used：使用；buff/cache：buff和cache占用<br><span class="hljs-comment"># 其它</span><br>  PID：进程<span class="hljs-built_in">id</span>；USER：进程所属用户；PR：进程优先级，越小越高；NI：负值表示高优先级，正表示低优先级<br>  VIRT：进程使用虚拟内存，单位KB；RES：进程使用物理内存，单位KB；SHR：进程使用共享内存，单位KB<br>  S：进程状态（S休眠，R运行，Z僵死状态，N负数优先级，I空闲状态）；%CPU：进程占用CPU率<br>  %MEM：进程占用内存率；TIME+：进程使用CPU时间总计，单位10毫秒；<br>  COMMAND：进程的命令或名称或程序文件路径<br></code></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">* 选项<br>  -<span class="hljs-selector-tag">p</span>：只显示某个进程的信息<br>  -d：设置刷新时间，默认是<span class="hljs-number">5s</span><br>  -c：显示产生进程的完整命令，默认是进程名<br>  -n：指定刷新次数，如 <span class="hljs-attribute">top</span> -n <span class="hljs-number">3</span>，则刷新<span class="hljs-number">3</span>次后退出<br>  -<span class="hljs-selector-tag">b</span>：以非交互非全屏模式运行，以批次的方式执行<span class="hljs-attribute">top</span>，一般配合-n指定输出几次统计信息，将输出重定向到       指定文件，如<span class="hljs-attribute">top</span> -<span class="hljs-selector-tag">b</span> -n <span class="hljs-number">3</span> &gt; /tmp/<span class="hljs-attribute">top</span><span class="hljs-selector-class">.tmp</span><br>  -<span class="hljs-selector-tag">i</span>：不显示任何闲置（idle）或无用（zombie）的进程<br>  -u：查找特定用户启动的进程<br></code></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">* 交互：当<span class="hljs-attribute">top</span>以交互式运行（非-<span class="hljs-selector-tag">b</span>选项启动），可以用以下交互式命令进行控制<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205120047377.png" alt="image-20230205120047377"></p></blockquote></li></ul></blockquote><blockquote><ul><li>磁盘信息监控<blockquote><p>1、df命令：用于查看硬盘的使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">df</span> [-h]<br><span class="hljs-comment"># 选项，-h：以更加人性化的单位显示</span><br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205120822083.png" alt="image-20230205120822083"><br>2、iostat命令：用于查看CPU、磁盘的相关信息</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">* 语法：iostat [-x] [num1] [num2]<br><span class="hljs-meta"># 选项，-x：显示更多信息</span><br><span class="hljs-meta"># 参数，num1：刷新间隔</span><br><span class="hljs-meta"># 参数，num2：刷新次数</span><br><span class="hljs-meta"># tps：该设备每秒的传输次数；<span class="hljs-string">&quot;一次传输&quot;</span>意思是<span class="hljs-string">&quot;一次I/O请求&quot;</span>。多个逻辑请求可能会被合并为<span class="hljs-string">&quot;一次I/O请   求&quot;</span>。<span class="hljs-string">&quot;一次传输&quot;</span>请求的大小是未知的</span><br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205121225486.png" alt="image-20230205121225486"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用iostat的-x选项，可以显示更多信息</span><br>  rrqm/s   -  每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求               发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并<br>  wrqm/s   -  每秒这个设备相关的写入请求有多少被Merge了<br>  rsec/s   -  每秒读取的扇区数；sectors<br>  wsec/    -  每秒写入的扇区数。<br>  rKB/s    -  每秒发送到设备的读取请求数<br>  wKB/s    -  每秒发送到设备的写入请求数<br>  avgrq-sz -  平均请求扇区的大小<br>  avgqu-sz -  平均请求队列的长度。毫无疑问，队列长度越短越好。    <br>  await    -  每一个IO请求的处理的平均时间（单位是微秒毫秒）。<br>  svctm    -  表示平均每次设备I/O操作的服务时间（以毫秒为单位）<br>  %util    -  磁盘利用率<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205121858925.png" alt="image-20230205121858925"></p></blockquote></li></ul></blockquote><blockquote><ul><li>网络状态监控<blockquote><p>sar命令：用于查看网络的相关统计，该命令非常复杂，这里仅简单用于统计网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：sar -n DEV num1 num2<br><span class="hljs-comment"># 选项</span><br>  -n：查看网络<br><span class="hljs-comment"># 参数</span><br>  DEV：表示查看网络接口<br>  num1：刷新间隔（不填代表查看一次结束）<br>  num2：查看次数（不填代表无限次）<br><span class="hljs-comment"># 信息解读</span><br>  IFACE    -  本地网卡接口的名称<br>  rxpck/s  -  每秒钟接受的数据包<br>  txpck/s  -  每秒钟发送的数据包<br>  rxKB/S   -  每秒钟接受的数据包大小，单位为KB<br>  txKB/S   -  每秒钟发送的数据包大小，单位为KB<br>  rxcmp/s  -  每秒钟接受的压缩数据包<br>  txcmp/s  -  每秒钟发送的压缩包<br>  rxmcst/s -  每秒钟接收的多播数据包<br>  如查看2次，隔3秒刷新一次，并最终汇总平均记录：<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205123346127.png" alt="image-20230205123346127"></p></blockquote></li></ul></blockquote><h5 id="5-10-环境变量"><a href="#5-10-环境变量" class="headerlink" title="5.10 环境变量"></a>5.10 环境变量</h5><blockquote><p>环境变量是操作系统在运行的时候，记录的一些关键性信息，用以辅助系统运行</p><blockquote><ul><li>env命令：用于查看当前系统中记录的环境变量<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">* 环境变量是一种KeyValue型结构，即名称和值<br><span class="hljs-comment"># 常见的环境变量</span><br>  HOME = /root 用户home目录的路径<br>  <span class="hljs-keyword">USER</span> <span class="hljs-title">= root</span> 当前的操作用户<br>   PWD = 当前的工作路径<br>   ······<br></code></pre></td></tr></table></figure><img src="/road2dasheng/img/03/image-20230205133107047.png" alt="image-20230205133107047"></li></ul></blockquote><ul><li>PATH：记录了系统执行任何命令的搜索路径<blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 例如执行命令 env | grep PATH，出现如下结果：</span><br>  <span class="hljs-regexp">/usr/</span>local/sbin<br>  <span class="hljs-regexp">/usr/</span>local/bin<br>  <span class="hljs-regexp">/usr/</span>sbin<br>  <span class="hljs-regexp">/usr/</span>bin:<span class="hljs-regexp">/root/</span>bin<br>当执行任何命令，都会按照顺序从上述路径中搜索要执行的程序的本体。<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205135154070.png" alt="image-20230205135154070"></p></blockquote></li><li>$符号：用于取”变量”的值<blockquote><p>环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 语法<br><span class="hljs-meta prompt_">  $</span><span class="language-bash">环境变量名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>`可以取得PATH这个环境变量的值，并通过<span class="hljs-built_in">echo</span>语句输出出来</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当和其它内容混合在一起的时候，可以通过&#123;&#125;来标注取的变量是谁，如`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PATH&#125;</span>ABC`</span><br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205140700228.png" alt="image-20230205140700228"></p></blockquote></li><li>自定义环境变量<blockquote><p>1、临时设置</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm">* 语法<br>  ex<span class="hljs-keyword">port</span> 变量名=变量值<br></code></pre></td></tr></table></figure><p>2、永久生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法<br>  针对当前用户生效，配置在当前用户的：~/.bashrc文件中<br>  针对所有用户生效，配置在系统的： /etc/profile文件中<br>  通过语法：<span class="hljs-built_in">source</span> 配置文件，进行立刻生效，或重启系统生效<br></code></pre></td></tr></table></figure></blockquote></li><li>自定义PATH<blockquote><p><img src="/road2dasheng/img/03/image-20230205142103919.png" alt="image-20230205142103919"></p></blockquote></li></ul></blockquote><h5 id="5-11-windows和linux的文件交互"><a href="#5-11-windows和linux的文件交互" class="headerlink" title="5.11 windows和linux的文件交互"></a>5.11 windows和linux的文件交互</h5><blockquote><ul><li>通过Xshell的文件管理系统实现<blockquote><p>在Xshell的隧道窗格（<code>view</code>里选择）的文件管理器中，可以方便地：<br>1、浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑<br>2、浏览文件系统，找到合适的目录，将本地电脑的文件拖入，便可快速上传到Linux中</p></blockquote></li><li>通过rz、sz命令实现<blockquote><p>rz、sz命令需要安装，可以通过 <code>yum -y install lrzsz</code>命令即可安装。<br>1、输入<code>rz</code>命令并执行，会直接打开windows的文件管理器，然后选择文件进行上传即可， 只是这种方式上传速度较慢，而通过Xshell的文件管理器进行文件上传速度较快<br>2、输入<code>sz 下载的文件</code>命令，会将Linux中的文件下载到windows中（存放文件的位置需要自己设置）</p></blockquote></li></ul></blockquote><h5 id="5-12-压缩、解压"><a href="#5-12-压缩、解压" class="headerlink" title="5.12 压缩、解压"></a>5.12 压缩、解压</h5><blockquote><ul><li>压缩格式<blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-built_in">zip</span>： Linux、Windows和MacOS系统常用<br>7<span class="hljs-built_in">zip</span>： Windows系统常用<br>  rar： Windows系统常用<br>  tar： Linux、MacOS常用<br>gzip： Linux、MacOS常用<br></code></pre></td></tr></table></figure></blockquote></li><li>tar命令<blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Linux和Mac系统常用有2种压缩格式，后缀名分别是`.tat`和`.gz(.tar.gz)`,这两种格式tar命令均适用</span><br><span class="hljs-string">.tar</span>，称之为tarball，归档文件，即简单的将文件组装到一个<span class="hljs-string">.tar</span>的文件内，并没有太多文件体积的减少，         仅仅是简单的封装<br><span class="hljs-string">.gz</span>，也常见为<span class="hljs-string">.tar.gz</span>，gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减        少压缩后的体积<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">* 语法<br>  tar [-<span class="hljs-keyword">c</span> -v -<span class="hljs-keyword">x</span> -f -z -C] 参数<span class="hljs-number">1</span> 参数<span class="hljs-number">2</span> ··· 参数N<br># 选项<br>  -<span class="hljs-keyword">c</span>：创建压缩文件，用于压缩模式<br>  -v：显示压缩、解压过程，用于查看进度<br>  -<span class="hljs-keyword">x</span>：解压模式<br>  -f：要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个<br>  -z：gzip模式，不使用-z就是普通的tarball格式，-z选项一般<br>  -C：选择解压的目的地，用于解压模式<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>示例<br>1、tar压缩<br>！-z选项如果使用的话，一般处于选项位第一个<br>！-f选项，必须在选项位最后一个<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205162355188.png" alt="image-20230205162355188"></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2</span>、<span class="hljs-variable">tar</span>解压<br>！<span class="hljs-operator">-</span><span class="hljs-variable">f</span>选项必须在选项组合体的最后一位<br>！<span class="hljs-operator">-</span><span class="hljs-variable">z</span>选项建议在开头位置<br>！<span class="hljs-operator">-</span><span class="hljs-built_in">C</span>选项单独使用，和解压所需的其它参数分开<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205162722026.png" alt="image-20230205162722026"></p></blockquote></li><li>zip和unzip命令<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法<br>  zip [-r] 参数1 参数2 ··· 参数N<br><span class="hljs-comment"># 选项</span><br>  -r：如果压缩时包含文件夹，需要使用-r选项，和<span class="hljs-built_in">rm</span>、<span class="hljs-built_in">cp</span>等命令的-r效果一致<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205163632263.png" alt="image-20230205163632263"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 语法<br>  unzip [-d] 参数<br><span class="hljs-section"># 选项</span><br>  -d：指定要解压去的位置，同tar的-C选项<br><span class="hljs-section"># 参数</span><br>  被解压的zip压缩包文件<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205163950079.png" alt="image-20230205163950079"></p></blockquote></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建手机文件免费备份仓库</title>
    <link href="/road2dasheng/02_%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%8B%E6%9C%BA%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E4%BB%93%E5%BA%93/"/>
    <url>/road2dasheng/02_%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%8B%E6%9C%BA%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h5 id="时间：13-46"><a href="#时间：13-46" class="headerlink" title="时间：13:46"></a>时间：13:46</h5><h5 id="地点：-苏州-冰雪坞"><a href="#地点：-苏州-冰雪坞" class="headerlink" title="地点： 苏州 _ 冰雪坞"></a>地点： 苏州 _ 冰雪坞</h5><h4 id="一、手机相册的备份"><a href="#一、手机相册的备份" class="headerlink" title="一、手机相册的备份"></a>一、手机相册的备份</h4><blockquote><p><em><strong>问题1：原来存储在云端的照片如何备份？</strong></em></p><blockquote><p>我的做法是将它们都下载下来<br>然后打包成一个压缩文件上传到别的空间大的网盘<br>例如阿里云或者百度云等<br>等以后闲暇的时候再去整理<br>因为整理照片实在是太耗精力和时间<br>所以最好是“分而治之”<br>在从云端把照片下载完，并且也已经上传到别的网盘中去后<br>就可以把云空间的照片删掉了，同时关闭手机端的照片同步功能<br>因为手机一般自带的云空间很小，不适合用来存储照片<br>只能用于同步一些录音、笔记之类的文件<br>当然有钱任性可以忽略上面那些话<br>毕竟会员虽然需要花钱，但是它省心啊。。</p></blockquote></blockquote><blockquote><p><em><strong>问题2：原来存储在手机端的照片如何备份？</strong></em></p><blockquote><p>我的做法是首先要在手机端新建几个相册<br>例如家人、朋友、同学等等<br>首先将手机里的照片分门别类的移动到这些相册里<br>然后可以在手机的文件管理器里将这些相册分别打包成压缩文件<br>接着将他们都上传到空间大的网盘（如阿里云盘，不放心的话可以放在网盘的私密区域）<br>这种备份因为不能做到云端和手机端的实时同步，所以需要按期去完成<br>周期长短看自己喜好，我选择的是每半年更新一次备份<br>同时目前主流的网盘都有相册备份的功能<br>这种备份和自己手动备份的不一样<br>它是和手机相册实时同步的（手机端有了新照片会自动同步到手机备份相册，<br>并且手机端删除的照片云端仍然会继续保存，同样的云端删除的照片手机端也会继续保存）<br>当然如果担心安全问题的话<br>也可以自己选择需要备份的相册（这时候就能看出之前在手机端创建不同相册的好处了）<br>最后在备份好后，手机端的照片尽量不要删除<br>因为网盘端一般都是根据照片名称对照片进行排序<br>最后呈现的效果完全不一样<br>除非上传之前挨个给照片按照你理想中的排序方式进行重命名<br>目前来看应该是个不小的工作量<br>但如果能写个给很多照片重命名的小程序，应该可以接受<br>&#x3D;&#x3D;挖个坑，以后有时间研究一下&#x3D;&#x3D;<br>而手机端是可以选择按照创建时间来对照片进行排序的<br>所以不到必须删不可的时候还是别删吧</p></blockquote></blockquote><h4 id="二、手机微信文件的备份"><a href="#二、手机微信文件的备份" class="headerlink" title="二、手机微信文件的备份"></a>二、手机微信文件的备份</h4><blockquote><p><em><strong>问题1：手机微信和电脑微信的文件能不能同时备份</strong></em></p><blockquote><p>我的理解是因为手机微信和电脑微信是可以同步的<br>并且手机微信是可以选择“自动下载 - 其他设备查看的照片、视频和文件在手机上自动下载”的<br>所以电脑微信的内容其实手机微信都同时保存了<br>因此只需要备份手机微信内容就能够实现两端微信的同时备份</p></blockquote></blockquote><blockquote><p><em><strong>问题2：如何备份手机微信</strong></em></p><blockquote><p>直接贴个链接吧，不想打字了<br><a href="https://zhuanlan.zhihu.com/p/148312766">微信聊天记录备份恢复_知乎-超人</a></p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>个人生产力系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建属于自己的免费云端存储空间</title>
    <link href="/road2dasheng/01_%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BA%91%E7%AB%AF%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/"/>
    <url>/road2dasheng/01_%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BA%91%E7%AB%AF%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h5 id="时间：12-18-am"><a href="#时间：12-18-am" class="headerlink" title="时间：12:18 am"></a>时间：12:18 am</h5><h5 id="地点：-苏州-冰雪坞"><a href="#地点：-苏州-冰雪坞" class="headerlink" title="地点： 苏州 _ 冰雪坞"></a>地点： 苏州 _ 冰雪坞</h5><h4 id="一、技术盘"><a href="#一、技术盘" class="headerlink" title="一、技术盘"></a>一、技术盘</h4><blockquote><p><strong>阿里云盘</strong></p><blockquote><p>因为我是阿里云盘的第一批内测用户（3T，永久有效，但每年需要登录一次）<br>加上学生认证赠送的存储空间（1T，3年有效期）<br>以及其他的福利（例如新用户赠礼）（100G，永久有效）<br>所以我云盘的存储空间达到了惊人的近5T，对于个人用户来说已经足够了<br>而且它目前上传和下载的速度比某知名网盘快得实在太多<br>希望它能一直保持 :smile:<br>因此我将它主要用于大型文件的存储，例如三维建模软件等<br>主要想法是依托它搭建一个自己的技术仓库（<strong>硬实力的积累</strong>）</p></blockquote></blockquote><h4 id="二、知识盘"><a href="#二、知识盘" class="headerlink" title="二、知识盘"></a>二、知识盘</h4><blockquote><p><strong>百度网盘 + (坚果云&amp;iCloud)</strong></p><blockquote><p>虽然没赶上百度网盘的内测，但也遇到了它抢占市场的窗口期<br>薅到了4个T的羊毛 :grinning:（永久有效）<br>但奈何不开会员的下载速度太慢<br>因此我将它主要用于小型文件的存储，例如电子书等<br>坚果云作为国内目前唯一一个支持WebDAV的云服务<br>我主要用它同步一些小的文件，例如Zotero管理的文献资料（每月1G上传，3G下载）<br>而iCloud也是配合Zotero实现文献的多平台同步阅读（ipad做移动端需要下载PDF Expert）<br>关于如何“搭建自己的文献阅读生态”，这个专题我有时间会再详细阐述，先挖个坑<br>回到主题，使用它们的主要想法是依托它们搭建一个自己的知识仓库（<strong>软实力的培养</strong>）</p></blockquote></blockquote><h4 id="三、盘一盘"><a href="#三、盘一盘" class="headerlink" title="三、盘一盘"></a>三、盘一盘</h4><blockquote><p><strong>小米云空间</strong></p><blockquote><p>因为我是小米的铁粉（2014年至今）<br>所以平常用的笔记本、手机、手表、耳机等都是在小米买的<br>也算搭建了一个小生态吧<br>在如今我觉得已经算是比较强大的MIUI+的加持下<br>用户体验相当Nice!!!<br>上面这些其实和小米云服务没啥关系<br>我就是想夸下小米<br>这些年真的一直在进步<br>雷布斯说：“要一直做感动人心的产品”<br>我不知道你们有没有被感动，但我深以为然<br>都说小米一直在模仿苹果或者说抄袭苹果<br>我绝不否认这个观点<br>从外观设计、软件交互等等都能一眼看出<br>但苹果毕竟是行业老大啊<br>开始的时候肯定只能是跟随<br>当然也有可能这辈子我都看不到小米干掉苹果的那一天<br>毕竟乔老爷子是多少年才出一个的人物啊<br>但小米愿意对标苹果，就凭这份勇气我跟了<br>另外话说回来<br>苹果产品什么价，小米产品什么价<br>“还要啥自行车啊”<br>有些激动，主要确实被MIUI+感动到了<br>去年卡成那个鬼样子，短短不到一年时间已经能够这么丝滑<br>真的太开心了，那个熟悉的小米感觉又回来了<br>虽然不知道这种开心能持续多久，但偶尔感受下还是很惬意的<br>好了，回到正题<br>因为我没开会员，我的小米云空间才20G<br>所以它啥也干不了。。<br>哎，我的开心没有了，它来的好快 :disappointed:<br>不对，icloud好像只有5个G :v:</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>个人生产力系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
