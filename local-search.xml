<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言入门视频教程-笔记</title>
    <link href="/road2dasheng/07_C%E8%AF%AD%E8%A8%80%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/road2dasheng/07_C%E8%AF%AD%E8%A8%80%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="C语言视频教程笔记"><a href="#C语言视频教程笔记" class="headerlink" title="C语言视频教程笔记"></a><a href="https://www.bilibili.com/video/BV1vs411n7TH/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">C语言视频教程</a>笔记</h2><h3 id="一、C语言概述"><a href="#一、C语言概述" class="headerlink" title="一、C语言概述"></a>一、C语言概述</h3><h4 id="1-1-什么是C语言"><a href="#1-1-什么是C语言" class="headerlink" title="1.1 什么是C语言"></a>1.1 什么是C语言</h4><blockquote><p>语言是人和人交流，C语言是人和机器交流</p></blockquote><h4 id="1-2-为什么要学习C语言"><a href="#1-2-为什么要学习C语言" class="headerlink" title="1.2 为什么要学习C语言"></a>1.2 为什么要学习C语言</h4><h5 id="1-2-1-C语言的特点"><a href="#1-2-1-C语言的特点" class="headerlink" title="1.2.1 C语言的特点"></a>1.2.1 C语言的特点</h5><blockquote><p>优点：</p><ul><li><p>代码量小</p></li><li><p>执行速度快</p></li><li><p>功能强大</p></li><li><p>编程自由</p></li></ul></blockquote><blockquote><p>缺点：</p><ul><li><p>写代码实现周期长</p></li><li><p>可移植性较差</p></li><li><p>过于自由，经验不足易出错</p></li><li><p>对平台库依赖较多</p></li></ul></blockquote><h5 id="1-2-2-学习C语言的理由"><a href="#1-2-2-学习C语言的理由" class="headerlink" title="1.2.2 学习C语言的理由"></a>1.2.2 学习C语言的理由</h5><blockquote><p><img src="/road2dasheng/img/07/image-20230321181200852.png" alt="image-20230321181200852"></p></blockquote><h5 id="1-2-3-C语言的应用领域"><a href="#1-2-3-C语言的应用领域" class="headerlink" title="1.2.3 C语言的应用领域"></a>1.2.3 C语言的应用领域</h5><blockquote><p>C语言的应用极其广泛，从网站后台，到底层操作系统，从多媒体应用到大型网络游戏，均可使用C语言来开发：</p><ul><li>C语言可以写网站后台程序</li><li>C语言可以专门针对某个主题写出功能强大的程序库</li><li>C语言可以写出大型游戏的引擎</li><li>C语言可以写出另一个语言来</li><li>C语言可以写操作系统和驱动程序，并且只能用C语言编写</li><li>任何设备只要配置了微处理器，就都支持C语言。从微波炉到手机，都是由C语言技术来推动的</li></ul></blockquote><blockquote><p><img src="/road2dasheng/img/07/image-20230321181435144.png" alt="image-20230321181435144"></p></blockquote><h5 id="1-2-4-C语言的简洁"><a href="#1-2-4-C语言的简洁" class="headerlink" title="1.2.4 C语言的简洁"></a>1.2.4 C语言的简洁</h5><blockquote><p>C语言仅有32个关键字，9种控制语句，34种运算符，却能完成无数的功能：</p><p><img src="/road2dasheng/img/07/clip_image002.jpg" alt="2016-05-31_173134"></p><p><img src="/road2dasheng/img/07/clip_image002-16793937499352.jpg" alt="2016-05-31_173306"></p><p><img src="/road2dasheng/img/07/clip_image002-16793937756104.jpg" alt="2016-05-31_173424"></p></blockquote><h5 id="1-2-5-学习C语言的困惑"><a href="#1-2-5-学习C语言的困惑" class="headerlink" title="1.2.5 学习C语言的困惑"></a>1.2.5 学习C语言的困惑</h5><blockquote><p><img src="/road2dasheng/img/07/clip_image002-16793938117976.jpg" alt="2016-05-31_171501"></p></blockquote><h4 id="1-3-第一个C语言程序"><a href="#1-3-第一个C语言程序" class="headerlink" title="1.3 第一个C语言程序"></a>1.3 第一个C语言程序</h4><h5 id="1-3-1-编写C语言代码"><a href="#1-3-1-编写C语言代码" class="headerlink" title="1.3.1 编写C语言代码"></a>1.3.1 编写C语言代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>C语言的源代码文件是一个普通的文本文件，但扩展名必须是.c。</p></blockquote><h5 id="1-3-2-通过gcc编译C代码"><a href="#1-3-2-通过gcc编译C代码" class="headerlink" title="1.3.2 通过gcc编译C代码"></a>1.3.2 通过gcc编译C代码</h5><p>（1）gcc编译器介绍</p><blockquote><ul><li><p>编译器是将易于编写、阅读和维护的高级计算机语言翻译为计算机能解读、运行的低级机器语言的程序。</p></li><li><p>gcc（GNU Compiler Collection，GNU 编译器套件），是由 GNU 开发的编程语言编译器。gcc原本作为GNU操作系统的官方编译器，现已被大多数类Unix操作系统（如Linux、BSD、Mac OS X等）采纳为标准的编译器，gcc同样适用于微软的Windows。</p></li><li><p>gcc最初用于编译C语言，随着项目的发展gcc已经成为了能够编译C、C++、Java、Ada、fortran、Object C、Object C++、Go语言的编译器大家族。</p></li></ul></blockquote><blockquote><p>编译器命令格式</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">gcc [-option1] ... <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br>g++ [-option1] ... <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><ul><li>命令、选项和源文件之间使用空格分隔</li><li>一行命令中可以有零个、一个或多个选项</li><li>文件名可以包含文件的绝对路径，也可以使用相对路径</li><li>如果命令中不包含输出可执行文件的文件名，可执行文件的文件名会自动生成一个默认名，Linux平台为a.out，Windows平台为a.exe</li></ul><p><img src="/road2dasheng/img/07/image-20230321183915817.png" alt="image-20230321183915817"></p></blockquote><p>（2）Windows平台下gcc环境配置</p><blockquote><ul><li>windows命令行界面下，默认是没有gcc编译器，我们需要配置一下环境。由于我们安装了Qt，Qt是一个集成开发环境，内部集成gcc编译器，配置一下环境变量即可使用gcc。</li></ul></blockquote><h5 id="1-3-3-代码分析"><a href="#1-3-3-代码分析" class="headerlink" title="1.3.3 代码分析"></a>1.3.3 代码分析</h5><p>（1）include头文件包含</p><blockquote><ul><li><p>‘#include’的意思是头文件包含，’#include &lt;stdio.h&gt;’代表包含stdio.h这个头文件</p></li><li><p>使用C语言库函数需要提前包含库函数对应的头文件，如这里使用了printf()函数，需要包含stdio.h头文件</p></li><li><p>可以通过man 3 printf查看printf所需的头文件</p></li></ul></blockquote><p>#include&lt; &gt; 与 #include “”的区别：</p><blockquote><ul><li>&lt; &gt; 表示系统直接按系统指定的目录检索</li><li>“” 表示系统先在 “” 指定的路径(没写路径代表当前路径)查找头文件，如果找不到，再按系统指定的目录检索</li></ul></blockquote><p>（2）main函数</p><blockquote><ul><li>一个完整的C语言程序，是由一个、且只能有一个main()函数(又称主函数，必须有)和若干个其他函数结合而成（可选）。</li><li>main函数是C语言程序的入口，程序是从main函数开始执行。</li></ul></blockquote><p>（3）{} 括号，程序体和代码块</p><blockquote><ul><li>{}叫代码块，一个代码块内部可以有一条或者多条语句</li><li>C语言每句可执行代码都是”<strong>;</strong>“分号结尾</li><li>所有的#开头的行，都代表预编译指令，预编译指令行结尾是没有分号的</li><li>所有的可执行语句必须是在代码块里面</li></ul></blockquote><p>（4）注释</p><blockquote><ul><li>&#x2F;&#x2F;叫行注释，注释的内容编译器是忽略的，注释主要的作用是在代码中加一些说明和解释，这样有利于代码的阅读</li><li>&#x2F;**&#x2F;叫块注释</li><li>块注释是C语言标准的注释方法</li><li>行注释是从C++语言借鉴过来的</li></ul></blockquote><p>（5）printf函数</p><blockquote><ul><li>printf是C语言库函数，功能是向标准输出设备输出一个字符串</li><li>printf(“hello world\n”);&#x2F;&#x2F;\n的意思是回车换行</li></ul></blockquote><p>（6） return语句</p><blockquote><ul><li>return代表函数执行完毕，返回return代表函数的终止</li><li>如果main定义的时候前面是int，那么return后面就需要写一个整数；如果main定义的时候前面是void，那么return后面什么也不需要写</li><li>在main函数中return 0代表程序执行成功，return -1代表程序执行失败</li><li>int main()和void main()在C语言中是一样的，但C++只接受int main这种定义方式</li></ul></blockquote><h4 id="1-4-system函数"><a href="#1-4-system函数" class="headerlink" title="1.4 system函数"></a>1.4 system函数</h4><h5 id="1-4-1-system函数的使用"><a href="#1-4-1-system函数的使用" class="headerlink" title="1.4.1 system函数的使用"></a>1.4.1 system函数的使用</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">system</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *command)</span>;<br>功能：在已经运行的程序中执行另外一个外部程序<br>参数：外部可执行程序名字<br>返回值：<br>       成功：<span class="hljs-number">0</span><br>       失败：任意数字<br><br>example:<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    system(<span class="hljs-string">&quot;calc&quot;</span>);<span class="hljs-comment">//windows平台</span><br>    <span class="hljs-comment">//system(&quot;ls&quot;);//Linux平台</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-5-C语言编译过程"><a href="#1-5-C语言编译过程" class="headerlink" title="1.5 C语言编译过程"></a>1.5 C语言编译过程</h4><h5 id="1-5-1-C程序编译步骤"><a href="#1-5-1-C程序编译步骤" class="headerlink" title="1.5.1 C程序编译步骤"></a>1.5.1 C程序编译步骤</h5><blockquote><ul><li><p>1）预处理：宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法</p></li><li><p>2）编译：检查语法，将预处理后文件编译生成汇编文件</p></li><li><p>3）汇编：将汇编文件生成目标文件(二进制文件)</p></li><li><p>4）链接：C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去</p></li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230321191448496.png" alt="image-20230321191448496"></p><h5 id="1-5-2-gcc编译过程"><a href="#1-5-2-gcc编译过程" class="headerlink" title="1.5.2 gcc编译过程"></a>1.5.2 gcc编译过程</h5><p>（1）分布编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">预处理：gcc -E hello.c -o hello.i<br>编译：  gcc -S hello.i -o hello.s<br>汇编：  gcc -c hello.s -o hello.o<br>链接：  gcc    hello.o -o hello<br></code></pre></td></tr></table></figure><blockquote><p><img src="/road2dasheng/img/07/image-20230321220445516.png" alt="image-20230321220445516"></p></blockquote><p>（2）一步编译</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gcc hello.c -o demo <span class="hljs-regexp">//</span>还是经过：预处理、编译、汇编、链接的过程<br></code></pre></td></tr></table></figure><h5 id="1-5-3-查找程序所依赖的动态库"><a href="#1-5-3-查找程序所依赖的动态库" class="headerlink" title="1.5.3 查找程序所依赖的动态库"></a>1.5.3 查找程序所依赖的动态库</h5><blockquote><ul><li>Windows平台下，需要相应软件(Depends.exe)</li></ul></blockquote><h4 id="1-6-CPU内部结构与寄存器（了解）"><a href="#1-6-CPU内部结构与寄存器（了解）" class="headerlink" title="1.6 CPU内部结构与寄存器（了解）"></a>1.6 CPU内部结构与寄存器（了解）</h4><h5 id="1-6-1-64位和32位系统的区别"><a href="#1-6-1-64位和32位系统的区别" class="headerlink" title="1.6.1 64位和32位系统的区别"></a>1.6.1 64位和32位系统的区别</h5><blockquote><ul><li>寄存器是CPU内部最基本的存储单元</li><li>CPU对外是通过总线(地址、控制、数据)来和外部设备交互的，总线的宽度是8位，同时CPU的寄存器也是8位，那么这个CPU就叫8位CPU</li><li>如果总线是32位，寄存器也是32位的，那么这个CPU就是32位CPU</li><li>有一种CPU内部的寄存器是32位的，但总线是16位，准32位CPU</li><li>所有的64位CPU兼容32位的指令，32位要兼容16位的指令，所以在64位的CPU上是可以识别32位的指令</li><li>在64位的CPU构架上运行了64位的软件操作系统，那么这个系统是64位</li><li>在64位的CPU构架上，运行了32位的软件操作系统，那么这个系统就是32位</li><li>64位的软件不能运行在32位的CPU之上</li></ul></blockquote><h5 id="1-6-2-寄存器名字（了解）"><a href="#1-6-2-寄存器名字（了解）" class="headerlink" title="1.6.2 寄存器名字（了解）"></a>1.6.2 寄存器名字（了解）</h5><p><img src="/road2dasheng/img/07/image-20230321221132971.png" alt="image-20230321221132971"></p><h5 id="1-6-3-寄存器、缓存、内存三者关系"><a href="#1-6-3-寄存器、缓存、内存三者关系" class="headerlink" title="1.6.3 寄存器、缓存、内存三者关系"></a>1.6.3 寄存器、缓存、内存三者关系</h5><blockquote><ul><li>按与CPU远近来分，离得最近的是寄存器，然后缓存(CPU缓存)，最后内存，即CPU&lt;—&gt;寄存器&lt;—&gt; 缓存 &lt;—&gt; 内存。</li><li>CPU计算时，先预先把要用的数据从硬盘读到内存，然后再把即将要用的数据读到寄存器。于是 CPU&lt;—&gt;寄存器&lt;—&gt;内存，这就是它们之间的信息交换。</li><li>为什么有缓存呢？因为如果经常操作内存中的同一地址的数据，就会影响速度。于是就在寄存器与内存之间设置一个缓存。因为从缓存提取的速度远高于内存。当然缓存的价格肯定远远高于内存，不然的话，机器里就没有内存的存在。</li></ul></blockquote><h4 id="1-7-汇编语言"><a href="#1-7-汇编语言" class="headerlink" title="1.7 汇编语言"></a>1.7 汇编语言</h4><h4 id="1-8-集成开发环境IDE"><a href="#1-8-集成开发环境IDE" class="headerlink" title="1.8 集成开发环境IDE"></a>1.8 集成开发环境IDE</h4><blockquote><ul><li>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。</li></ul></blockquote><h5 id="1-8-1-Qt-Creator"><a href="#1-8-1-Qt-Creator" class="headerlink" title="1.8.1 Qt Creator"></a>1.8.1 Qt Creator</h5><blockquote><ul><li>Qt Creator是跨平台的 Qt IDE， Qt Creator 是 Qt 被 Nokia 收购后推出的一款新的轻量级集成开发环境（IDE）。此 IDE 能够跨平台运行，支持的系统包括 Linux（32 位及 64 位）、Mac OS X 以及 Windows。根据官方描述，Qt Creator 的设计目标是使开发人员能够利用 Qt 这个应用程序框架更加快速及轻易的完成开发任务。</li></ul></blockquote><h5 id="1-8-2-Microsoft-Visual-Studio"><a href="#1-8-2-Microsoft-Visual-Studio" class="headerlink" title="1.8.2 Microsoft Visual Studio"></a>1.8.2 Microsoft Visual Studio</h5><blockquote><ul><li>Microsoft Visual Studio（简称VS）是美国微软公司的开发工具包系列产品。VS是一个基本完整的开发工具集，它包括了整个软件生命周期中所需要的大部分工具，如UML工具、代码管控工具、集成开发环境(IDE)等等,所写的目标代码适用于微软支持的所有平台。Visual Studio是目前最流行的Windows平台应用程序的集成开发环境。</li></ul></blockquote><hr><h3 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h3><h4 id="2-1-常量与变量"><a href="#2-1-常量与变量" class="headerlink" title="2.1 常量与变量"></a>2.1 常量与变量</h4><h5 id="2-1-1-关键字"><a href="#2-1-1-关键字" class="headerlink" title="2.1.1 关键字"></a>2.1.1 关键字</h5><blockquote><p><img src="/road2dasheng/img/07/clip_image002-16794084935541.jpg" alt="2016-06-01_125457"></p></blockquote><h5 id="2-1-2-数据类型"><a href="#2-1-2-数据类型" class="headerlink" title="2.1.2 数据类型"></a>2.1.2 数据类型</h5><blockquote><p>数据类型的作用：编译器预算对象（变量）分配的内存空间大小</p><p><img src="/road2dasheng/img/07/clip_image002-16794085492393.jpg" alt="2016-06-01_125610"></p></blockquote><h5 id="2-1-3-常量"><a href="#2-1-3-常量" class="headerlink" title="2.1.3 常量"></a>2.1.3 常量</h5><blockquote><ul><li>在程序运行过程中，其值不能被改变的量</li><li>常量一般出现在表达式或赋值语句中</li></ul></blockquote><blockquote><p><img src="/road2dasheng/img/07/image-20230321222341675.png" alt="image-20230321222341675"></p></blockquote><h5 id="2-1-4-变量"><a href="#2-1-4-变量" class="headerlink" title="2.1.4 变量"></a>2.1.4 变量</h5><p>（1）变量</p><blockquote><ul><li>在程序运行过程中，其值可以改变</li><li>&#x3D;&#x3D;变量在使用前必须先定义，定义变量前必须有相应的数据类型&#x3D;&#x3D;</li></ul></blockquote><p>（2）标识符命名规则</p><blockquote><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul></blockquote><p>（3）特点</p><blockquote><ul><li>变量在编译时为其分配相应的内存空间</li><li>可以通过其名字和地址访问相应内存</li></ul></blockquote><blockquote><p><img src="/road2dasheng/img/07/clip_image002-16794088746195.jpg" alt="2016-05-29_200452_副本"></p></blockquote><p>（4）声明和定义区别</p><blockquote><ul><li>声明变量不需要建立存储空间，如：extern int a;</li><li>定义变量需要建立存储空间，如：int b;</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//extern 关键字只做声明，不能做任何定义</span><br>    <span class="hljs-comment">//声明一个变量a，a在这里没有建立存储空间</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> a;<br>    a = <span class="hljs-number">10</span>;<span class="hljs-comment">//err,没有空间，就不可以赋值</span><br>    <br>    <span class="hljs-type">int</span> b=<span class="hljs-number">10</span>; <span class="hljs-comment">//定义一个变量b,b的类型为int,b赋值为10</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>从广义的角度来讲声明中包含着定义，即定义是声明的一个特例，所以并非所有的声明都是定义</p><ul><li>int b 它既是声明，同时又是定义</li><li>对于 extern b来讲它只是声明不是定义</li></ul><p>一般的情况下，把建立存储空间的声明称之为“定义”，而把不需要建立存储空间的声明称之为“声明”。</p></blockquote><h4 id="2-2-整型：int"><a href="#2-2-整型：int" class="headerlink" title="2.2 整型：int"></a>2.2 整型：int</h4><h5 id="2-2-1-整型变量的定义和输出"><a href="#2-2-1-整型变量的定义和输出" class="headerlink" title="2.2.1 整型变量的定义和输出"></a>2.2.1 整型变量的定义和输出</h5><p><img src="/road2dasheng/img/07/image-20230321224018975.png" alt="image-20230321224018975"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">123</span>; <span class="hljs-comment">//定义变量a，以10进制方式赋值为123</span><br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0567</span>; <span class="hljs-comment">//定义变量b，以8进制方式赋值为0567</span><br>    <span class="hljs-type">int</span> c = <span class="hljs-number">0xabc</span>; <span class="hljs-comment">//定义变量c，以16进制方式赋值为0xabc</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8进制：b = %o\n&quot;</span>, b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;10进制：b = %d\n&quot;</span>, b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;16进制：c = %x\n&quot;</span>, c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;16进制：c = %X\n&quot;</span>, c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;10进制：c = %d\n&quot;</span>, c);<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> d = <span class="hljs-number">0xffffffff</span>; <span class="hljs-comment">//定义无符号int变量d，以16进制方式赋值</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;有符号方式打印：d = %d\n&quot;</span>, d);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无符号方式打印：d = %u\n&quot;</span>, d);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-2-整型变量的输入"><a href="#2-2-2-整型变量的输入" class="headerlink" title="2.2.2 整型变量的输入"></a>2.2.2 整型变量的输入</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入a的值：&quot;</span>);<br><br><span class="hljs-comment">//不要加“\n”</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a); <span class="hljs-comment">//打印a的值</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-3-short、int、long、longlong"><a href="#2-2-3-short、int、long、longlong" class="headerlink" title="2.2.3 short、int、long、longlong"></a>2.2.3 short、int、long、longlong</h5><p><img src="/road2dasheng/img/07/image-20230321224649437.png" alt="image-20230321224649437"></p><blockquote><ul><li>需要注意的是，整型数据在内存中占的字节数与所选择的操作系统有关。虽然 C 语言标准中没有明确规定整型数据的长度，但 long 类型整数的长度不能短于 int 类型， short 类型整数的长度不能长于 int 类型。</li><li>当一个小的数据类型赋值给一个大的数据类型，不会出错，因为编译器会自动转化。但当一个大的类型赋值给一个小的数据类型，那么就可能丢失高位。</li></ul><p><img src="/road2dasheng/img/07/image-20230321224924453.png" alt="image-20230321224924453"><img src="/road2dasheng/img/07/image-20230321224955016.png" alt="image-20230321224955016"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">short</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> c = <span class="hljs-number">10l</span>; <span class="hljs-comment">//或者10L</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> d = <span class="hljs-number">10ll</span>; <span class="hljs-comment">//或者10LL</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(a) = %u\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(a));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(b) = %u\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(b));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(c) = %u\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(c));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(c) = %u\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(d));<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;short a = %hd\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;int b = %d\n&quot;</span>, b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long c = %ld\n&quot;</span>, c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;long long d = %lld\n&quot;</span>, d);<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> a2 = <span class="hljs-number">20u</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> b2 = <span class="hljs-number">20u</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> c2= <span class="hljs-number">20ul</span>; <br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> d2 = <span class="hljs-number">20ull</span>; <br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unsigned short a = %hu\n&quot;</span>, a2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unsigned int b = %u\n&quot;</span>, b2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unsigned long c = %lu\n&quot;</span>, c2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;unsigned long long d = %llu\n&quot;</span>, d2);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-4-有符号数和无符号数的区别"><a href="#2-2-4-有符号数和无符号数的区别" class="headerlink" title="2.2.4 有符号数和无符号数的区别"></a>2.2.4 有符号数和无符号数的区别</h5><p>（1）有符号数</p><blockquote><ul><li>有符号数是最高位为符号位，0代表正数，1代表负数</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">signed</span> <span class="hljs-type">int</span> a = <span class="hljs-number">-1089474374</span>; <span class="hljs-comment">//定义有符号整型变量a</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%X\n&quot;</span>, a); <span class="hljs-comment">//结果为 BF0FF0BA</span><br><br><span class="hljs-comment">//B    F    0    F    F    0    B A</span><br><span class="hljs-comment">//1011 1111 0000 1111 1111 0000 1011 1010</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）无符号数</p><blockquote><ul><li>无符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。</li><li>当我们写程序要处理一个不可能出现负值的时候，一般用无符号数，这样可以增大数的表达最大值。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = <span class="hljs-number">3236958022</span>; <span class="hljs-comment">//定义无符号整型变量a</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%X\n&quot;</span>, a); <span class="hljs-comment">//结果为 C0F00F46</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）有符号和无符号整型取值范围</p><p><img src="/road2dasheng/img/07/image-20230321230117853.png" alt="image-20230321230117853"></p><h4 id="2-3-sizeof关键字"><a href="#2-3-sizeof关键字" class="headerlink" title="2.3 sizeof关键字"></a>2.3 sizeof关键字</h4><blockquote><ul><li>sizeof不是函数，所以不需要包含任何头文件，它的功能是计算一个数据类型的大小，单位为字节</li><li>sizeof的返回值为size_t</li><li>size_t类型在32位操作系统下是unsigned int，是一个无符号的整数</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b = <span class="hljs-keyword">sizeof</span>(a);<span class="hljs-comment">//sizeof得到指定值占用内存的大小，单位：字节</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d\n&quot;</span>, b);<br><br><span class="hljs-type">size_t</span> c = <span class="hljs-keyword">sizeof</span>(a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c = %u\n&quot;</span>, c);<span class="hljs-comment">//用无符号数的方式输出c的值</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-字符型：char"><a href="#2-4-字符型：char" class="headerlink" title="2.4 字符型：char"></a>2.4 字符型：char</h4><h5 id="2-4-1-字符变量的定义和输出"><a href="#2-4-1-字符变量的定义和输出" class="headerlink" title="2.4.1 字符变量的定义和输出"></a>2.4.1 字符变量的定义和输出</h5><blockquote><ul><li>字符型变量用于存储一个单一字符，在 C 语言中用 char 表示，其中每个字符变量都会占用 1 个字节。在给字符型变量赋值时，需要用一对英文半角格式的单引号(‘ ‘)把字符括起来。</li><li>字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的 ASCII 编码放到变量的存储单元中。&#x3D;&#x3D;char的本质就是一个1字节大小的整型。&#x3D;&#x3D;</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(ch) = %u\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(ch));<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ch[%%c] = %c\n&quot;</span>, ch); <span class="hljs-comment">//打印字符</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ch[%%d] = %d\n&quot;</span>, ch); <span class="hljs-comment">//打印‘a’ ASCII的值</span><br><br><span class="hljs-type">char</span> A = <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-type">char</span> a = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<span class="hljs-comment">//97</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A = %d\n&quot;</span>, A);<span class="hljs-comment">//65</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A = %c\n&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-number">32</span>); <span class="hljs-comment">//小写a转大写A</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %c\n&quot;</span>, <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">32</span>); <span class="hljs-comment">//大写A转小写a</span><br><br>ch = <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;空字符：%d\n&quot;</span>, ch); <span class="hljs-comment">//空字符ASCII的值为32</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A = %c\n&quot;</span>, <span class="hljs-string">&#x27;a&#x27;</span> - <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">//小写a转大写A</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %c\n&quot;</span>, <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">//大写A转小写a</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-2-字符变量的输入"><a href="#2-4-2-字符变量的输入" class="headerlink" title="2.4.2 字符变量的输入"></a>2.4.2 字符变量的输入</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入ch的值：&quot;</span>);<br><br><span class="hljs-comment">//不要加“\n”</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ch = %c\n&quot;</span>, ch); <span class="hljs-comment">//打印ch的字符</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-3-ASCII码表"><a href="#2-4-3-ASCII码表" class="headerlink" title="2.4.3 ASCII码表"></a>2.4.3 ASCII码表</h5><p><img src="/road2dasheng/img/07/image-20230322002314728.png" alt="image-20230322002314728"></p><blockquote><p>ASCII 码大致由以下两部分组成：</p><ul><li><p>ASCII 非打印控制字符： ASCII 表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备。</p></li><li><p>ASCII 打印字符：数字 32-126 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。数字 127 代表 Del 命令。</p></li></ul></blockquote><h5 id="2-4-4-转义字符"><a href="#2-4-4-转义字符" class="headerlink" title="2.4.4 转义字符"></a>2.4.4 转义字符</h5><p><img src="/road2dasheng/img/07/image-20230322002513256.png" alt="image-20230322002513256"></p><blockquote><ul><li>注意：红色字体标注的为不可打印字符。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\refg\n&quot;</span>); <span class="hljs-comment">//\r切换到句首， \n为换行键</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\befg\n&quot;</span>);<span class="hljs-comment">//\b为退格键， \n为换行键</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-string">&#x27;\123&#x27;</span>);<span class="hljs-comment">// &#x27;\123&#x27;为8进制转义字符，0123对应10进制数为83</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-string">&#x27;\x23&#x27;</span>);<span class="hljs-comment">// &#x27;\x23&#x27;为16进制转义字符，0x23对应10进制数为35</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-实型-浮点型-：float、double"><a href="#2-5-实型-浮点型-：float、double" class="headerlink" title="2.5 实型(浮点型)：float、double"></a>2.5 实型(浮点型)：float、double</h4><blockquote><ul><li>实型变量也可以称为浮点型变量，浮点型变量是用来存储小数数值的。</li><li>在C语言中， 浮点型变量分为两种： 单精度浮点数(float)、 双精度浮点数(double)， 但是double型变量所表示的浮点数比 float 型变量更精确。</li><li>由于浮点型变量是由有限的存储单元组成的，因此只能提供有限的有效数字。在有效位以外的数字将被舍去，这样可能会产生一些误差。</li><li>不以f结尾的常量是double类型，以f结尾的常量(如3.14f)是float类型。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//传统方式赋值</span><br><span class="hljs-type">float</span> a = <span class="hljs-number">3.14f</span>; <span class="hljs-comment">//或3.14F</span><br><span class="hljs-type">double</span> b = <span class="hljs-number">3.14</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %f\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %lf\n&quot;</span>, b);<br><br><span class="hljs-comment">//科学法赋值</span><br>a = <span class="hljs-number">3.2e3</span>f; <span class="hljs-comment">//3.2*1000 = 3200，e可以写E</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a1 = %f\n&quot;</span>, a);<br><br>a = <span class="hljs-number">100e-3</span>f; <span class="hljs-comment">//100*0.001 = 0.1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a2 = %f\n&quot;</span>, a);<br><br>a = <span class="hljs-number">3.1415926f</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a3 = %f\n&quot;</span>, a); <span class="hljs-comment">//结果为3.141593</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-6-进制"><a href="#2-6-进制" class="headerlink" title="2.6 进制"></a>2.6 进制</h4><blockquote><ul><li>进制也就是进位制，是人们规定的一种进位方法。 对于任何一种进制—X进制，就表示某一位置上的数运算时是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</li></ul></blockquote><h5 id="2-6-1-二进制"><a href="#2-6-1-二进制" class="headerlink" title="2.6.1 二进制"></a>2.6.1 二进制</h5><blockquote><ul><li>二进制是计算技术中广泛采用的一种数制。</li><li>二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。</li><li>当前的计算机系统使用的基本上是二进制系统，&#x3D;&#x3D;数据在计算机中主要是以补码的形式存储的。&#x3D;&#x3D;</li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230322145156030.png" alt="image-20230322145156030"></p><p><img src="/road2dasheng/img/07/image-20230322145422200.png" alt="image-20230322145422200"></p><h5 id="2-6-2-八进制"><a href="#2-6-2-八进制" class="headerlink" title="2.6.2 八进制"></a>2.6.2 八进制</h5><blockquote><ul><li>八进制，Octal，缩写OCT或O，一种以8为基数的计数法</li><li>一些编程语言中常常以数字0开始表明该数字是八进制。</li><li>八进制的数和二进制数可以按位对应（八进制一位对应二进制三位），因此常应用在计算机语言中。</li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230322145614503.png" alt="image-20230322145614503"></p><h5 id="2-6-3-十六进制"><a href="#2-6-3-十六进制" class="headerlink" title="2.6.3 十六进制"></a>2.6.3 十六进制</h5><blockquote><ul><li>十六进制（英文名称：Hexadecimal），同我们日常生活中的表示法不一样，它由0-9，A-F组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9，A-F对应10-15。</li><li>十六进制的数和二进制数可以按位对应（十六进制一位对应二进制四位），因此常应用在计算机语言中。</li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230322145730747.png" alt="image-20230322145730747"></p><h5 id="2-6-4-C语言如何表示相应进制数"><a href="#2-6-4-C语言如何表示相应进制数" class="headerlink" title="2.6.4 C语言如何表示相应进制数"></a>2.6.4 C语言如何表示相应进制数</h5><p><img src="/road2dasheng/img/07/image-20230322145828293.png" alt="image-20230322145828293"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">123</span>;<span class="hljs-comment">//十进制方式赋值</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">0123</span>;<span class="hljs-comment">//八进制方式赋值， 以数字0开头</span><br><span class="hljs-type">int</span> c = <span class="hljs-number">0xABC</span>;<span class="hljs-comment">//十六进制方式赋值</span><br><br><span class="hljs-comment">//如果在printf中输出一个十进制数那么用%d，八进制用%o，十六进制是%x</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;十进制：%d\n&quot;</span>,a );<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;八进制：%o\n&quot;</span>, b);<span class="hljs-comment">//%o,为字母o,不是数字</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;十六进制：%x\n&quot;</span>, c);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-7-计算机内存数值存储方式"><a href="#2-7-计算机内存数值存储方式" class="headerlink" title="2.7 计算机内存数值存储方式"></a>2.7 计算机内存数值存储方式</h4><h5 id="2-7-1-原码"><a href="#2-7-1-原码" class="headerlink" title="2.7.1 原码"></a>2.7.1 原码</h5><blockquote><p>一个数的原码(原始的二进制码)有如下特点：</p><ul><li><p>最高位做为符号位，0表示正,为1表示负</p></li><li><p>其它数值部分就是数值本身绝对值的二进制数</p></li><li><p>负数的原码是在其绝对值的基础上，最高位变为1</p></li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230322150131305.png" alt="image-20230322150131305"></p><blockquote><p>原码表示法简单易懂，与带符号数本身转换方便，只要符号还原即可，但当两个正数相减或不同符号数相加时，必须比较两个数哪个绝对值大，才能决定谁减谁，才能确定结果是正还是负，所以原码不便于加减运算。</p></blockquote><h5 id="2-7-2-反码"><a href="#2-7-2-反码" class="headerlink" title="2.7.2 反码"></a>2.7.2 反码</h5><blockquote><ul><li>对于正数，反码与原码相同</li><li>对于负数，符号位不变，其它部分取反(1变0,0变1)</li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230322150317982.png" alt="image-20230322150317982"></p><blockquote><p>反码运算也不方便，通常用来作为求补码的中间过渡。</p></blockquote><h5 id="2-7-3-补码"><a href="#2-7-3-补码" class="headerlink" title="2.7.3 补码"></a>2.7.3 补码</h5><p>&#x3D;&#x3D;在计算机系统中，数值一律用补码来存储&#x3D;&#x3D;</p><blockquote><p>补码特点：</p><ul><li><p>对于正数，原码、反码、补码相同</p></li><li><p>对于负数，其补码为它的反码加1</p></li><li><p>补码符号位不动，其他位求反，最后整个数加1，得到原码</p></li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230322150538276.png" alt="image-20230322150538276"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span>  a = <span class="hljs-number">-15</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, a);<br><span class="hljs-comment">//结果为 fffffff1</span><br><span class="hljs-comment">//fffffff1对应的二进制：1111 1111 1111 1111 1111 1111 1111 0001</span><br><span class="hljs-comment">//符号位不变，其它取反：1000 0000 0000 0000 0000 0000 0000 1110</span><br><span class="hljs-comment">//上面加1：1000 0000 0000 0000 0000 0000 0000 1111  最高位1代表负数，就是-15</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-7-4-补码的意义"><a href="#2-7-4-补码的意义" class="headerlink" title="2.7.4 补码的意义"></a>2.7.4 补码的意义</h5><p><img src="/road2dasheng/img/07/image-20230322151334425.png" alt="image-20230322151334425"></p><p><img src="/road2dasheng/img/07/image-20230322151355561.png" alt="image-20230322151355561"></p><blockquote><p>在计算机系统中，数值一律用补码来存储，主要原因是：</p><ul><li>统一了零的编码</li><li>将符号位和其它位统一处理</li><li>将减法运算转变为加法运算</li><li>两个用补码表示的数相加时，如果最高位(符号位)有进位，则进位被舍弃</li></ul></blockquote><h5 id="2-7-5-数值溢出"><a href="#2-7-5-数值溢出" class="headerlink" title="2.7.5 数值溢出"></a>2.7.5 数值溢出</h5><blockquote><ul><li>当超过一个数据类型能够存放最大的范围时，数值会溢出。</li><li>有符号位最高位溢出的区别：符号位溢出会导致数的正负发生改变，但最高位的溢出会导致最高位丢失。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> ch;<br><br><span class="hljs-comment">//符号位溢出会导致数的正负发生改变</span><br>ch = <span class="hljs-number">0x7f</span> + <span class="hljs-number">2</span>; <span class="hljs-comment">//127+2</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ch);<br><span class="hljs-comment">//0111 1111</span><br><span class="hljs-comment">//+2后 1000 0001，这是负数补码，其原码为 1111 1111，结果为-127</span><br><br><span class="hljs-comment">//最高位的溢出会导致最高位丢失</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ch2;<br>ch2 = <span class="hljs-number">0xff</span>+<span class="hljs-number">1</span>; <span class="hljs-comment">//255+1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>, ch2);<br><span class="hljs-comment">//  1111 1111</span><br><span class="hljs-comment">//+1后 10000 0000， char只有8位最高位的溢出，结果为0000 0000，十进制为0</span><br><br>ch2 = <span class="hljs-number">0xff</span> + <span class="hljs-number">2</span>; <span class="hljs-comment">//255+2</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>, ch2);<br><span class="hljs-comment">//  1111 1111</span><br><span class="hljs-comment">//+2后 10000 0001， char只有8位最高位的溢出，结果为0000 0001，十进制为1</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-8-类型限定符"><a href="#2-8-类型限定符" class="headerlink" title="2.8 类型限定符"></a>2.8 类型限定符</h4><p><img src="/road2dasheng/img/07/image-20230322152515285.png" alt="image-20230322152515285"></p><h4 id="2-9-字符串格式化输出和输入"><a href="#2-9-字符串格式化输出和输入" class="headerlink" title="2.9 字符串格式化输出和输入"></a>2.9 字符串格式化输出和输入</h4><h5 id="2-9-1-字符串常量"><a href="#2-9-1-字符串常量" class="headerlink" title="2.9.1 字符串常量"></a>2.9.1 字符串常量</h5><blockquote><ul><li>字符串是内存中一段连续的char空间，以’\0’(数字0)结尾</li><li>字符串常量是由双引号括起来的字符序列，如“china”、“C program”，“$12.5”等都是合法的字符串常量。</li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230322152941551.png" alt="image-20230322152941551"></p><h5 id="2-9-2-printf函数和putchar函数"><a href="#2-9-2-printf函数和putchar函数" class="headerlink" title="2.9.2 printf函数和putchar函数"></a>2.9.2 printf函数和putchar函数</h5><blockquote><ul><li>printf是输出一个字符串，putchar输出一个char</li></ul></blockquote><p><img src="/road2dasheng/img/07/image-20230322153341774.png" alt="image-20230322153341774"></p><p><img src="/road2dasheng/img/07/image-20230322153637724.png" alt="image-20230322153637724"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<span class="hljs-comment">//格式化输出一个字符串</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;a);<span class="hljs-comment">//输出变量a在内存中的地址编号</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%%d\n&quot;</span>);<br><br><span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">putchar</span>(c);<span class="hljs-comment">//putchar只有一个参数，就是要输出的char</span><br><span class="hljs-type">long</span> a2 = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%ld, %lx, %lo\n&quot;</span>, a2, a2, a2);<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a3 = <span class="hljs-number">1000</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld, %llx, %llo\n&quot;</span>, a3, a3, a3);<br><br><span class="hljs-type">int</span> abc = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;abc = &#x27;%6d&#x27;\n&quot;</span>, abc);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;abc = &#x27;%-6d&#x27;\n&quot;</span>, abc);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;abc = &#x27;%06d&#x27;\n&quot;</span>, abc);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;abc = &#x27;%-06d&#x27;\n&quot;</span>, abc);<br><br><span class="hljs-type">double</span> d = <span class="hljs-number">12.3</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d = \&#x27; %-10.3lf \&#x27;\n&quot;</span>, d);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-9-3-scanf函数与getchar函数"><a href="#2-9-3-scanf函数与getchar函数" class="headerlink" title="2.9.3 scanf函数与getchar函数"></a>2.9.3 scanf函数与getchar函数</h5><blockquote><ul><li>getchar是从标准输入设备读取一个char</li><li>scanf通过%转义的方式可以得到用户通过标准输入设备输入的数据</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> ch1;<br><span class="hljs-type">char</span> ch2;<br><span class="hljs-type">char</span> ch3;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入ch1的字符：&quot;</span>);<br>ch1 = getchar();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ch1 = %c\n&quot;</span>, ch1);<br><br>getchar(); <span class="hljs-comment">//测试此处getchar()的作用</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入ch2的字符：&quot;</span>);<br>ch2 = getchar();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\&#x27;ch2 = %ctest\&#x27;\n&quot;</span>, ch2);<br><br>getchar(); <span class="hljs-comment">//测试此处getchar()的作用</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入ch3的字符：&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch3);<span class="hljs-comment">//这里第二个参数一定是变量的地址，而不是变量名</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ch3 = %c\n&quot;</span>, ch3);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入a的值：&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入b的值：&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d\n&quot;</span>, b);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="三、运算符与表达式"><a href="#三、运算符与表达式" class="headerlink" title="三、运算符与表达式"></a>三、运算符与表达式</h3><h4 id="3-1-常用运算符分类"><a href="#3-1-常用运算符分类" class="headerlink" title="3.1 常用运算符分类"></a>3.1 常用运算符分类</h4><p><img src="/road2dasheng/img/07/image-20230322154524878.png" alt="image-20230322154524878"></p><h4 id="3-2-算术运算符"><a href="#3-2-算术运算符" class="headerlink" title="3.2 算术运算符"></a>3.2 算术运算符</h4><p><img src="/road2dasheng/img/07/image-20230322154609793.png" alt="image-20230322154609793"></p><h4 id="3-3-赋值运算符"><a href="#3-3-赋值运算符" class="headerlink" title="3.3 赋值运算符"></a>3.3 赋值运算符</h4><p><img src="/road2dasheng/img/07/image-20230322154637522.png" alt="image-20230322154637522"></p><h4 id="3-4-比较运算符"><a href="#3-4-比较运算符" class="headerlink" title="3.4 比较运算符"></a>3.4 比较运算符</h4><p><img src="/road2dasheng/img/07/image-20230322154724872.png" alt="image-20230322154724872"></p><h4 id="3-5-逻辑运算符"><a href="#3-5-逻辑运算符" class="headerlink" title="3.5 逻辑运算符"></a>3.5 逻辑运算符</h4><p><img src="/road2dasheng/img/07/image-20230322154805925.png" alt="image-20230322154805925"></p><h4 id="3-6-运算符优先级"><a href="#3-6-运算符优先级" class="headerlink" title="3.6 运算符优先级"></a>3.6 运算符优先级</h4><p><img src="/road2dasheng/img/07/image-20230322154906342.png" alt="image-20230322154906342"><img src="/road2dasheng/img/07/image-20230322154930715.png" alt="image-20230322154930715"><img src="/road2dasheng/img/07/image-20230322155021104.png" alt="image-20230322155021104"></p><h4 id="3-7-类型转换"><a href="#3-7-类型转换" class="headerlink" title="3.7 类型转换"></a>3.7 类型转换</h4><p>数据有不同的类型，不同类型数据之间进行混合运算时必然涉及到类型的转换问题。转换的方法有两种：</p><blockquote><ul><li>自动转换(隐式转换)：遵循一定的规则,由编译系统自动完成</li><li>强制类型转换：把表达式的运算结果强制转换成所需的数据类型</li></ul></blockquote><p>类型转换的原则：占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换，以保证精度不降低。</p><blockquote><p><img src="/road2dasheng/img/07/image-20230322155511986.png" alt="image-20230322155511986"></p></blockquote><h5 id="3-7-1-隐式转换"><a href="#3-7-1-隐式转换" class="headerlink" title="3.7.1 隐式转换"></a>3.7.1 隐式转换</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s1=%d\n&quot;</span>, num / <span class="hljs-number">2</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s2=%lf\n&quot;</span>, num / <span class="hljs-number">2.0</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-7-2-强制转换"><a href="#3-7-2-强制转换" class="headerlink" title="3.7.2 强制转换"></a>3.7.2 强制转换</h5><p>强制类型转换指的是使用强制类型转换运算符，将一个变量或表达式转化成所需的类型，其基本语法格式如下所示：</p><p><img src="/road2dasheng/img/07/image-20230322155955880.png" alt="image-20230322155955880"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">float</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>x = <span class="hljs-number">3.6f</span>;<br><br>i = x;<span class="hljs-comment">//x为实型, i为整型，直接赋值会有警告</span><br>i = (<span class="hljs-type">int</span>)x;<span class="hljs-comment">//使用强制类型转换</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%f, i=%d\n&quot;</span>, x, i);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="四、程序流程结构"><a href="#四、程序流程结构" class="headerlink" title="四、程序流程结构"></a>四、程序流程结构</h3><h4 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h4><blockquote><p>C语言支持最基本的三种程序运行结构：顺序结构、选择结构、循环结构。</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据是否满足条件，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul></blockquote><h4 id="4-2-选择结构"><a href="#4-2-选择结构" class="headerlink" title="4.2 选择结构"></a>4.2 选择结构</h4><h5 id="4-2-1-if语句"><a href="#4-2-1-if语句" class="headerlink" title="4.2.1 if语句"></a>4.2.1 if语句</h5><p><img src="/road2dasheng/img/07/image-20230322160450695.png" alt="image-20230322160450695"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">if</span> (a &gt; b)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="4-2-2-if…else语句"><a href="#4-2-2-if…else语句" class="headerlink" title="4.2.2 if…else语句"></a>4.2.2 if…else语句</h5><p><img src="/road2dasheng/img/07/image-20230322160629798.png" alt="image-20230322160629798"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">if</span> (a &gt; b)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, b);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-3-if…else-if…else语句"><a href="#4-2-3-if…else-if…else语句" class="headerlink" title="4.2.3 if…else if…else语句"></a>4.2.3 if…else if…else语句</h5><p><img src="/road2dasheng/img/07/image-20230322160816489.png" alt="image-20230322160816489"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;a);<br><br><span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;个位\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">100</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;十位\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">1000</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;百位\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;很大\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-4-三目运算符"><a href="#4-2-4-三目运算符" class="headerlink" title="4.2.4 三目运算符"></a>4.2.4 三目运算符</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> c;<br><br><span class="hljs-keyword">if</span> (a &gt; b)<br>&#123;<br>c = a;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>c = b;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c1 = %d\n&quot;</span>, c);<br><br>a = <span class="hljs-number">1</span>;<br>b = <span class="hljs-number">2</span>;<br>c = ( a &gt; b ? a : b );<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c2 = %d\n&quot;</span>, c);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2-5-switch语句"><a href="#4-2-5-switch语句" class="headerlink" title="4.2.5 switch语句"></a>4.2.5 switch语句</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> c;<br>c = getchar();<br><br><span class="hljs-keyword">switch</span> (c) <span class="hljs-comment">//参数只能是整型变量</span><br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//switch遇到break就中断了</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not OK\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<span class="hljs-comment">//如果上面的条件都不满足，那么执行default</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;are u ok?\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-循环结构"><a href="#4-3-循环结构" class="headerlink" title="4.3 循环结构"></a>4.3 循环结构</h4><h5 id="4-3-1-while语句"><a href="#4-3-1-while语句" class="headerlink" title="4.3.1 while语句"></a>4.3.1 while语句</h5><p><img src="/road2dasheng/img/07/image-20230322161627344.png" alt="image-20230322161627344"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">while</span> (a &gt; <span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-3-2-do…while语句"><a href="#4-3-2-do…while语句" class="headerlink" title="4.3.2 do…while语句"></a>4.3.2 do…while语句</h5><p><img src="/road2dasheng/img/07/image-20230322161717165.png" alt="image-20230322161717165"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>a++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br>&#125; <span class="hljs-keyword">while</span> (a &lt; <span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-3-3-for语句"><a href="#4-3-3-for语句" class="headerlink" title="4.3.3 for语句"></a>4.3.3 for语句</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++)<br>&#123;<br>sum += i;<br><br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum = %d\n&quot;</span>, sum);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-3-4-嵌套循环"><a href="#4-3-4-嵌套循环" class="headerlink" title="4.3.4 嵌套循环"></a>4.3.4 嵌套循环</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i, j, k;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++)<br>&#123;<br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">10</span>; k++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>num++;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num = %d\n&quot;</span>, num);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-跳转语句break、continue、goto"><a href="#4-4-跳转语句break、continue、goto" class="headerlink" title="4.4 跳转语句break、continue、goto"></a>4.4 跳转语句break、continue、goto</h4><h5 id="4-4-1-break语句"><a href="#4-4-1-break语句" class="headerlink" title="4.4.1 break语句"></a>4.4.1 break语句</h5><blockquote><p>在switch条件语句和循环语句中都可以使用break语句：</p><ul><li>当它出现在switch条件语句中时，作用是终止某个case并跳出switch结构</li><li>当它出现在循环语句中，作用是跳出当前内循环语句，执行后面的代码</li><li>当它出现在嵌套循环语句中，跳出最近的内循环语句，执行后面的代码</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>i++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, i);<br><br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出while循环</span><br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">10</span>; m++)<br>&#123;<br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">10</span>; n++)<br>&#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">5</span>)<br>&#123;<br>flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出for (n = 0; n &lt; 10; n++)</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出for (m = 0; m &lt; 10; m++)</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-4-2-continue语句"><a href="#4-4-2-continue语句" class="headerlink" title="4.4.2 continue语句"></a>4.4.2 continue语句</h5><blockquote><ul><li>在循环语句中，如果希望立即终止本次循环，并执行下一次循环，此时就需要使用continue语句。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;           <span class="hljs-comment">//定义变量sum</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)   <span class="hljs-comment">//如果i是一个偶数，执行if语句中的代码</span><br>&#123;<br><span class="hljs-keyword">continue</span>;      <span class="hljs-comment">//结束本次循环</span><br>&#125;<br>sum += i;          <span class="hljs-comment">//实现sum和i的累加</span><br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sum = %d\n&quot;</span>, sum);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-4-3-goto语句（无条件跳转，尽量少用）"><a href="#4-4-3-goto语句（无条件跳转，尽量少用）" class="headerlink" title="4.4.3 goto语句（无条件跳转，尽量少用）"></a>4.4.3 goto语句（无条件跳转，尽量少用）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">goto</span> End; <span class="hljs-comment">//无条件跳转到End的标识</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;aaaaaaaaa\n&quot;</span>);<br><br>End:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bbbbbbbb\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="五、数组和字符串"><a href="#五、数组和字符串" class="headerlink" title="五、数组和字符串"></a>五、数组和字符串</h3><h4 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h4><blockquote><p>在程序设计中，为了方便处理数据把具有相同类型的若干变量按有序形式组织起来——称为数组。</p></blockquote><blockquote><p>&#x3D;&#x3D;数组就是在内存中连续的相同类型的变量空间。&#x3D;&#x3D;同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的。</p></blockquote><p><img src="/road2dasheng/img/07/image-20230322163822842.png" alt="image-20230322163822842"></p><blockquote><p>数组属于构造数据类型：</p><ul><li>一个数组可以分解为多个数组元素：这些数组元素可以是基本数据类型或构造类型。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>];  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> <span class="hljs-title">boy</span>[10];</span><br></code></pre></td></tr></table></figure><blockquote><ul><li>按数组元素类型的不同，数组可分为：数值数组、字符数组、指针数组、结构数组等类别。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> s[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> *p[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><blockquote><p>通常情况下，数组元素下标的个数也称为维数，根据维数的不同，可将数组分为一维数组、二维数组、三维数组、四维数组等。通常情况下，我们将二维及以上的数组称为多维数组。</p></blockquote><h4 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h4><h5 id="5-2-1-一维数组的定义和使用"><a href="#5-2-1-一维数组的定义和使用" class="headerlink" title="5.2.1 一维数组的定义和使用"></a>5.2.1 一维数组的定义和使用</h5><blockquote><ul><li>数组名字符合标识符的书写规定(数字、英文字母、下划线)</li><li>数组名不能与其它变量名相同，同一作用域内是唯一的</li><li>方括号[]中常量表达式表示数组元素的个数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>]表示数组a有<span class="hljs-number">3</span>个元素<br>其下标从<span class="hljs-number">0</span>开始计算，因此<span class="hljs-number">3</span>个元素分别为a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure></li><li>定义数组时[]内最好是常量，使用数组时[]内即可是常量，也可以是变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>];<span class="hljs-comment">//定义了一个数组，名字叫a，有10个成员，每个成员都是int类型</span><br><span class="hljs-comment">//a[0]…… a[9]，没有a[10]</span><br><span class="hljs-comment">//没有a这个变量，a是数组的名字，但不是变量名，它是常量</span><br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//……</span><br>a[<span class="hljs-number">9</span>] = <span class="hljs-number">9</span>;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>a[i] = i; <span class="hljs-comment">//给数组赋值</span><br>&#125;<br><br><span class="hljs-comment">//遍历数组，并输出每个成员的值</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="5-2-2-一维数组的初始化"><a href="#5-2-2-一维数组的初始化" class="headerlink" title="5.2.2 一维数组的初始化"></a>5.2.2 一维数组的初始化</h5><blockquote><ul><li>在定义数组的同时进行赋值，称为初始化。</li><li>全局数组若不初始化，编译器将其初始化为零。</li><li>局部数组若不初始化，内容为随机值。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<span class="hljs-comment">//定义一个数组，同时初始化所有成员变量</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<span class="hljs-comment">//初始化前三个成员，后面所有元素都设置为0</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<span class="hljs-comment">//所有的成员都设置为0</span><br><span class="hljs-comment">//[]中不定义元素个数，定义时必须初始化</span><br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<span class="hljs-comment">//定义了一个数组，有5个成员</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="5-2-3-数组名"><a href="#5-2-3-数组名" class="headerlink" title="5.2.3 数组名"></a>5.2.3 数组名</h5><blockquote><p>数组名是一个地址的常量，代表数组中首元素的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<span class="hljs-comment">//定义一个数组，同时初始化所有成员变量</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %p\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;a[0] = %p\n&quot;</span>, &amp;a[<span class="hljs-number">0</span>]);<br><br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(a); <span class="hljs-comment">//数组占用内存的大小，10个int类型，10 * 4  = 40</span><br><span class="hljs-type">int</span> n0 = <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<span class="hljs-comment">//数组第0个元素占用内存大小，第0个元素为int，4</span><br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]); i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="5-2-4-强化训练"><a href="#5-2-4-强化训练" class="headerlink" title="5.2.4 强化训练"></a>5.2.4 强化训练</h5><p>1）一维数组的最值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123;  <span class="hljs-number">1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">3</span>,- <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">-8</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">10</span> &#125;;<span class="hljs-comment">//定义一个数组，同时初始化所有成员变量</span><br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> max = a[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]); i++)<br>&#123;<br><span class="hljs-keyword">if</span> (a[i] &gt; max)<br>&#123;<br>max = a[i];<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组中最大值为：%d\n&quot;</span>, max);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）一维数组的逆置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123;  <span class="hljs-number">1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">3</span>,- <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">-8</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">10</span> &#125;;<span class="hljs-comment">//定义一个数组，同时初始化所有成员变量</span><br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]) <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> tmp;<br><br><span class="hljs-keyword">while</span> (i &lt; j)<br>&#123;<br>tmp = a[i];<br>a[i] = a[j];<br>a[j] = tmp;<br>i++;<br>j--;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]); i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3）冒泡法排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123;  <span class="hljs-number">1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">3</span>,- <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">-8</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">10</span> &#125;;<span class="hljs-comment">//定义一个数组，同时初始化所有成员变量</span><br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><span class="hljs-type">int</span> tmp;<br><br><span class="hljs-comment">//1、流程</span><br><span class="hljs-comment">//2、试数</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n - i <span class="hljs-number">-1</span> ; j++)<span class="hljs-comment">//内循环的目的是比较相邻的元素，把大的放到后面</span><br>&#123;<br><span class="hljs-keyword">if</span> (a[j]  &gt; a[j + <span class="hljs-number">1</span>])<br>&#123;<br>tmp = a[j];<br>a[j] = a[j+<span class="hljs-number">1</span>];<br>a[j+<span class="hljs-number">1</span>] = tmp;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h4><h5 id="5-3-1-二维数组的定义和使用"><a href="#5-3-1-二维数组的定义和使用" class="headerlink" title="5.3.1 二维数组的定义和使用"></a>5.3.1 二维数组的定义和使用</h5><blockquote><p>二维数组定义的一般形式是：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">类型说明符 数组名[常量表达式<span class="hljs-number">1</span>][常量表达式<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><blockquote><p>其中常量表达式1表示第一维下标的长度，常量表达式2 表示第二维下标的长度。</p></blockquote><blockquote><p><code>int a[3][4]</code></p><ul><li>命名规则同一维数组</li><li>定义了一个三行四列的数组，数组名为a其元素类型为整型，该数组的元素个数为3×4个，即：</li></ul><p><img src="/road2dasheng/img/07/clip_image002.png" alt="img"></p><p>二维数组a是按行进行存放的，先存放a[0]行，再存放a[1]行、a[2]行，并且每行有四个元素，也是依次存放的。</p><ul><li>二维数组在概念上是二维的：其下标在两个方向上变化，对其访问一般需要两个下标。</li><li>在内存中并不存在二维数组，二维数组实际的硬件存储器是连续编址的，也就是说内存中只有一维数组，即放完一行之后顺次放入第二行，和一维数组存放方式是一样的。</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//定义了一个二维数组，名字叫a</span><br><span class="hljs-comment">//由3个一维数组组成，这个一维数组是int [4]</span><br><span class="hljs-comment">//这3个一维数组的数组名分别为a[0],a[1],a[2]</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><br>a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//……</span><br>a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">12</span>;<br><br><span class="hljs-comment">//给数组每个元素赋值</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br>a[i][j] = num++;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//遍历数组，并输出每个成员的值</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, a[i][j]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-2-二维数组的初始化"><a href="#5-3-2-二维数组的初始化" class="headerlink" title="5.3.2 二维数组的初始化"></a>5.3.2 二维数组的初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//分段赋值 int a[3][4] = &#123;&#123; 1, 2, 3, 4 &#125;,&#123; 5, 6, 7, 8, &#125;,&#123; 9, 10, 11, 12 &#125;&#125;;</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = <br>&#123; <br>&#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;,<br>&#123; <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, &#125;,<br>&#123; <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span> &#125;<br>&#125;;<br><br><span class="hljs-comment">//连续赋值</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> , <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>  &#125;;<br><br><span class="hljs-comment">//可以只给部分元素赋初值，未初始化则为0</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>  &#125;;<br><br><span class="hljs-comment">//所有的成员都设置为0</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-comment">//[]中不定义元素个数，定义时必须初始化</span><br><span class="hljs-type">int</span> a[][<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;;<br></code></pre></td></tr></table></figure><h5 id="5-3-3-数组名"><a href="#5-3-3-数组名" class="headerlink" title="5.3.3 数组名"></a>5.3.3 数组名</h5><p>数组名是一个地址的常量，代表数组中首元素的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//定义了一个二维数组，名字叫a</span><br><span class="hljs-comment">//二维数组是本质上还是一维数组，此一维数组有3个元素</span><br><span class="hljs-comment">//每个元素又是一个一维数组int[4]</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> , <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>  &#125;;<br><br><span class="hljs-comment">//数组名为数组首元素地址，二维数组的第0个元素为一维数组</span><br><span class="hljs-comment">//第0个一维数组的数组名为a[0]</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %p\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[0] = %p\n&quot;</span>, a[<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">//测二维数组所占内存空间，有3个一维数组，每个一维数组的空间为4*4</span><br><span class="hljs-comment">//sizeof(a) = 3 * 4 * 4 = 48</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(a) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(a));<br><br><span class="hljs-comment">//测第0个元素所占内存空间，a[0]为第0个一维数组int[4]的数组名，4*4=16</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(a[0]) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]) );<br><br><span class="hljs-comment">//测第0行0列元素所占内存空间，第0行0列元素为一个int类型，4字节</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(a[0][0]) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]));<br><br><span class="hljs-comment">//求二维数组行数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]));<br><br><span class="hljs-comment">// 求二维数组列数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;j = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]));<br><br><span class="hljs-comment">//求二维数组行*列总数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]));<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-4-强化训练"><a href="#5-3-4-强化训练" class="headerlink" title="5.3.4 强化训练"></a>5.3.4 强化训练</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//二维数组：  五行、三列</span><br><span class="hljs-comment">//行代表人：  老大到老五</span><br><span class="hljs-comment">//列代表科目：语、数、外</span><br><span class="hljs-type">float</span> a[<span class="hljs-number">5</span>][<span class="hljs-number">3</span>] = &#123; &#123; <span class="hljs-number">80</span>, <span class="hljs-number">75</span>, <span class="hljs-number">56</span> &#125;, &#123; <span class="hljs-number">59</span>, <span class="hljs-number">65</span>, <span class="hljs-number">71</span> &#125;, &#123; <span class="hljs-number">59</span>, <span class="hljs-number">63</span>, <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-number">85</span>, <span class="hljs-number">45</span>, <span class="hljs-number">90</span> &#125;, &#123; <span class="hljs-number">76</span>, <span class="hljs-number">77</span>, <span class="hljs-number">45</span> &#125; &#125;;<br><br><span class="hljs-type">int</span> i, j, person_low[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">float</span> s = <span class="hljs-number">0</span>, lesson_aver[<span class="hljs-number">3</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br>s = s + a[j][i];<br><span class="hljs-keyword">if</span> (a[j][i] &lt; <span class="hljs-number">60</span>)<br>&#123;<br>person_low[i]++;<br>&#125;<br>&#125;<br><br>lesson_aver[i] = s / <span class="hljs-number">5</span>;<br>s = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;各科的平均成绩:\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>, lesson_aver[i]);<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;各科不及格的人数:\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, person_low[i]);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-多维数组（了解）"><a href="#5-4-多维数组（了解）" class="headerlink" title="5.4 多维数组（了解）"></a>5.4 多维数组（了解）</h4><blockquote><p>多维数组的定义与二维数组类似，其语法格式具体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">数组类型修饰符 数组名 [n1][n2]…[nn];<br></code></pre></td></tr></table></figure></blockquote><blockquote><p><code>int a[3][4][5]</code></p><p>定义了一个三维数组，数组的名字是a，数组的长度为3，每个数组的元素又是一个二维数组，这个二维数组的长度是4，并且这个二维数组中的每个元素又是一个一维数组，这个一维数组的长度是5，元素类型是int</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//int a[3][4][5] ;//定义了一个三维数组，有3个二维数组int[4][5]</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>][<span class="hljs-number">5</span>] = &#123; &#123; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;, &#123; <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;, &#123; <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span> &#125; &#125;, &#123; &#123; <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span> &#125; &#125;, &#123; &#123; <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span> &#125; &#125; &#125;;<br><br><span class="hljs-type">int</span> i, j, k;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">5</span>; k++)<br>&#123;<br><span class="hljs-comment">//添加访问元素代码</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, a[i][j][k]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="5-5-字符数组与字符串"><a href="#5-5-字符数组与字符串" class="headerlink" title="5.5 字符数组与字符串"></a>5.5 字符数组与字符串</h4><h5 id="5-5-1-字符数组与字符串区别"><a href="#5-5-1-字符数组与字符串区别" class="headerlink" title="5.5.1 字符数组与字符串区别"></a>5.5.1 字符数组与字符串区别</h5><blockquote><ul><li>C语言中没有字符串这种数据类型，可以通过char的数组来替代；</li><li>字符串一定是一个char的数组，但char的数组未必是字符串；</li><li>数字0(和字符‘\0’等价)结尾的char数组就是一个字符串，但如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组，所以字符串是一种特殊的char的数组。</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>char c1[] = &#123; <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span> &#125;; <span class="hljs-regexp">//</span>普通字符数组<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;c1 = %s\n&quot;</span>, c1); <span class="hljs-regexp">//</span>乱码，因为没有’\<span class="hljs-number">0</span>’结束符<br><br>//以‘\<span class="hljs-number">0</span>’(‘\<span class="hljs-number">0</span>’就是数字<span class="hljs-number">0</span>)结尾的字符数组是字符串<br>char c2[] = &#123; <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;; <br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;c2 = %s\n&quot;</span>, c2);<br><br><span class="hljs-regexp">//</span>字符串处理以‘\<span class="hljs-number">0</span>’(数字<span class="hljs-number">0</span>)作为结束符，后面的<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>不会输出<br>char c3[] = &#123; <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;c3 = %s\n&quot;</span>, c3);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="5-5-2-字符串的初始化"><a href="#5-5-2-字符串的初始化" class="headerlink" title="5.5.2 字符串的初始化"></a>5.5.2 字符串的初始化</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// C语言没有字符串类型，通过字符数组模拟</span><br><span class="hljs-comment">// C语言字符串，以字符‘\0’, 数字0</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//不指定长度, 没有0结束符，有多少个元素就有多长</span><br><span class="hljs-type">char</span> buf[] = &#123; <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf = %s\n&quot;</span>, buf);<span class="hljs-comment">//乱码</span><br><br><span class="hljs-comment">//指定长度，后面没有赋值的元素，自动补0</span><br><span class="hljs-type">char</span> buf2[<span class="hljs-number">100</span>] = &#123; <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">1000</span>]=&#123;“hello”&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf2 = %s\n&quot;</span>, buf2);<br><br><span class="hljs-comment">//所有元素赋值为0</span><br><span class="hljs-type">char</span> buf3[<span class="hljs-number">100</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-comment">//char buf4[2] = &#123; &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27; &#125;;//数组越界</span><br><br><span class="hljs-type">char</span> buf5[<span class="hljs-number">50</span>] = &#123; <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span> &#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf5 = %s\n&quot;</span>, buf5);<br><br><span class="hljs-type">char</span> buf6[<span class="hljs-number">50</span>] = &#123; <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;7&#x27;</span> &#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf6 = %s\n&quot;</span>, buf6);<br><br><span class="hljs-type">char</span> buf7[<span class="hljs-number">50</span>] = &#123; <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span> &#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf7 = %s\n&quot;</span>, buf7);<br><br><span class="hljs-comment">//使用字符串初始化，编译器自动在后面补0，常用</span><br><span class="hljs-type">char</span> buf8[] = <span class="hljs-string">&quot;agjdslgjlsdjg&quot;</span>;<br><br><span class="hljs-comment">//&#x27;\0&#x27;后面最好不要连着数字，有可能几个数字连起来刚好是一个转义字符</span><br><span class="hljs-comment">//&#x27;\ddd&#x27;八进制字义字符，&#x27;\xdd&#x27;十六进制转移字符</span><br><span class="hljs-comment">// \012相当于\n</span><br><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;\012abc&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str == %s\n&quot;</span>, str);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-5-3-字符串的输入输出"><a href="#5-5-3-字符串的输入输出" class="headerlink" title="5.5.3 字符串的输入输出"></a>5.5.3 字符串的输入输出</h5><blockquote><p>由于字符串采用了’\0’标志，字符串的输入输出将变得简单方便。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br>   <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input string1 : \n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<span class="hljs-comment">//scanf(“%s”,str)默认以空格分隔</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;output:%s\n&quot;</span>, str);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>(1) gets()</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>&gt;<span class="hljs-type">char</span> *<span class="hljs-title function_">gets</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span>;<br>&gt;功能：从标准输入读入字符，并保存到s指定的内存空间，直到出现换行符或读到文件结尾为止。<br>&gt;参数：<br>s：字符串首地址<br>&gt;返回值：<br>成功：读入的字符串<br>失败：NUL<br></code></pre></td></tr></table></figure><p>gets(str)与scanf(“%s”,str)的区别：</p><ul><li><p>gets(str)允许输入的字符串含有空格</p></li><li><p>scanf(“%s”,str)不允许含有空格</p></li></ul><p>注意：由于scanf()和gets()无法知道字符串s大小，必须遇到换行符或读到文件结尾为止才接收输入，因此容易导致字符数组越界(缓冲区溢出)的情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入str: &quot;</span>);<br>gets(str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str = %s\n&quot;</span>, str);<br></code></pre></td></tr></table></figure><p>(2) fgets()</p></blockquote><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">fgets</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> size, FILE *stream)</span>;<br>功能：从stream指定的文件内读入字符，保存到s所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size - <span class="hljs-number">1</span>个字符为止，最后会自动加上字符 <span class="hljs-string">&#x27;\0&#x27;</span> 作为字符串结束。<br>参数：<br>s：字符串<br>size：指定最大读取字符串的长度（size - <span class="hljs-number">1</span>）<br>stream：文件指针，如果读键盘输入的字符串，固定写为<span class="hljs-built_in">stdin</span><br>返回值：<br>成功：成功读取的字符串<br>读到文件尾或出错： <span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p>fgets()在读取一个用户通过键盘输入的字符串的时候，同时把用户输入的回车也做为字符串的一部分。通过scanf和gets输入一个字符串的时候，不包含结尾的“\n”，但通过fgets结尾多了“\n”。fgets()函数是安全的，不存在缓冲区溢出的问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入str: &quot;</span>);<br>fgets(str, <span class="hljs-keyword">sizeof</span>(str), <span class="hljs-built_in">stdin</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str = \&quot;%s\&quot;\n&quot;</span>, str);<br></code></pre></td></tr></table></figure></blockquote><p>(3) puts()</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;<br>功能：标准设备输出s字符串，在输出完成后自动输出一个<span class="hljs-string">&#x27;\n&#x27;</span>。<br>参数：<br>s：字符串首地址<br>返回值：<br>成功：非负数<br>失败：<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>(4) fputs()</p><blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fputs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * str, FILE * stream)</span></span>;<br>功能：将str所指定的字符串写入到stream指定的文件中， 字符串结束符 <span class="hljs-string">&#x27;\0&#x27;</span>  不写入文件。 <br>参数：<br>str：字符串<br>stream：文件指针，如果把字符串输出到屏幕，固定写为stdout<br>返回值：<br>成功：<span class="hljs-number">0</span><br>失败：<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><p>fputs()是puts()的文件操作版本，但fputs()不会自动输出一个’\n’。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-built_in">fputs</span>(<span class="hljs-string">&quot;hello world&quot;</span>, <span class="hljs-built_in">stdout</span>);<br></code></pre></td></tr></table></figure></blockquote><p>(5) strlen()</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;<br>功能：计算指定字符串s的长度，不包含字符串结束符‘\<span class="hljs-number">0</span>’<br>参数：<br>s：字符串首地址<br>返回值：字符串s的长度，<span class="hljs-type">size_t</span>为<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>类型<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;abc\0defg&quot;</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n = %d\n&quot;</span>, n);<br></code></pre></td></tr></table></figure></blockquote><h5 id="5-5-4-强化训练：字符串追加"><a href="#5-5-4-强化训练：字符串追加" class="headerlink" title="5.5.4 强化训练：字符串追加"></a>5.5.4 强化训练：字符串追加</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;abcdef&quot;</span>;<br><span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-type">char</span> dst[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (str1[i] != <span class="hljs-number">0</span>)<br>&#123;<br>dst[i] = str1[i];<br>i++;<br>&#125;<br><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (str2[j] != <span class="hljs-number">0</span>)<br>&#123;<br>dst[i + j] = str2[j];<br>j++;<br>&#125;<br>dst[i + j] = <span class="hljs-number">0</span>; <span class="hljs-comment">//字符串结束符</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dst = %s\n&quot;</span>, dst);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h3><h4 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h4><h5 id="6-1-1-函数分类"><a href="#6-1-1-函数分类" class="headerlink" title="6.1.1 函数分类"></a>6.1.1 函数分类</h5><blockquote><p> C 程序是由函数组成的，我们写的代码都是由主函数 main()开始执行的。函数是 C 程序的基本模块，是用于完成特定任务的程序代码单元。</p><p>从函数定义的角度看，函数可分为系统函数和用户定义函数两种：</p><ul><li>系统函数，即库函数：这是由编译系统提供的，用户不必自己定义这些函数，可以直接使用它们，如我们常用的打印函数printf()</li><li>用户定义函数：用以解决用户的专门需要。</li></ul></blockquote><h5 id="6-1-2-函数的作用"><a href="#6-1-2-函数的作用" class="headerlink" title="6.1.2 函数的作用"></a>6.1.2 函数的作用</h5><blockquote><ul><li>函数的使用可以省去重复代码的编写，降低代码重复率</li><li>函数可以让程序更加模块化，从而有利于程序的阅读，修改和完善</li></ul></blockquote><h5 id="6-1-3-函数的调用：产生随机数"><a href="#6-1-3-函数的调用：产生随机数" class="headerlink" title="6.1.3 函数的调用：产生随机数"></a>6.1.3 函数的调用：产生随机数</h5><blockquote><p>当调用函数时，需要关心5要素：</p><ul><li><p>头文件：包含指定的头文件</p></li><li><p>函数名字：函数名字必须和头文件声明的名字一样</p></li><li><p>功能：需要知道此函数具体能干啥才调用</p></li><li><p>参数：参数类型要匹配</p></li><li><p>返回值：根据需要接收返回值</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-type">time_t</span> <span class="hljs-title function_">time</span><span class="hljs-params">(<span class="hljs-type">time_t</span> *t)</span>;<br>功能：获取当前系统时间<br>参数：常设置为<span class="hljs-literal">NULL</span><br>返回值：当前系统时间, <span class="hljs-type">time_t</span> 相当于<span class="hljs-type">long</span>类型，单位为毫秒<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">srand</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed)</span>;<br>功能：用来设置rand()产生随机数时的随机种子<br>参数：如果每次seed相等，rand()产生随机数相等<br>返回值：无<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">rand</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br>功能：返回一个随机数值<br>参数：无<br>返回值：随机数<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">time_t</span> tm = time(<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//得到系统时间</span><br>srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)tm);<span class="hljs-comment">//随机种子只需要设置一次即可</span><br><br><span class="hljs-type">int</span> r = rand();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;r = %d\n&quot;</span>, r);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h4><h5 id="6-2-1-函数定义格式"><a href="#6-2-1-函数定义格式" class="headerlink" title="6.2.1 函数定义格式"></a>6.2.1 函数定义格式</h5><blockquote><p>函数定义的一般形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">返回类型 函数名(形式参数列表)<br>&#123;<br>数据定义部分;<br>执行语句部分;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/07/clip_image002-16795421724381.jpg" alt="20150310105403075"></p></blockquote><h5 id="6-2-2-函数名字、形参、函数体、返回值"><a href="#6-2-2-函数名字、形参、函数体、返回值" class="headerlink" title="6.2.2 函数名字、形参、函数体、返回值"></a>6.2.2 函数名字、形参、函数体、返回值</h5><p>(1) 函数名</p><blockquote><p>理论上是可以随意起名字，最好起的名字见名知意，应该让用户看到这个函数名字就知道这个函数的功能。注意，函数名的后面有个圆换号()，代表这个为函数，不是普通的变量名。</p></blockquote><p>(2) 形参列表</p><blockquote><p>在定义函数时指定的形参，在未出现函数调用时，它们并不占内存中的存储单元，因此称它们是形式参数或虚拟参数，简称形参，表示它们并不是实际存在的数据，所以，形参里的变量不能赋值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>)</span> <span class="hljs-comment">// error, 形参不能赋值</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>在定义函数时指定的形参，必须是，类型+变量的形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//1: right, 类型+变量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>&#125;<br><br><span class="hljs-comment">//2: error, 只有类型，没有变量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span><br>&#123;<br>&#125;<br><br><span class="hljs-comment">//3: error, 只有变量，没有类型</span><br><span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b;<br><span class="hljs-type">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(a, b)</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>在定义函数时指定的形参，可有可无，根据函数的需要来设计，如果没有形参，圆括号内容为空，或写一个void关键字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 没形参， 圆括号内容为空</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">()</span><br>&#123;<br>&#125;<br><br><span class="hljs-comment">// 没形参， 圆括号内容为void关键字</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>(3) 函数体</p><blockquote><p>花括号{ }里的内容即为函数体的内容，这里为函数功能实现的过程，这和以前的写代码没太大区别，以前我们把代码写在main()函数里，现在只是把这些写到别的函数里。</p></blockquote><p>(4) 返回值</p><blockquote><p>函数的返回值是通过函数中的return语句获得的，return后面的值也可以是一个表达式。</p><p>a) 尽量保证return语句中表达式的值和函数返回类型是同一类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">()</span> <span class="hljs-comment">// 函数的返回值为int类型</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> a;<span class="hljs-comment">// 返回值a为int类型，函数返回类型也是int，匹配</span><br>&#125;<br></code></pre></td></tr></table></figure><p>b) 如果函数返回的类型和return语句中表达式的值不一致，则以函数返回类型为准，即函数返回类型决定返回值的类型。对数值型数据，可以自动进行类型转换。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">()</span> <span class="hljs-comment">// 函数的返回值为double类型</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> a;<span class="hljs-comment">// 返回值a为int类型，它会转为double类型再返回</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：如果函数返回的类型和return语句中表达式的值不一致，而它又无法自动进行类型转换，程序则会报错。</p><p>c) return语句的另一个作用为中断return所在的执行函数，类似于break中断循环、switch语句一样。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// 执行到，函数已经被中断，所以下面的return 2无法被执行到</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<span class="hljs-comment">// 没有执行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>d) 如果函数带返回值，return后面必须跟着一个值，如果函数没有返回值，函数名字的前面必须写一个void关键字，这时候，我们写代码时也可以通过return中断函数(也可以不用)，只是这时，return后面不带内容( 分号“；”除外)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">()</span><span class="hljs-comment">// 最好要有void关键字</span><br>&#123;<br><span class="hljs-keyword">return</span>; <span class="hljs-comment">// 中断函数，这个可有可无</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h4><blockquote><p>定义函数后，我们需要调用此函数才能执行到这个函数里的代码段。这和main()函数不一样，main()为编译器设定好自动调用的主函数，无需人为调用，我们都是在main()函数里调用别的函数，一个 C 程序里有且只有一个main()函数。</p></blockquote><h5 id="6-3-1-函数执行流程"><a href="#6-3-1-函数执行流程" class="headerlink" title="6.3.1 函数执行流程"></a>6.3.1 函数执行流程</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this is for test\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>print_test();<span class="hljs-comment">// print_test函数的调用</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>- 1) 进入main()函数</p><p>- 2) 调用print_test()函数：</p><p>a. 它会在main()函数的前寻找有没有一个名字叫“print_test”的函数定义；</p><p>b. 如果找到，接着检查函数的参数，这里调用函数时没有传参，函数定义也没有形参，参数类型匹配；</p><p>c. 开始执行print_test()函数，这时候，main()函数里面的执行会阻塞( 停 )在print_test()这一行代码，等待print_test()函数的执行。</p><p>- 3) print_test()函数执行完( 这里打印一句话 )，main()才会继续往下执行，执行到return 0, 程序执行完毕。</p></blockquote><h5 id="6-3-2-函数的形参和实参"><a href="#6-3-2-函数的形参和实参" class="headerlink" title="6.3.2 函数的形参和实参"></a>6.3.2 函数的形参和实参</h5><blockquote><ul><li><p>形参出现在函数定义中，在整个函数体内都可以使用，离开该函数则不能使用。</p></li><li><p>实参出现在主调函数中，进入被调函数后，实参也不能使用。</p></li><li><p>实参变量对形参变量的数据传递是“值传递”，即单向传递，只由实参传给形参，而不能由形参传回来给实参。</p></li><li><p>在调用函数时，编译系统临时给形参分配存储单元。调用结束后，形参单元被释放。</p></li><li><p>实参单元与形参单元是不同的单元。调用结束后，形参单元被释放，函数调用结束返回主调函数后则不能再使用该形参变量。实参单元仍保留并维持原值。因此，在执行一个被调用函数时，形参的值如果发生改变，并不会改变主调函数中实参的值。</p></li></ul></blockquote><h5 id="6-3-3-无参函数调用"><a href="#6-3-3-无参函数调用" class="headerlink" title="6.3.3 无参函数调用"></a>6.3.3 无参函数调用</h5><blockquote><p>如果是调用无参函数，则不能加上“实参”，但括号不能省略。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 函数的定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 函数的调用</span><br>test();<span class="hljs-comment">// right, 圆括号()不能省略</span><br>test(<span class="hljs-number">250</span>); <span class="hljs-comment">// error, 函数定义时没有参数</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="6-3-4-有参函数调用"><a href="#6-3-4-有参函数调用" class="headerlink" title="6.3.4 有参函数调用"></a>6.3.4 有参函数调用</h5><blockquote><p>a)如果实参表列包含多个实参，则各参数间用逗号隔开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 函数的定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> p = <span class="hljs-number">10</span>, q = <span class="hljs-number">20</span>;<br>test(p, q);<span class="hljs-comment">// 函数的调用</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>b)实参与形参的个数应相等，类型应匹配(相同或赋值兼容)。实参与形参按顺序对应，一对一地传递数据。</p><p>c)实参可以是常量、变量或表达式，无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值，以便把这些值传送给形参。所以，这里的变量是在圆括号( )外面定义好、赋好值的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 函数的定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 函数的调用</span><br><span class="hljs-type">int</span> p = <span class="hljs-number">10</span>, q = <span class="hljs-number">20</span>;<br>test(p, q);<span class="hljs-comment">// right</span><br>test(<span class="hljs-number">11</span>, <span class="hljs-number">30</span> - <span class="hljs-number">10</span>); <span class="hljs-comment">// right</span><br><br>test(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b); <span class="hljs-comment">// error, 不应该在圆括号里定义变量</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="6-3-5-函数返回值"><a href="#6-3-5-函数返回值" class="headerlink" title="6.3.5 函数返回值"></a>6.3.5 函数返回值</h5><blockquote><p>a）如果函数定义没有返回值，函数调用时不能写void关键字，调用函数时也不能接收函数的返回值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 函数的定义</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 函数的调用</span><br>test(); <span class="hljs-comment">// right</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>; <span class="hljs-comment">// error, void关键字只能出现在定义，不可能出现在调用的地方</span><br><span class="hljs-type">int</span> a = test();<span class="hljs-comment">// error, 函数定义根本就没有返回值</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure></blockquote><h4 id="6-4-函数的声明"><a href="#6-4-函数的声明" class="headerlink" title="6.4 函数的声明"></a>6.4 函数的声明</h4><blockquote><ul><li><p>如果使用用户自己定义的函数，而该函数与调用它的函数（即主调函数）不在同一文件中，或者函数定义的位置在主调函数之后，则必须在调用此函数之前对被调用的函数作声明。</p></li><li><p>所谓函数声明，就是在函数尚在未定义的情况下，事先将该函数的有关信息通知编译系统，相当于告诉编译器，函数在后面定义，以便使编译能正常进行</p></li><li><p>注意：一个函数只能被定义一次，但可以声明多次。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>; <span class="hljs-comment">// 函数的声明，分号不能省略</span><br><span class="hljs-comment">// int max(int, int); // 另一种方式</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">25</span>, num_max = <span class="hljs-number">0</span>;<br>    num_max = max(a, b); <span class="hljs-comment">// 函数的调用</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num_max = %d\n&quot;</span>, num_max);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 函数的定义</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> x &gt; y ? x : y;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-5-main函数与exit函数"><a href="#6-5-main函数与exit函数" class="headerlink" title="6.5 main函数与exit函数"></a>6.5 main函数与exit函数</h4><blockquote><p>在main函数中调用exit和return结果是一样的，但在子函数中调用return只是代表子函数终止了，在子函数中调用exit，那么程序终止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fun\n&quot;</span>);<br>    <span class="hljs-comment">//return;</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    fun();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="6-6-多文件-分文件-编程"><a href="#6-6-多文件-分文件-编程" class="headerlink" title="6.6 多文件(分文件)编程"></a>6.6 多文件(分文件)编程</h4><h5 id="6-6-1-分文件编程"><a href="#6-6-1-分文件编程" class="headerlink" title="6.6.1 分文件编程"></a>6.6.1 分文件编程</h5><blockquote><ul><li><p>把函数声明放在头文件xxx.h中，在主函数中包含相应头文件</p></li><li><p>在头文件对应的xxx.c中实现xxx.h声明的函数</p></li></ul></blockquote><p><img src="/road2dasheng/img/07%5C2023-03-23-23-23-59-image.png"></p><h5 id="6-6-2-防止头文件重复包含"><a href="#6-6-2-防止头文件重复包含" class="headerlink" title="6.6.2  防止头文件重复包含"></a>6.6.2  防止头文件重复包含</h5><blockquote><p>当一个项目比较大时，往往都是分文件，这时候有可能不小心把同一个头文件 include 多次，或者头文件嵌套包含。</p><p><img src="/road2dasheng/img/07%5C2023-03-23-23-26-28-image.png"></p></blockquote><blockquote><p>为了避免同一个文件被include多次，C&#x2F;C++中有两种方式，一种是 #ifndef 方式，一种是 #pragma once 方式。</p><p><img src="/road2dasheng/img/07%5C2023-03-23-23-28-21-image.png"></p></blockquote><hr><h3 id="七、指针"><a href="#七、指针" class="headerlink" title="七、指针"></a>七、指针</h3><h4 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h4><h5 id="7-1-1-内存"><a href="#7-1-1-内存" class="headerlink" title="7.1.1 内存"></a>7.1.1 内存</h5><blockquote><p>内存含义：</p><ul><li><p>存储器：计算机的组成中，用来存储程序和数据，辅助CPU进行运算处理的重要部分。</p></li><li><p>内存：内部存贮器，暂存程序&#x2F;数据——掉电丢失 SRAM、DRAM、DDR、DDR2、DDR3。</p></li><li><p>外存：外部存储器，长时间保存程序&#x2F;数据—掉电不丢ROM、ERRROM、FLASH（NAND、NOR）、硬盘、光盘。</p></li></ul></blockquote><blockquote><p>内存是沟通CPU与硬盘的桥梁：</p><ul><li><p>暂存放CPU中的运算数据</p></li><li><p>暂存与硬盘等外部存储器交换的数据</p></li></ul></blockquote><h5 id="7-1-2-物理存储器和存储地址空间"><a href="#7-1-2-物理存储器和存储地址空间" class="headerlink" title="7.1.2 物理存储器和存储地址空间"></a>7.1.2 物理存储器和存储地址空间</h5><blockquote><p>有关内存的两个概念：物理存储器和存储地址空间。</p><p>物理存储器：实际存在的具体存储器芯片。</p><ul><li><p>主板上装插的内存条</p></li><li><p>显示卡上的显示RAM芯片</p></li><li><p>各种适配卡上的RAM芯片和ROM芯片</p></li></ul><p>存储地址空间：对存储器编码的范围。我们在软件上常说的内存是指这一层含义。</p><ul><li><p>编码：对每个物理存储单元（一个字节）分配一个号码</p></li><li><p>寻址：可以根据分配的号码找到相应的存储单元，完成数据的读写</p></li></ul></blockquote><h5 id="7-1-3-内存地址"><a href="#7-1-3-内存地址" class="headerlink" title="7.1.3 内存地址"></a>7.1.3 内存地址</h5><blockquote><ul><li><p>将内存抽象成一个很大的一维字符数组。</p></li><li><p>编码就是对内存的每一个字节分配一个32位或64位的编号（与32位或者64位处理器相关）。</p></li><li><p>这个内存编号我们称之为内存地址。</p></li></ul></blockquote><blockquote><p>内存中的每一个数据都会分配相应的地址：</p><ul><li><p>char:占一个字节分配一个地址</p></li><li><p>int: 占四个字节分配四个地址</p></li><li><p>float、struct、函数、数组等</p></li></ul><p><img src="/road2dasheng/img/07%5C2023-03-23-23-35-49-image.png"></p></blockquote><h5 id="7-1-4-指针和指针变量"><a href="#7-1-4-指针和指针变量" class="headerlink" title="7.1.4 指针和指针变量"></a>7.1.4 指针和指针变量</h5><blockquote><ul><li><p>内存区的每一个字节都有一个编号，这就是“地址”。</p></li><li><p>如果在程序中定义了一个变量，在对程序进行编译或运行时，系统就会给这个变量分配内存单元，并确定它的内存地址(编号)</p></li><li><p>指针的实质就是内存“地址”。指针就是地址，地址就是指针。</p></li><li><p>指针是内存单元的编号，指针变量是存放地址的变量。</p></li><li><p>通常我们叙述时会把指针变量简称为指针，实际他们含义并不一样。</p></li></ul></blockquote><blockquote><p><img src="/road2dasheng/img/07%5C2023-03-23-23-38-08-image.png"></p></blockquote><h4 id="7-2-指针基础知识"><a href="#7-2-指针基础知识" class="headerlink" title="7.2 指针基础知识"></a>7.2 指针基础知识</h4><h5 id="7-2-1-指针变量的定义和使用"><a href="#7-2-1-指针变量的定义和使用" class="headerlink" title="7.2.1 指针变量的定义和使用"></a>7.2.1 指针变量的定义和使用</h5><blockquote><ul><li><p>指针也是一种数据类型，指针变量也是一种变量</p></li><li><p>指针变量指向谁，就把谁的地址赋值给指针变量</p></li><li><p>“*”操作符操作的是指针变量指向的内存空间</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> b = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p, %p\n&quot;</span>, &amp;a, &amp;b); <span class="hljs-comment">//打印a, b的地址</span><br><br>    <span class="hljs-comment">//int *代表是一种数据类型，int*指针类型，p才是变量名</span><br>    <span class="hljs-comment">//定义了一个指针类型的变量，可以指向一个int类型变量的地址</span><br>    <span class="hljs-type">int</span> *p;<br>    p = &amp;a;<span class="hljs-comment">//将a的地址赋值给变量p，p也是一个变量，值是一个内存地址编号</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, *p);<span class="hljs-comment">//p指向了a的地址，*p就是a的值</span><br><br>    <span class="hljs-type">char</span> *p1 = &amp;b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, *p1);<span class="hljs-comment">//*p1指向了b的地址，*p1就是b的值</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>注意：&amp;可以取得一个变量在内存中的地址。但是，不能取寄存器变量，因为寄存器变量不在内存里，而在CPU里面，所以是没有地址的。</p></blockquote><h5 id="7-2-2-通过指针间接修改变量的值"><a href="#7-2-2-通过指针间接修改变量的值" class="headerlink" title="7.2.2 通过指针间接修改变量的值"></a>7.2.2 通过指针间接修改变量的值</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">11</span>;<br><span class="hljs-type">int</span> *p = &amp;a;<br><br>*p = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, *p = %d\n&quot;</span>, a, *p);<br><br>p = &amp;b;<br>*p = <span class="hljs-number">22</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b = %d, *p = %d\n&quot;</span>, b, *p);<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-2-3-指针大小"><a href="#7-2-3-指针大小" class="headerlink" title="7.2.3 指针大小"></a>7.2.3 指针大小</h5><blockquote><ul><li><p>使用sizeof()测量指针的大小，得到的总是：4或8</p></li><li><p>sizeof()测的是指针变量指向存储地址的大小</p></li><li><p>在32位平台，所有的指针（地址）都是32位(4字节)</p></li><li><p>在64位平台，所有的指针（地址）都是64位(8字节)</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p1;<br><span class="hljs-type">int</span> **p2;<br><span class="hljs-type">char</span> *p3;<br><span class="hljs-type">char</span> **p4;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(p1) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p1));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(p2) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p2));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(p3) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p3));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(p4) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(p4));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(double *) = %d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">double</span> *));<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-2-4-野指针和空指针"><a href="#7-2-4-野指针和空指针" class="headerlink" title="7.2.4 野指针和空指针"></a>7.2.4 野指针和空指针</h5><blockquote><p>指针变量也是变量，是变量就可以任意赋值，不要越界即可（32位为4字节，64位为8字节），但是，任意数值赋值给指针变量没有意义，因为这样的指针就成了野指针，此指针指向的区域是未知(操作系统不允许操作此指针指向的内存区域)。所以，野指针不会直接引发错误，操作野指针指向的内存区域才会出问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> *p;<br>p = a; <span class="hljs-comment">//把a的值赋值给指针变量p，p为野指针， ok，不会有问题，但没有意义</span><br><br>p = <span class="hljs-number">0x12345678</span>; <span class="hljs-comment">//给指针变量p赋值，p为野指针， ok，不会有问题，但没有意义</span><br><br>*p = <span class="hljs-number">1000</span>;  <span class="hljs-comment">//操作野指针指向未知区域，内存出问题，err</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>但是，野指针和有效指针变量保存的都是数值，为了标志此指针变量没有指向任何变量(空闲可用)，C语言中，可以把NULL赋值给此指针，这样就标志此指针为空指针，没有任何指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>NULL是一个值为0的宏常量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> NULL ((void *)0)</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="7-2-5-万能指针void"><a href="#7-2-5-万能指针void" class="headerlink" title="7.2.5 万能指针void *"></a>7.2.5 万能指针void *</h5><blockquote><p>void *指针可以指向任意变量的内存空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *p = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>p = (<span class="hljs-type">void</span> *)&amp;a; <span class="hljs-comment">//指向变量时，最好转换为void *</span><br><br><span class="hljs-comment">//使用指针变量指向的内存时，转换为int *</span><br>*( (<span class="hljs-type">int</span> *)p ) = <span class="hljs-number">11</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-2-6-const修饰的指针变量"><a href="#7-2-6-const修饰的指针变量" class="headerlink" title="7.2.6 const修饰的指针变量"></a>7.2.6 const修饰的指针变量</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">200</span>;<br><br><span class="hljs-comment">//指向常量的指针</span><br>    <span class="hljs-comment">//修饰*，指针指向内存区域不能修改，指针指向可以变</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> * p1 = &amp;a; <span class="hljs-comment">//等价于int const *p1 = &amp;a;</span><br>    <span class="hljs-comment">//*p1 = 111; //err</span><br>    p1 = &amp;b; <span class="hljs-comment">//ok</span><br><br><span class="hljs-comment">//指针常量</span><br>    <span class="hljs-comment">//修饰p1，指针指向不能变，指针指向的内存可以修改</span><br>    <span class="hljs-type">int</span> * <span class="hljs-type">const</span> p2 = &amp;a;<br>    <span class="hljs-comment">//p2 = &amp;b; //err</span><br>    *p2 = <span class="hljs-number">222</span>; <span class="hljs-comment">//ok</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>在编辑程序时，指针作为函数参数，如果不想修改指针对应内存空间的值，需要使用const修饰指针数据类型。</p></blockquote><h4 id="7-3-指针和数组"><a href="#7-3-指针和数组" class="headerlink" title="7.3 指针和数组"></a>7.3 指针和数组</h4><h5 id="7-3-1-数组名"><a href="#7-3-1-数组名" class="headerlink" title="7.3.1 数组名"></a>7.3.1 数组名</h5><blockquote><p>数组名字是数组的首元素地址，但它是一个常量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %p\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;a[0] = %p\n&quot;</span>, &amp;a[<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">//a = 10; //err, 数组名只是常量，不能修改</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="7-3-2-指针操作数组元素"><a href="#7-3-2-指针操作数组元素" class="headerlink" title="7.3.2 指针操作数组元素"></a>7.3.2 指针操作数组元素</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span>  <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-comment">//printf(&quot;%d, &quot;, a[i]);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, *(a+i));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-type">int</span> *p = a; <span class="hljs-comment">//定义一个指针变量保存a的地址</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>p[i] = <span class="hljs-number">2</span> * i;<br>&#125;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, *(p + i));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-3-3-指针加减运算"><a href="#7-3-3-指针加减运算" class="headerlink" title="7.3.3 指针加减运算"></a>7.3.3 指针加减运算</h5><blockquote><p>(1) 加法运算</p><ul><li><p>指针计算不是简单的整数相加</p></li><li><p>如果是一个int *，+1的结果是增加一个int的大小</p></li><li><p>如果是一个char *，+1的结果是增加一个char大小</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> *p = &amp;a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, p);<br>p += <span class="hljs-number">2</span>;<span class="hljs-comment">//移动了2个int</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, p);<br><br><span class="hljs-type">char</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> *p1 = &amp;b;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, p1);<br>p1 += <span class="hljs-number">2</span>;<span class="hljs-comment">//移动了2个char</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, p1);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过改变指针指向操作数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><br><span class="hljs-type">int</span> *p = a;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, *p);<br>p++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 减法运算</p><p>示例1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><br><span class="hljs-type">int</span> *p = a+n<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, *p);<br>p--;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">int</span> *p2 = &amp;a[<span class="hljs-number">2</span>]; <span class="hljs-comment">//第2个元素地址</span><br><span class="hljs-type">int</span> *p1 = &amp;a[<span class="hljs-number">1</span>]; <span class="hljs-comment">//第1个元素地址</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p1 = %p, p2 = %p\n&quot;</span>, p1, p2);<br><br><span class="hljs-type">int</span> n1 = p2 - p1; <span class="hljs-comment">//n1 = 1</span><br><span class="hljs-type">int</span> n2 = (<span class="hljs-type">int</span>)p2 - (<span class="hljs-type">int</span>)p1; <span class="hljs-comment">//n2 = 4</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n1 = %d, n2 = %d\n&quot;</span>, n1, n2);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-3-4-指针数组"><a href="#7-3-4-指针数组" class="headerlink" title="7.3.4 指针数组"></a>7.3.4 指针数组</h5><blockquote><p>指针数组，它是数组，数组的每个元素都是指针类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//指针数组</span><br><span class="hljs-type">int</span> *p[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>p[<span class="hljs-number">0</span>] = &amp;a;<br>p[<span class="hljs-number">1</span>] = &amp;b;<br>p[<span class="hljs-number">2</span>] = &amp;c;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(p) / <span class="hljs-keyword">sizeof</span>(p[<span class="hljs-number">0</span>]); i++ )<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, *(p[i]));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="7-4-多级指针"><a href="#7-4-多级指针" class="headerlink" title="7.4 多级指针"></a>7.4 多级指针</h4><blockquote><ul><li><p>C语言允许有多级指针存在，在实际的程序中一级指针最常用，其次是二级指针。</p></li><li><p>二级指针就是指向一个一级指针变量地址的指针。</p></li><li><p>三级指针基本用不着，但考试会考。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p = &amp;a; <span class="hljs-comment">//一级指针</span><br>*p = <span class="hljs-number">100</span>; <span class="hljs-comment">//*p就是a</span><br><br><span class="hljs-type">int</span> **q = &amp;p;<br><span class="hljs-comment">//*q就是p</span><br><span class="hljs-comment">//**q就是a</span><br><br><span class="hljs-type">int</span> ***t = &amp;q;<br><span class="hljs-comment">//*t就是q</span><br><span class="hljs-comment">//**t就是p</span><br><span class="hljs-comment">//***t就是a</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="7-5-指针和函数"><a href="#7-5-指针和函数" class="headerlink" title="7.5 指针和函数"></a>7.5 指针和函数</h4><h5 id="7-5-1-函数形参改变实参的值"><a href="#7-5-1-函数形参改变实参的值" class="headerlink" title="7.5.1 函数形参改变实参的值"></a>7.5.1 函数形参改变实参的值</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br><span class="hljs-type">int</span> tmp;<br>tmp = x;<br>x = y;<br>y = tmp;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d, y = %d\n&quot;</span>, x, y);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap2</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br><span class="hljs-type">int</span> tmp;<br>tmp = *x;<br>*x = *y;<br>*y = tmp;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">5</span>;<br>swap1(a, b); <span class="hljs-comment">//值传递</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d\n&quot;</span>, a, b);<br><br>a = <span class="hljs-number">3</span>;<br>b = <span class="hljs-number">5</span>;<br>swap2(&amp;a, &amp;b); <span class="hljs-comment">//地址传递</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a2 = %d, b2 = %d\n&quot;</span>, a, b);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-5-2-数组名做函数参数"><a href="#7-5-2-数组名做函数参数" class="headerlink" title="7.5.2 数组名做函数参数"></a>7.5.2 数组名做函数参数</h5><blockquote><p>数组名做函数参数，函数的形参会退化为指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArrary</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, a[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(a) / <span class="hljs-keyword">sizeof</span>(a[<span class="hljs-number">0</span>]);<br><br><span class="hljs-comment">//数组名做函数参数</span><br>printArrary(a, n); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-5-3-指针做为函数的返回值"><a href="#7-5-3-指针做为函数的返回值" class="headerlink" title="7.5.3 指针做为函数的返回值"></a>7.5.3 指针做为函数的返回值</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> *<span class="hljs-title function_">getA</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> &amp;a;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>*( getA() ) = <span class="hljs-number">111</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="7-6-指针和字符串"><a href="#7-6-指针和字符串" class="headerlink" title="7.6 指针和字符串"></a>7.6 指针和字符串</h4><h5 id="7-6-1-字符指针"><a href="#7-6-1-字符指针" class="headerlink" title="7.6.1 字符指针"></a>7.6.1 字符指针</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-type">char</span> *p = str;<br>*p = <span class="hljs-string">&#x27;m&#x27;</span>;<br>p++;<br>*p = <span class="hljs-string">&#x27;i&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br><br>p = <span class="hljs-string">&quot;mike jiang&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, p);<br><br><span class="hljs-type">char</span> *q = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, q);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-6-2-字符指针做函数参数"><a href="#7-6-2-字符指针做函数参数" class="headerlink" title="7.6.2 字符指针做函数参数"></a>7.6.2 字符指针做函数参数</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mystrcat</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span><br>&#123;<br><span class="hljs-type">int</span> len1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> len2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (dest[len1])<br>&#123;<br>len1++;<br>&#125;<br><span class="hljs-keyword">while</span> (src[len2])<br>&#123;<br>len2++;<br>&#125;<br><br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len2; i++)<br>&#123;<br>dest[len1 + i] = src[i];<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> dst[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;hello mike&quot;</span>;<br><span class="hljs-type">char</span> src[] = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>mystrcat(dst, src);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dst = %s\n&quot;</span>, dst);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-6-3-const修饰的指针变量"><a href="#7-6-3-const修饰的指针变量" class="headerlink" title="7.6.3 const修饰的指针变量"></a>7.6.3 const修饰的指针变量</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">//const修饰一个变量为只读</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//a = 100; //err</span><br><br><span class="hljs-comment">//指针变量， 指针指向的内存， 2个不同概念</span><br><span class="hljs-type">char</span> buf[] = <span class="hljs-string">&quot;aklgjdlsgjlkds&quot;</span>;<br><br><span class="hljs-comment">//从左往右看，跳过类型，看修饰哪个字符</span><br><span class="hljs-comment">//如果是*， 说明指针指向的内存不能改变</span><br><span class="hljs-comment">//如果是指针变量，说明指针的指向不能改变，指针的值不能修改</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *p = buf;<br><span class="hljs-comment">// 等价于上面 char const *p1 = buf;</span><br><span class="hljs-comment">//p[1] = &#x27;2&#x27;; //err</span><br>p = <span class="hljs-string">&quot;agdlsjaglkdsajgl&quot;</span>; <span class="hljs-comment">//ok</span><br><br><span class="hljs-type">char</span> * <span class="hljs-type">const</span> p2 = buf;<br>p2[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;3&#x27;</span>;<br><span class="hljs-comment">//p2 = &quot;salkjgldsjaglk&quot;; //err</span><br><br><span class="hljs-comment">//p3为只读，指向不能变，指向的内存也不能变</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> * <span class="hljs-type">const</span> p3 = buf;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-6-4-指针数组做为main函数的形参"><a href="#7-6-4-指针数组做为main函数的形参" class="headerlink" title="7.6.4 指针数组做为main函数的形参"></a>7.6.4 指针数组做为main函数的形参</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span>;<br></code></pre></td></tr></table></figure><ul><li><p>main函数是操作系统调用的，第一个参数标明argc数组的成员数量，argv数组的每个成员都是char *类型</p></li><li><p>argv是命令行参数的字符串数组</p></li><li><p>argc代表命令行参数的数量，程序名字本身算一个参数</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//argc: 传参数的个数（包含可执行程序）</span><br><span class="hljs-comment">//argv：指针数组，指向输入的参数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><br><span class="hljs-comment">//指针数组，它是数组，每个元素都是指针</span><br><span class="hljs-type">char</span> *a[] = &#123; <span class="hljs-string">&quot;aaaaaaa&quot;</span>, <span class="hljs-string">&quot;bbbbbbbbbb&quot;</span>, <span class="hljs-string">&quot;ccccccc&quot;</span> &#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc = %d\n&quot;</span>, argc);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; argc; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, argv[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-6-5-项目开发常用字符串应用模型"><a href="#7-6-5-项目开发常用字符串应用模型" class="headerlink" title="7.6.5 项目开发常用字符串应用模型"></a>7.6.5 项目开发常用字符串应用模型</h5><blockquote><p>(1) strstr中的while和do-while模型</p><p>利用strstr标准库函数找出一个字符串中substr出现的个数。</p><p>a) while模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> *p = <span class="hljs-string">&quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> ((p = <span class="hljs-built_in">strstr</span>(p, <span class="hljs-string">&quot;abcd&quot;</span>)) != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-comment">//能进来，肯定有匹配的子串</span><br><span class="hljs-comment">//重新设置起点位置</span><br>p = p + <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br>n++;<br><br><span class="hljs-keyword">if</span> (*p == <span class="hljs-number">0</span>) <span class="hljs-comment">//如果到结束符</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n = %d\n&quot;</span>, n);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>b) do-while模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> *p = <span class="hljs-string">&quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">do</span><br>&#123;<br>p = <span class="hljs-built_in">strstr</span>(p, <span class="hljs-string">&quot;abcd&quot;</span>);<br><span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>&#123;<br>n++; <span class="hljs-comment">//累计个数</span><br><br><span class="hljs-comment">//重新设置查找的起点</span><br>p = p + <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-comment">//如果没有匹配的字符串，跳出循环</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (*p != <span class="hljs-number">0</span>); <span class="hljs-comment">//如果没有到结尾</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n = %d\n&quot;</span>, n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 两头堵模型</p><p>求非空字符串元素的个数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">char</span> *p, <span class="hljs-type">int</span> *n)</span><br>&#123;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span> || n == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> begin = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> end = <span class="hljs-built_in">strlen</span>(p) - <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//从左边开始</span><br><span class="hljs-comment">//如果当前字符为空，而且没有结束</span><br><span class="hljs-keyword">while</span> (p[begin] == <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; p[begin] != <span class="hljs-number">0</span>)<br>&#123;<br>begin++; <span class="hljs-comment">//位置从右移动一位</span><br>&#125;<br><br><span class="hljs-comment">//从右往左移动</span><br><span class="hljs-keyword">while</span> (p[end] == <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; end &gt; <span class="hljs-number">0</span>)<br>&#123;<br>end--; <span class="hljs-comment">//往左移动</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (end == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;<br>&#125;<br><br><span class="hljs-comment">//非空元素个数</span><br>*n = end - begin + <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> *p = <span class="hljs-string">&quot;      abcddsgadsgefg      &quot;</span>;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br>ret = fun(p, &amp;n);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非空字符串元素个数：%d\n&quot;</span>, n);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) 字符串反转模型(逆置)</p><p><img src="/road2dasheng/img/07%5Cclip_image002-16796347819601.png" alt="图片1"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">inverse</span><span class="hljs-params">(<span class="hljs-type">char</span> *p)</span><br>&#123;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">char</span> *str = p;<br><span class="hljs-type">int</span> begin = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> end = <span class="hljs-built_in">strlen</span>(str) - <span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> tmp;<br><br><span class="hljs-keyword">while</span> (begin &lt; end)<br>&#123;<br><span class="hljs-comment">//交换元素</span><br>tmp = str[begin];<br>str[begin] = str[end];<br>str[end] = tmp;<br><br>begin++;  <span class="hljs-comment">//往右移动位置</span><br>end--;    <span class="hljs-comment">//往左移动位置</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">//char *str = &quot;abcdefg&quot;; //文件常量区，内容不允许修改</span><br><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;abcdef&quot;</span>;<br><br><span class="hljs-type">int</span> ret = inverse(str);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str ========== %s\n&quot;</span>, str);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="7-6-6-字符串处理函数"><a href="#7-6-6-字符串处理函数" class="headerlink" title="7.6.6 字符串处理函数"></a>7.6.6 字符串处理函数</h5><blockquote><p>(1) strcpy()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span>;<br>功能：把src所指向的字符串复制到dest所指向的空间中，<span class="hljs-string">&#x27;\0&#x27;</span>也会拷贝过去<br>参数：<br>dest：目的字符串首地址<br>src：源字符首地址<br>返回值：<br>成功：返回dest字符串的首地址<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p>注意：如果参数dest所指的内存空间不够大，可能会造成缓冲溢出的错误情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> dest[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;123456789&quot;</span>;<br><span class="hljs-type">char</span> src[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-built_in">strcpy</span>(dest, src);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, dest);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) strncpy()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strncpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src, <span class="hljs-type">size_t</span> n)</span>;<br>功能：把src指向字符串的前n个字符复制到dest所指向的空间中，是否拷贝结束符看指定的长度是否包含<span class="hljs-string">&#x27;\0&#x27;</span>。<br>参数：<br>dest：目的字符串首地址<br>src：源字符首地址<br>n：指定需要拷贝字符串个数<br>返回值：<br>成功：返回dest字符串的首地址<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> dest[<span class="hljs-number">20</span>] ;<br><span class="hljs-type">char</span> src[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br><br><span class="hljs-built_in">strncpy</span>(dest, src, <span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, dest);<br><br>dest[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, dest);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) strcat()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span>;<br>功能：将src字符串连接到dest的尾部，‘\<span class="hljs-number">0</span>’也会追加过去<br>参数：<br>dest：目的字符串首地址<br>src：源字符首地址<br>返回值：<br>成功：返回dest字符串的首地址<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> str[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">char</span> *src = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-built_in">strcat</span>(str, src));<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(4) strncat()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strncat</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src, <span class="hljs-type">size_t</span> n)</span>;<br>功能：将src字符串前n个字符连接到dest的尾部，‘\<span class="hljs-number">0</span>’也会追加过去<br>参数：<br>dest：目的字符串首地址<br>src：源字符首地址<br>n：指定需要追加字符串个数<br>返回值：<br>成功：返回dest字符串的首地址<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> str[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">char</span> *src = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-built_in">strncat</span>(str, src, <span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(5) strcmp()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2)</span>;<br>功能：比较 s1 和 s2 的大小，比较的是字符ASCII码大小。<br>参数：<br>s1：字符串<span class="hljs-number">1</span>首地址<br>s2：字符串<span class="hljs-number">2</span>首地址<br>返回值：<br>相等：<span class="hljs-number">0</span><br>大于：&gt;<span class="hljs-number">0</span> 在不同操作系统<span class="hljs-built_in">strcmp</span>结果会不同   返回ASCII差值<br>小于：&lt;<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *str1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-type">char</span> *str2 = <span class="hljs-string">&quot;hello mike&quot;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(str1, str2) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1==str2\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(str1, str2) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1&gt;str2\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1&lt;str2\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(6) strncmp()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">strncmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2, <span class="hljs-type">size_t</span> n)</span>;<br>功能：比较 s1 和 s2 前n个字符的大小，比较的是字符ASCII码大小。<br>参数：<br>s1：字符串<span class="hljs-number">1</span>首地址<br>s2：字符串<span class="hljs-number">2</span>首地址<br>n：指定比较字符串的数量<br>返回值：<br>相等：<span class="hljs-number">0</span><br>大于： &gt; <span class="hljs-number">0</span><br>小于： &lt; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *str1 = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-type">char</span> *str2 = <span class="hljs-string">&quot;hello mike&quot;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(str1, str2, <span class="hljs-number">5</span>) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1==str2\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(str1, <span class="hljs-string">&quot;hello world&quot;</span>) &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1&gt;str2\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1&lt;str2\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(7) sprintf()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sprintf</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span>;<br>功能：根据参数format字符串来转换并格式化数据，然后将结果输出到str指定的空间中，直到出现字符串结束符 <span class="hljs-string">&#x27;\0&#x27;</span>  为止。<br>参数：<br>str：字符串首地址<br>format：字符串格式，用法和<span class="hljs-built_in">printf</span>()一样<br>返回值：<br>成功：实际格式化的字符个数<br>失败： - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> dst[<span class="hljs-number">100</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> src[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, src = %s&quot;</span>, a, src);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sprintf</span>(dst, <span class="hljs-string">&quot;a = %d, src = %s&quot;</span>, a, src);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dst = \&quot; %s\&quot;\n&quot;</span>, dst);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len = %d\n&quot;</span>, len);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(8) sscanf()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sscanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span>;<br>功能：从str指定的字符串读取数据，并根据参数format字符串来转换并格式化数据。<br>参数：<br>str：指定的字符串首地址<br>format：字符串格式，用法和<span class="hljs-built_in">scanf</span>()一样<br>返回值：<br>成功：参数数目，成功转换的值的个数<br>失败： - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> src[] = <span class="hljs-string">&quot;a=10, b=20&quot;</span>;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-built_in">sscanf</span>(src, <span class="hljs-string">&quot;a=%d,  b=%d&quot;</span>, &amp;a, &amp;b);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a:%d, b:%d\n&quot;</span>, a, b);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(9) strchr()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strchr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> c)</span>;<br>功能：在字符串s中查找字母c出现的位置<br>参数：<br>s：字符串首地址<br>c：匹配字母(字符)<br>返回值：<br>成功：返回第一次出现的c地址<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> src[] = <span class="hljs-string">&quot;ddda123abcd&quot;</span>;<br><span class="hljs-type">char</span> *p = <span class="hljs-built_in">strchr</span>(src, <span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p = %s\n&quot;</span>, p);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(10) strstr()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strstr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *haystack, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *needle)</span>;<br>功能：在字符串haystack中查找字符串needle出现的位置<br>参数：<br>haystack：源字符串首地址<br>needle：匹配字符串首地址<br>返回值：<br>成功：返回第一次出现的needle地址<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> src[] = <span class="hljs-string">&quot;ddddabcd123abcd333abcd&quot;</span>;<br><span class="hljs-type">char</span> *p = <span class="hljs-built_in">strstr</span>(src, <span class="hljs-string">&quot;abcd&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p = %s\n&quot;</span>, p);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(11) strtok()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strtok</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *delim)</span>;<br>功能：来将字符串分割成一个个片段。当strtok()在参数s的字符串中发现参数delim中包含的分割字符时, 则会将该字符改为\<span class="hljs-number">0</span> 字符，当连续出现多个时只替换第一个为\<span class="hljs-number">0</span>。<br>参数：<br>str：指向欲分割的字符串<br>delim：为分割字符串中包含的所有字符<br>返回值：<br>成功：分割后字符串首地址<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><ul><li><p>在第一次调用时：strtok()必需给予参数s字符串</p></li><li><p>往后的调用则将参数s设置成NULL，每次调用成功则返回指向被分割出片段的指针</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> a[<span class="hljs-number">100</span>] = <span class="hljs-string">&quot;adc*fvcv*ebcy*hghbdfg*casdert&quot;</span>;<br><span class="hljs-type">char</span> *s = strtok(a, <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//将&quot;*&quot;分割的子串取出</span><br><span class="hljs-keyword">while</span> (s != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s);<br>s = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(12) atoi()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">atoi</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *nptr)</span>;<br>功能：atoi()会扫描nptr字符串，跳过前面的空格字符，直到遇到数字或正负号才开始做转换，而遇到非数字或字符串结束符(<span class="hljs-string">&#x27;\0&#x27;</span>)才结束转换，并将结果返回返回值。<br>参数：<br>nptr：待转换的字符串<br>返回值：成功转换后整数<br></code></pre></td></tr></table></figure><p>类似的函数有：</p><ul><li><p>atof()：把一个小数形式的字符串转化为一个浮点数。</p></li><li><p>atol()：将一个字符串转化为long类型</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;-10&quot;</span>;<br><span class="hljs-type">int</span> num1 = atoi(str1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num1 = %d\n&quot;</span>, num1);<br><br><span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot;0.123&quot;</span>;<br><span class="hljs-type">double</span> num2 = atof(str2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num2 = %lf\n&quot;</span>, num2);<br></code></pre></td></tr></table></figure></blockquote><h4 id="7-7-指针小结"><a href="#7-7-指针小结" class="headerlink" title="7.7 指针小结"></a>7.7 指针小结</h4><p><img src="/road2dasheng/img/07/image-20230324132455816.png" alt="image-20230324132455816"></p><hr><h3 id="八、内存管理"><a href="#八、内存管理" class="headerlink" title="八、内存管理"></a>八、内存管理</h3><h4 id="8-1-作用域"><a href="#8-1-作用域" class="headerlink" title="8.1 作用域"></a>8.1 作用域</h4><blockquote><p>C语言变量的作用域分为：</p><ul><li><p>代码块作用域(代码块是{}之间的一段代码)</p></li><li><p>函数作用域</p></li><li><p>文件作用域</p></li></ul></blockquote><h5 id="8-1-1-局部变量"><a href="#8-1-1-局部变量" class="headerlink" title="8.1.1 局部变量"></a>8.1.1 局部变量</h5><blockquote><p>局部变量也叫auto自动变量(auto可写可不写)，一般情况下代码块{}内部定义的变量都是自动变量，它有如下特点：</p><ul><li><p>在一个函数内定义，只在函数范围内有效</p></li><li><p>在复合语句中定义，只在复合语句中有效</p></li><li><p>随着函数调用的结束或复合语句的结束局部变量的声明声明周期也结束</p></li><li><p>如果没有赋初值，内容为随机</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//auto写不写是一样的</span><br><span class="hljs-comment">//auto只能出现在&#123;&#125;内部</span><br><span class="hljs-keyword">auto</span> <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>; <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">//b = 100; //err， 在main作用域中没有b</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//在复合语句中定义，只在复合语句中有效</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br>&#125;<br><br><span class="hljs-comment">//a = 10; //err离开if()的复合语句，a已经不存在</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="8-1-2-静态-static-局部变量"><a href="#8-1-2-静态-static-局部变量" class="headerlink" title="8.1.2 静态(static)局部变量"></a>8.1.2 静态(static)局部变量</h5><blockquote><ul><li><p>static局部变量的作用域也是在定义的函数内有效</p></li><li><p>static局部变量的生命周期和程序运行周期一样，同时staitc局部变量的值只初始化一次，但可以赋值多次</p></li><li><p>static局部变量若未赋以初值，则由系统自动赋值：数值型变量自动赋初值0，字符型变量赋空字符</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun1</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>i++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, i);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun2</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//静态局部变量，没有赋值，系统赋值为0，而且只会初始化一次</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a;<br>a++;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>fun1();<br>fun1();<br>fun2();<br>fun2();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="8-1-3-全局变量"><a href="#8-1-3-全局变量" class="headerlink" title="8.1.3 全局变量"></a>8.1.3 全局变量</h5><blockquote><ul><li>在函数外定义，可被本文件及其它文件中的函数所共用，若其它文件中的函数调用此变量,须用extern声明</li><li>全局变量的生命周期和程序运行周期一样</li><li>不同文件的全局变量不可重名</li></ul></blockquote><h5 id="8-1-4-静态（static）全局变量"><a href="#8-1-4-静态（static）全局变量" class="headerlink" title="8.1.4 静态（static）全局变量"></a>8.1.4 静态（static）全局变量</h5><blockquote><ul><li><p>在函数外定义,作用范围被限制在所定义的文件中</p></li><li><p>不同文件静态全局变量可以重名,但作用域不冲突</p></li><li><p>static全局变量的生命周期和程序运行周期一样，同时staitc全局变量的值只初始化一次</p></li></ul></blockquote><h5 id="8-1-5-extern全局变量声明"><a href="#8-1-5-extern全局变量声明" class="headerlink" title="8.1.5 extern全局变量声明"></a>8.1.5 extern全局变量声明</h5><blockquote><p><code>extern int a;</code></p><p>声明一个变量，这个全局变量在别的文件中已经定义了，这里只是声明，而不是定义。</p></blockquote><h5 id="8-1-6-全局函数和静态函数"><a href="#8-1-6-全局函数和静态函数" class="headerlink" title="8.1.6 全局函数和静态函数"></a>8.1.6 全局函数和静态函数</h5><blockquote><ul><li>在C语言中函数默认都是全局的，使用关键字static可以将函数声明为静态，函数定义为static就意味着这个函数只能在定义这个函数的文件中使用，在其他文件中不能调用，即使在其他文件中声明这个函数都没用。</li><li>对于不同文件中的staitc函数名字可以相同。</li></ul><p><img src="/road2dasheng/img/07/clip_image002-16795970757121.jpg" alt="2016-06-05_011701"></p><p>注意：</p><ul><li>允许在不同的函数中使用相同的变量名，它们代表不同的对象，分配不同的单元，互不干扰。</li><li>同一源文件中,允许全局变量和局部变量同名，在局部变量的作用域内，全局变量不起作用。</li><li>所有的函数默认都是全局的，意味着所有的函数都不能重名，但如果是staitc函数，那么作用域是文件级的，所以不同的文件static函数名是可以相同的。</li></ul></blockquote><h5 id="8-1-7-总结"><a href="#8-1-7-总结" class="headerlink" title="8.1.7 总结"></a>8.1.7 总结</h5><p><img src="/road2dasheng/img/07/image-20230324024839525.png" alt="image-20230324024839525"></p><h4 id="8-2-内存布局"><a href="#8-2-内存布局" class="headerlink" title="8.2 内存布局"></a>8.2 内存布局</h4><h5 id="8-2-1-内存分区"><a href="#8-2-1-内存分区" class="headerlink" title="8.2.1 内存分区"></a>8.2.1 内存分区</h5><blockquote><p>C代码经过预处理、编译、汇编、链接4步后生成一个可执行程序。</p><p>在 Windows 下，程序是一个普通的可执行文件，以下列出一个二进制可执行文件的基本情况：</p><p><img src="/road2dasheng/img/07/clip_image002-16795974127373.jpg" alt="20150418160103391"></p></blockquote><blockquote><ul><li>代码区</li></ul><p>存放 CPU 执行的机器指令。通常代码区是可共享的（即另外的执行程序可以调用它），使其可共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。&#x3D;&#x3D;代码区通常是只读的&#x3D;&#x3D;，使其只读的原因是防止程序意外地修改了它的指令。另外，代码区还规划了局部变量的相关信息。</p><ul><li>全局初始化数据区&#x2F;静态数据区（data段）</li></ul><p>该区包含了在程序中明确被初始化的全局变量、已经初始化的静态变量（包括全局静态变量和局部静态变量）和常量数据（如字符串常量）。</p><ul><li>未初始化数据区（又叫 bss 区）</li></ul><p>存入的是全局未初始化变量和未初始化静态变量。未初始化数据区的数据在程序开始执行之前被内核初始化为 0 或者空（NULL）。</p><p>程序在加载到内存前，&#x3D;&#x3D;代码区和全局区(data和bss)的大小就是固定的&#x3D;&#x3D;，程序运行期间不能改变。然后，运行可执行程序，系统把程序加载到内存，除了根据可执行程序的信息分出代码区（text）、数据区（data）和未初始化数据区（bss）之外，还额外增加了栈区、堆区。</p></blockquote><p><img src="/road2dasheng/img/07/clip_image002-16795978373245.jpg" alt="img"></p><blockquote><ul><li>代码区（text segment）</li></ul><p>加载的是可执行文件代码段，所有的可执行代码都加载到代码区，这块内存是不可以在运行期间修改的。</p><ul><li>未初始化数据区（BSS）</li></ul><p>加载的是可执行文件BSS段，位置可以分开亦可以紧靠数据段，存储于数据段的数据（全局未初始化，静态未初始化数据）的生存周期为整个程序运行过程。</p><ul><li>全局初始化数据区&#x2F;静态数据区（data segment）</li></ul><p>加载的是可执行文件数据段，存储于数据段（全局初始化，静态初始化数据，文字常量(只读)）的数据的生存周期为整个程序运行过程。</p><ul><li>栈区（stack）</li></ul><p>栈是一种先进后出的内存结构，由编译器自动分配释放，存放函数的参数值、返回值、局部变量等。在程序运行过程中实时加载和释放，因此，局部变量的生存周期为申请到释放该段栈空间。</p><ul><li>堆区（heap）</li></ul><p>堆是一个大容器，它的容量要远远大于栈，但没有栈那样先进后出的顺序。用于动态内存分配。堆在内存中位于BSS区和栈区之间。一般由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</p></blockquote><h5 id="8-2-2-存储类型总结"><a href="#8-2-2-存储类型总结" class="headerlink" title="8.2.2 存储类型总结"></a>8.2.2 存储类型总结</h5><p><img src="/road2dasheng/img/07/image-20230324030111573.png" alt="image-20230324030111573"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> e;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> f;<br><span class="hljs-type">int</span> g = <span class="hljs-number">10</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> h = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> c;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> d = <span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> *i = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-type">char</span> *k = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;a\t %p\t //局部未初始化变量\n&quot;</span>, &amp;a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;b\t %p\t //局部初始化变量\n&quot;</span>, &amp;b);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;c\t %p\t //静态局部未初始化变量\n&quot;</span>, &amp;c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;d\t %p\t //静态局部初始化变量\n&quot;</span>, &amp;d);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;e\t %p\t //全局未初始化变量\n&quot;</span>, &amp;e);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;f\t %p\t //全局静态未初始化变量\n&quot;</span>, &amp;f);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;g\t %p\t //全局初始化变量\n&quot;</span>, &amp;g);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&amp;h\t %p\t //全局静态初始化变量\n&quot;</span>, &amp;h);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i\t %p\t //只读数据(文字常量区)\n&quot;</span>, i);<br><br>k = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;k\t %p\t //动态分配的内存\n&quot;</span>, k);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-2-3-内存操作函数"><a href="#8-2-3-内存操作函数" class="headerlink" title="8.2.3 内存操作函数"></a>8.2.3 内存操作函数</h5><blockquote><p>(1)  memset()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">memset</span><span class="hljs-params">(<span class="hljs-type">void</span> *s, <span class="hljs-type">int</span> c, <span class="hljs-type">size_t</span> n)</span>;<br>功能：将s的内存区域的前n个字节以参数c填入<br>参数：<br>s：需要操作内存s的首地址<br>c：填充的字符，c虽然参数为<span class="hljs-type">int</span>，但必须是<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> , 范围为<span class="hljs-number">0</span>~<span class="hljs-number">255</span><br>n：指定需要设置的大小<br>返回值：s的首地址<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>];<br><br><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(a));<br><span class="hljs-built_in">memset</span>(a, <span class="hljs-number">97</span>, <span class="hljs-keyword">sizeof</span>(a));<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, a[i]);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) memcpy()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> n)</span>;<br>功能：拷贝src所指的内存内容的前n个字节到dest所值的内存地址上。<br>参数：<br>dest：目的内存首地址<br>src：源内存首地址，注意：dest和src所指的内存空间不可重叠，可能会导致程序报错<br>n：需要拷贝的字节数<br>返回值：dest的首地址<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<br><span class="hljs-type">int</span> b[<span class="hljs-number">10</span>];<br><br><span class="hljs-built_in">memcpy</span>(b, a, <span class="hljs-keyword">sizeof</span>(a));<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d, &quot;</span>, b[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-comment">//memcpy(&amp;a[3], a, 5 * sizeof(int)); //err, 内存重叠</span><br></code></pre></td></tr></table></figure></blockquote><p>(3) memmove()</p><blockquote><p>memmove()功能用法和memcpy()一样，区别在于：dest和src所指的内存空间重叠时，memmove()仍然能处理，不过执行效率比memcpy()低些。</p></blockquote><p>(4) memcmp()</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">memcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *s2, <span class="hljs-type">size_t</span> n)</span>;<br>功能：比较s1和s2所指向内存区域的前n个字节<br>参数：<br>s1：内存首地址<span class="hljs-number">1</span><br>s2：内存首地址<span class="hljs-number">2</span><br>n：需比较的前n个字节<br>返回值：<br>相等：=<span class="hljs-number">0</span><br>大于：&gt;<span class="hljs-number">0</span><br>小于：&lt;<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<br><span class="hljs-type">int</span> b[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<br><br><span class="hljs-type">int</span> flag = <span class="hljs-built_in">memcmp</span>(a, b, <span class="hljs-keyword">sizeof</span>(a));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag = %d\n&quot;</span>, flag);<br></code></pre></td></tr></table></figure></blockquote><h5 id="8-2-4-堆区内存分配和释放"><a href="#8-2-4-堆区内存分配和释放" class="headerlink" title="8.2.4 堆区内存分配和释放"></a>8.2.4 堆区内存分配和释放</h5><blockquote><p>(1) malloc()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br>功能：在内存的动态存储区(堆区)中分配一块长度为size字节的连续区域，用来存放类型说明符指定的类型。分配的内存空间内容不确定，一般使用<span class="hljs-built_in">memset</span>初始化。<br>参数：<br>size：需要分配内存大小(单位：字节)<br>返回值：<br>成功：分配空间的起始地址<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> count, *<span class="hljs-built_in">array</span>, n;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入要申请数组的个数:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br><span class="hljs-built_in">array</span> = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">int</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span> == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;申请空间失败!\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//将申请到空间清0</span><br><span class="hljs-built_in">memset</span>(<span class="hljs-built_in">array</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*n);<br><br><span class="hljs-keyword">for</span> (count = <span class="hljs-number">0</span>; count &lt; n; count++) <span class="hljs-comment">/*给数组赋值*/</span><br><span class="hljs-built_in">array</span>[count] = count;<br><br><span class="hljs-keyword">for</span> (count = <span class="hljs-number">0</span>; count &lt; n; count++) <span class="hljs-comment">/*打印数组元素*/</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%2d&quot;</span>, <span class="hljs-built_in">array</span>[count]);<br><br><span class="hljs-built_in">free</span>(<span class="hljs-built_in">array</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) free()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr)</span>;<br>功能：释放ptr所指向的一块内存空间，ptr是一个任意类型的指针变量，指向被释放区域的首地址。对同一内存空间多次释放会出错。<br>参数：<br>ptr：需要释放空间的首地址，被释放区应是由<span class="hljs-built_in">malloc</span>函数所分配的区域。<br>返回值：无<br></code></pre></td></tr></table></figure></blockquote><h4 id="8-3-内存分区代码分析"><a href="#8-3-内存分区代码分析" class="headerlink" title="8.3 内存分区代码分析"></a>8.3 内存分区代码分析</h4><blockquote><p>(1) 返回栈区地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> *<span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> &amp;a;<span class="hljs-comment">//函数调用完毕，a释放</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br>p = fun();<br>*p = <span class="hljs-number">100</span>; <span class="hljs-comment">//操作野指针指向的内存,err</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 返回data区地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> *<span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> &amp;a; <span class="hljs-comment">//函数调用完毕，a不释放</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br>p = fun();<br>*p = <span class="hljs-number">100</span>; <span class="hljs-comment">//ok</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %d\n&quot;</span>, *p);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) 值传递1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> *tmp)</span><br>&#123;<br>tmp = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>*tmp = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br>fun(p); <span class="hljs-comment">//值传递，形参修改不会影响实参</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %d\n&quot;</span>, *p);<span class="hljs-comment">//err，操作空指针指向的内存</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(4) 值传递2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> *tmp)</span><br>&#123;<br>*tmp = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br>p = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>fun(p); <span class="hljs-comment">//值传递</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %d\n&quot;</span>, *p); <span class="hljs-comment">//ok，*p为100</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(5) 返回堆区地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> *<span class="hljs-title function_">fun</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *tmp = <span class="hljs-literal">NULL</span>;<br>tmp = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>*tmp = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">return</span> tmp;<span class="hljs-comment">//返回堆区地址，函数调用完毕，不释放</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br>p = fun();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*p = %d\n&quot;</span>, *p);<span class="hljs-comment">//ok</span><br><br><span class="hljs-comment">//堆区空间，使用完毕，手动释放</span><br><span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(p);<br>p = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h3 id="九、复合类型（自定义类型）"><a href="#九、复合类型（自定义类型）" class="headerlink" title="九、复合类型（自定义类型）"></a>九、复合类型（自定义类型）</h3><h4 id="9-1-结构体"><a href="#9-1-结构体" class="headerlink" title="9.1 结构体"></a>9.1 结构体</h4><h5 id="9-1-1-概述"><a href="#9-1-1-概述" class="headerlink" title="9.1.1 概述"></a>9.1.1 概述</h5><blockquote><p>数组：描述一组具有相同类型数据的有序集合，用于处理大量相同类型的数据运算。</p><p>有时我们需要将不同类型的数据组合成一个有机的整体，如：一个学生有学号&#x2F;姓名&#x2F;性别&#x2F;年龄&#x2F;地址等属性。显然单独定义以上变量比较繁琐，数据不便于管理。</p><p>Ｃ语言中给出了另一种构造数据类型——结构体。</p><p><img src="/road2dasheng/img/07/clip_image002-16795989959877.jpg" alt="2016-06-05_152127"></p></blockquote><h5 id="9-1-2-结构体变量的定义和初始化"><a href="#9-1-2-结构体变量的定义和初始化" class="headerlink" title="9.1.2 结构体变量的定义和初始化"></a>9.1.2 结构体变量的定义和初始化</h5><blockquote><p>定义结构体变量的方式：</p><ul><li><p>先声明结构体类型再定义变量名</p></li><li><p>在声明类型的同时定义变量</p></li><li><p>直接定义结构体类型变量（无类型名）</p></li></ul><p> <img src="/road2dasheng/img/07/clip_image002-16795990699969.jpg" alt="2016-06-05_153150"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">//先定义类型，再定义变量（常用）</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s1</span> =</span> &#123; <span class="hljs-string">&quot;mike&quot;</span>, <span class="hljs-number">18</span> &#125;;<br><br><br><span class="hljs-comment">//定义类型同时定义变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;s2 = &#123; <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-number">22</span> &#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;s3 = &#123; <span class="hljs-string">&quot;yuri&quot;</span>, <span class="hljs-number">25</span> &#125;;<br></code></pre></td></tr></table></figure></blockquote><h5 id="9-1-3-结构体成员的使用"><a href="#9-1-3-结构体成员的使用" class="headerlink" title="9.1.3 结构体成员的使用"></a>9.1.3 结构体成员的使用</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s1</span>;</span><br><br><span class="hljs-comment">//如果是普通变量，通过点运算符操作结构体成员</span><br><span class="hljs-built_in">strcpy</span>(s1.name, <span class="hljs-string">&quot;abc&quot;</span>);<br>s1.age = <span class="hljs-number">18</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s1.name = %s, s1.age = %d\n&quot;</span>, s1.name, s1.age);<br><br><span class="hljs-comment">//如果是指针变量，通过-&gt;操作结构体成员</span><br><span class="hljs-built_in">strcpy</span>((&amp;s1)-&gt;name, <span class="hljs-string">&quot;test&quot;</span>);<br>(&amp;s1)-&gt;age = <span class="hljs-number">22</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&amp;s1)-&gt;name = %s, (&amp;s1)-&gt;age = %d\n&quot;</span>, (&amp;s1)-&gt;name, (&amp;s1)-&gt;age);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="9-1-4-结构体数组"><a href="#9-1-4-结构体数组" class="headerlink" title="9.1.4 结构体数组"></a>9.1.4 结构体数组</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//统计学生成绩</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> num;<br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-type">char</span> sex;<br><span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//定义一个含有5个元素的结构体数组并将其初始化</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy</span>[5] =</span> &#123;<br>&#123; <span class="hljs-number">101</span>, <span class="hljs-string">&quot;Li ping&quot;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">45</span> &#125;,<br>&#123; <span class="hljs-number">102</span>, <span class="hljs-string">&quot;Zhang ping&quot;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">62.5</span> &#125;,<br>&#123; <span class="hljs-number">103</span>, <span class="hljs-string">&quot;He fang&quot;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">92.5</span> &#125;,<br>&#123; <span class="hljs-number">104</span>, <span class="hljs-string">&quot;Cheng ling&quot;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">87</span> &#125;,<br>&#123; <span class="hljs-number">105</span>, <span class="hljs-string">&quot;Wang ming&quot;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">58</span> &#125;&#125;;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-type">float</span> ave, s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>s += boy[i].score;<span class="hljs-comment">//计算总分</span><br><span class="hljs-keyword">if</span> (boy[i].score &lt; <span class="hljs-number">60</span>)<br>&#123;<br>c += <span class="hljs-number">1</span>;<span class="hljs-comment">//统计不及格人的分数</span><br>&#125;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s=%f\n&quot;</span>, s);<span class="hljs-comment">//打印总分数</span><br>ave = s / <span class="hljs-number">5</span>;<span class="hljs-comment">//计算平均分数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;average=%f\ncount=%d\n\n&quot;</span>, ave, c); <span class="hljs-comment">//打印平均分与不及格人数</span><br><br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; name=%s,  score=%f\n&quot;</span>, boy[i].name, boy[i].score);<br>           <span class="hljs-comment">// printf(&quot; name=%s,  score=%f\n&quot;, (boy+i)-&gt;name, (boy+i)-&gt;score);</span><br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="9-1-5-结构体套结构体"><a href="#9-1-5-结构体套结构体" class="headerlink" title="9.1.5 结构体套结构体"></a>9.1.5 结构体套结构体</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-type">char</span> sex;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> id;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">person</span> <span class="hljs-title">info</span>;</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s</span>[2] =</span> &#123; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;yuri&quot;</span>, <span class="hljs-string">&#x27;M&#x27;</span> &#125;;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;id = %d\tinfo.name=%s\tinfo.sex=%c\n&quot;</span>, s[i].id, s[i].info.name, s[i].info.sex);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="9-1-6-结构体赋值"><a href="#9-1-6-结构体赋值" class="headerlink" title="9.1.6 结构体赋值"></a>9.1.6 结构体赋值</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s1</span>;</span><br><br><span class="hljs-comment">//如果是普通变量，通过点运算符操作结构体成员</span><br><span class="hljs-built_in">strcpy</span>(s1.name, <span class="hljs-string">&quot;abc&quot;</span>);<br>s1.age = <span class="hljs-number">18</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s1.name = %s, s1.age = %d\n&quot;</span>, s1.name, s1.age);<br><br><span class="hljs-comment">//相同类型的两个结构体变量，可以相互赋值</span><br><span class="hljs-comment">//把s1成员变量的值拷贝给s2成员变量的内存</span><br><span class="hljs-comment">//s1和s2只是成员变量的值一样而已，它们还是没有关系的两个变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s2</span> =</span> s1;<br><span class="hljs-comment">//memcpy(&amp;s2, &amp;s1, sizeof(s1));</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s2.name = %s, s2.age = %d\n&quot;</span>, s2.name, s2.age);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="9-1-7-结构体和指针"><a href="#9-1-7-结构体和指针" class="headerlink" title="9.1.7 结构体和指针"></a>9.1.7 结构体和指针</h5><blockquote><p>(1) 指向普通结构体变量的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s1</span> =</span> &#123; <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-number">18</span> &#125;;<br><br><span class="hljs-comment">//如果是指针变量，通过-&gt;操作结构体成员</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span> =</span> &amp;s1;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p-&gt;name = %s, p-&gt;age=%d\n&quot;</span>, p-&gt;name, p-&gt;age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(*p).name = %s, (*p).age=%d\n&quot;</span>,  (*p).name,  (*p).age);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 堆区结构体变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>p = (<span class="hljs-keyword">struct</span> stu *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span>  stu));<br><br><span class="hljs-comment">//如果是指针变量，通过-&gt;操作结构体成员</span><br><span class="hljs-built_in">strcpy</span>(p-&gt;name, <span class="hljs-string">&quot;test&quot;</span>);<br>p-&gt;age = <span class="hljs-number">22</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p-&gt;name = %s, p-&gt;age=%d\n&quot;</span>, p-&gt;name, p-&gt;age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(*p).name = %s, (*p).age=%d\n&quot;</span>, (*p).name,  (*p).age);<br><br><span class="hljs-built_in">free</span>(p);<br>p = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) 结构体套一级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> *name; <span class="hljs-comment">//一级指针</span><br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>p = (<span class="hljs-keyword">struct</span> stu *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span>  stu));<br><br>p-&gt;name = <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;test&quot;</span>) + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">strcpy</span>(p-&gt;name, <span class="hljs-string">&quot;test&quot;</span>);<br>p-&gt;age = <span class="hljs-number">22</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p-&gt;name = %s, p-&gt;age=%d\n&quot;</span>, p-&gt;name, p-&gt;age);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(*p).name = %s, (*p).age=%d\n&quot;</span>, (*p).name, (*p).age);<br><br><span class="hljs-keyword">if</span> (p-&gt;name != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(p-&gt;name);<br>p-&gt;name = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(p);<br>p = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="9-1-8-结构体做函数参数"><a href="#9-1-8-结构体做函数参数" class="headerlink" title="9.1.8 结构体做函数参数"></a>9.1.8 结构体做函数参数</h5><blockquote><p>(1) 结构体普通变量做函数参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">//函数参数为结构体普通变量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_stu</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu tmp)</span><br>&#123;<br><span class="hljs-built_in">strcpy</span>(tmp.name, <span class="hljs-string">&quot;mike&quot;</span>);<br>tmp.age = <span class="hljs-number">18</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tmp.name = %s, tmp.age = %d\n&quot;</span>, tmp.name, tmp.age);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s</span> =</span> &#123; <span class="hljs-number">0</span> &#125;;<br>set_stu(s); <span class="hljs-comment">//值传递</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s.name = %s, s.age = %d\n&quot;</span>, s.name, s.age);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 结构体指针变量做函数参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c">include&lt;stdio.h&gt;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">//函数参数为结构体指针变量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_stu_pro</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *tmp)</span><br>&#123;<br><span class="hljs-built_in">strcpy</span>(tmp-&gt;name, <span class="hljs-string">&quot;mike&quot;</span>);<br>tmp-&gt;age = <span class="hljs-number">18</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s</span> =</span> &#123; <span class="hljs-number">0</span> &#125;;<br>set_stu_pro(&amp;s); <span class="hljs-comment">//地址传递</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s.name = %s, s.age = %d\n&quot;</span>, s.name, s.age);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) 结构体数组名做函数参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">//void set_stu_pro(struct stu tmp[100], int n)</span><br><span class="hljs-comment">//void set_stu_pro(struct stu tmp[], int n)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_stu_pro</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu *tmp, <span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">sprintf</span>(tmp-&gt;name, <span class="hljs-string">&quot;name%d%d%d&quot;</span>, i, i, i);<br>tmp-&gt;age = <span class="hljs-number">20</span> + i;<br>tmp++;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">s</span>[3] =</span> &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-keyword">sizeof</span>(s) / <span class="hljs-keyword">sizeof</span>(s[<span class="hljs-number">0</span>]);<br>set_stu_pro(s, n); <span class="hljs-comment">//数组名传递</span><br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s, %d\n&quot;</span>, s[i].name, s[i].age);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(4) const修饰结构体指针形参变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//结构体类型的定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun1</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> stu * <span class="hljs-type">const</span> p)</span><br>&#123;<br><span class="hljs-comment">//p = NULL; //err</span><br>p-&gt;age = <span class="hljs-number">10</span>; <span class="hljs-comment">//ok</span><br>&#125;<br><br><span class="hljs-comment">//void fun2(struct stu const*  p)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> stu *  p)</span><br>&#123;<br>p = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">//ok</span><br><span class="hljs-comment">//p-&gt;age = 10; //err</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">fun3</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> stu * <span class="hljs-type">const</span> p)</span><br>&#123;<br><span class="hljs-comment">//p = NULL; //err</span><br><span class="hljs-comment">//p-&gt;age = 10; //err</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="9-2-共用体（联合体）"><a href="#9-2-共用体（联合体）" class="headerlink" title="9.2 共用体（联合体）"></a>9.2 共用体（联合体）</h4><blockquote><ul><li><p>联合union是一个能在同一个存储空间存储不同类型数据的类型；</p></li><li><p>联合体所占的内存长度等于其最长成员的长度倍数，也有叫做共用体；</p></li><li><p>同一内存段可以用来存放几种不同类型的成员，但每一瞬时只有一种起作用；</p></li><li><p>共用体变量中起作用的成员是最后一次存放的成员，在存入一个新的成员后原有的成员的值会被覆盖；</p></li><li><p>共用体变量的地址和它的各成员的地址都是同一地址。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//共用体也叫联合体 </span><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> b;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> c;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//定义共用体变量</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Test</span> <span class="hljs-title">tmp</span>;</span><br><br><span class="hljs-comment">//1、所有成员的首地址是一样的</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p, %p, %p\n&quot;</span>, &amp;(tmp.a), &amp;(tmp.b), &amp;(tmp.c));<br><br><span class="hljs-comment">//2、共用体大小为最大成员类型的大小</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lu\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">union</span> Test));<br><br><span class="hljs-comment">//3、一个成员赋值，会影响另外的成员</span><br><span class="hljs-comment">//左边是高位，右边是低位</span><br><span class="hljs-comment">//低位放低地址，高位放高地址</span><br>tmp.b = <span class="hljs-number">0x44332211</span>;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, tmp.a); <span class="hljs-comment">//11</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>, tmp.c); <span class="hljs-comment">//2211</span><br><br>tmp.a = <span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;short: %x\n&quot;</span>, tmp.c); <span class="hljs-comment">//2200</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;int: %x\n&quot;</span>, tmp.b); <span class="hljs-comment">//44332200</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="9-3-枚举"><a href="#9-3-枚举" class="headerlink" title="9.3 枚举"></a>9.3 枚举</h4><blockquote><p>枚举：将变量的值一一列举出来，变量的值只限于列举出来的值的范围内。</p><p>枚举类型定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span>  枚举名</span><br><span class="hljs-class">&#123;</span><br>枚举值表<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>在枚举值表中应列出所有可用值，也称为枚举元素。</p></li><li><p>枚举值是常量，不能在程序中用赋值语句再对它赋值。</p></li><li><p>枚举元素本身由系统定义了一个表示序号的数值从0开始顺序定义为0，1，2 …</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">weekday</span></span><br><span class="hljs-class">&#123;</span><br>sun = <span class="hljs-number">2</span>, mon, tue, wed, thu, fri, sat<br>&#125; ;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">bool</span></span><br><span class="hljs-class">&#123;</span><br>flase, <span class="hljs-literal">true</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">weekday</span> <span class="hljs-title">a</span>, <span class="hljs-title">b</span>, <span class="hljs-title">c</span>;</span><br>a = sun;<br>b = mon;<br>c = tue;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%d,%d\n&quot;</span>, a, b, c);<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">bool</span> <span class="hljs-title">flag</span>;</span><br>flag = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag为真\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="9-4-typedef"><a href="#9-4-typedef" class="headerlink" title="9.4 typedef"></a>9.4 typedef</h4><blockquote><p>typedef为C语言的关键字，作用是为一种数据类型(基本类型或自定义数据类型)定义一个新名字，&#x3D;&#x3D;不能创建新类型。&#x3D;&#x3D;</p><ul><li><p>与#define不同，typedef仅限于数据类型，而不是能是表达式或具体的值</p></li><li><p>#define发生在预处理，typedef发生在编译阶段</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> INT;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> BYTE;<br><span class="hljs-keyword">typedef</span> BYTE T_BYTE;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> UBYTE;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">type</span></span><br><span class="hljs-class">&#123;</span><br>UBYTE a;<br>INT b;<br>T_BYTE c;<br>&#125;TYPE, *PTYPE;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>TYPE t;<br>t.a = <span class="hljs-number">254</span>;<br>t.b = <span class="hljs-number">10</span>;<br>t.c = <span class="hljs-string">&#x27;c&#x27;</span>;<br><br>PTYPE p = &amp;t;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u, %d, %c\n&quot;</span>, p-&gt;a, p-&gt;b, p-&gt;c);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><hr><h3 id="十、文件操作"><a href="#十、文件操作" class="headerlink" title="十、文件操作"></a>十、文件操作</h3><h4 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h4><h5 id="10-1-1-磁盘文件和设备文件"><a href="#10-1-1-磁盘文件和设备文件" class="headerlink" title="10.1.1 磁盘文件和设备文件"></a>10.1.1 磁盘文件和设备文件</h5><blockquote><ul><li><p>磁盘文件</p><p>指一组相关数据的有序集合,通常存储在外部介质(如磁盘)上，使用时才调入内存。</p></li><li><p>设备文件</p><p>在操作系统中把每一个与主机相连的输入、输出设备看作是一个文件，把它们的输入、输出等同于对磁盘文件的读和写。</p></li></ul></blockquote><h5 id="10-1-2-磁盘文件的分类"><a href="#10-1-2-磁盘文件的分类" class="headerlink" title="10.1.2 磁盘文件的分类"></a>10.1.2 磁盘文件的分类</h5><blockquote><p>计算机的存储在物理上是二进制的，所以物理上所有的磁盘文件本质上都是一样的：以字节为单位进行顺序存储。</p><p><img src="/road2dasheng/img/07/clip_image002-167960074957211.jpg" alt="2016-06-06_150022"></p><p>从用户或者操作系统使用的角度（逻辑上）把文件分为：</p><ul><li><p>文本文件：基于字符编码的文件 </p></li><li><p>二进制文件：基于值编码的文件</p></li></ul></blockquote><h5 id="10-1-3-文本文件和二进制文件"><a href="#10-1-3-文本文件和二进制文件" class="headerlink" title="10.1.3 文本文件和二进制文件"></a>10.1.3 文本文件和二进制文件</h5><blockquote><p>(1) 文本文件</p><ul><li><p>基于字符编码，常见编码有ASCII、UNICODE等</p></li><li><p>一般可以使用文本编辑器直接打开</p></li><li><p>数5678的以ASCII存储形式(ASCII码)为：00110101 00110110 00110111 00111000</p></li></ul></blockquote><blockquote><p>(2) 二进制文件</p><ul><li><p>基于值编码,自己根据具体应用,指定某个值是什么意思</p></li><li><p>把内存中的数据按其在内存中的存储形式原样输出到磁盘上</p></li><li><p>数5678的存储形式(二进制码)为：</p><p>00010110 00101110</p></li></ul></blockquote><h4 id="10-2-文件的打开和关闭"><a href="#10-2-文件的打开和关闭" class="headerlink" title="10.2 文件的打开和关闭"></a>10.2 文件的打开和关闭</h4><h5 id="10-2-1-文件指针"><a href="#10-2-1-文件指针" class="headerlink" title="10.2.1 文件指针"></a>10.2.1 文件指针</h5><blockquote><p>在C语言中用一个指针变量指向一个文件，这个指针称为文件指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">short</span>           level;<span class="hljs-comment">//缓冲区&quot;满&quot;或者&quot;空&quot;的程度 </span><br><span class="hljs-type">unsigned</span>        flags;<span class="hljs-comment">//文件状态标志 </span><br><span class="hljs-type">char</span>            fd;<span class="hljs-comment">//文件描述符</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>   hold;<span class="hljs-comment">//如无缓冲区不读取字符</span><br><span class="hljs-type">short</span>           bsize;<span class="hljs-comment">//缓冲区的大小</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>   *buffer;<span class="hljs-comment">//数据缓冲区的位置 </span><br><span class="hljs-type">unsigned</span>        ar; <span class="hljs-comment">//指针，当前的指向 </span><br><span class="hljs-type">unsigned</span>        istemp;<span class="hljs-comment">//临时文件，指示器</span><br><span class="hljs-type">short</span>           token;<span class="hljs-comment">//用于有效性的检查 </span><br>&#125;FILE;<br></code></pre></td></tr></table></figure><p>FILE是系统使用typedef定义出来的有关文件信息的一种结构体类型，结构中含有文件名、文件状态和文件当前位置等信息。</p><p>声明FILE结构体类型的信息包含在头文件“stdio.h”中，一般设置一个指向FILE类型变量的指针变量，然后通过它来引用这些FILE类型变量。通过文件指针就可对它所指的文件进行各种操作。</p><p><img src="/road2dasheng/img/07/clip_image002-167960120906113.png" alt="图片1"></p><p>C语言中有三个特殊的文件指针由系统默认打开，用户无需定义即可直接使用:</p><ul><li>stdin： 标准输入，默认为当前终端（键盘），我们使用的scanf、getchar函数默认从此终端获得数据</li><li>stdout：标准输出，默认为当前终端（屏幕），我们使用的printf、puts函数默认输出信息到此终端</li><li>stderr：标准出错，默认为当前终端（屏幕），我们使用的perror函数默认输出信息到此终端</li></ul></blockquote><h5 id="10-2-2-文件的打开"><a href="#10-2-2-文件的打开" class="headerlink" title="10.2.2 文件的打开"></a>10.2.2 文件的打开</h5><blockquote><p>任何文件使用之前必须打开：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>FILE * <span class="hljs-title function_">fopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * mode)</span>;<br>功能：打开文件<br>参数：<br>filename：需要打开的文件名，根据需要加上路径<br>mode：打开文件的模式设置<br>返回值：<br>成功：文件指针<br>失败：<span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><p>第一个参数的几种形式:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *fp_passwd = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//相对路径：</span><br><span class="hljs-comment">//打开当前目录passdw文件：源文件(源程序)所在目录</span><br>FILE *fp_passwd = fopen(<span class="hljs-string">&quot;passwd.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><br><span class="hljs-comment">//打开当前目录(test)下passwd.txt文件</span><br>fp_passwd = fopen(<span class="hljs-string">&quot;. / test / passwd.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><br><span class="hljs-comment">//打开当前目录上一级目录（相对当前目录）passwd.txt文件</span><br>fp_passwd = fopen(<span class="hljs-string">&quot;.. / passwd.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><br><span class="hljs-comment">//绝对路径：</span><br><span class="hljs-comment">//打开C盘test目录下一个叫passwd.txt文件</span><br>fp_passwd = fopen(<span class="hljs-string">&quot;c:/test/passwd.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br></code></pre></td></tr></table></figure><p>第二个参数的几种形式(打开文件的方式)：</p><p><img src="/road2dasheng/img/07/image-20230324035603692.png" alt="image-20230324035603692"></p><p>注意：</p><ul><li><p>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</p></li><li><p>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</p></li><li><p>在Windows平台下，以“文本”方式打开文件，不加b：</p></li><li><ul><li><ul><li>n 当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li></ul></li></ul></li><li><ul><li><ul><li>n 当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入</li></ul></li></ul></li><li><ul><li><ul><li>-n 以”二进制”方式打开文件，则读\n写都不会进行这样的转换</li></ul></li></ul></li><li><p>在Unix&#x2F;Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>FILE *fp = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// &quot;\\&quot;这样的路径形式，只能在windows使用</span><br><span class="hljs-comment">// &quot;/&quot;这样的路径形式，windows和linux平台下都可用，建议使用这种</span><br><span class="hljs-comment">// 路径可以是相对路径，也可是绝对路径</span><br>fp = fopen(<span class="hljs-string">&quot;../test&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-comment">//fp = fopen(&quot;..\\test&quot;, &quot;w&quot;);</span><br><br><span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">//返回空，说明打开失败</span><br>&#123;<br><span class="hljs-comment">//perror()是标准出错打印函数，能打印调用库函数出错原因</span><br>perror(<span class="hljs-string">&quot;open&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="10-2-3-文件的关闭"><a href="#10-2-3-文件的关闭" class="headerlink" title="10.2.3 文件的关闭"></a>10.2.3 文件的关闭</h5><blockquote><p>任何文件在使用后应该关闭：</p><ul><li><p>打开的文件会占用内存资源，如果总是打开不关闭，会消耗很多内存</p></li><li><p>一个进程同时打开的文件数是有限制的，超过最大同时打开文件数，再次调用fopen打开文件会失败</p></li><li><p>如果没有明确的调用fclose关闭打开的文件，那么程序在退出的时候，操作系统会统一关闭。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span><span class="hljs-params">(FILE * stream)</span>;<br>功能：关闭先前fopen()打开的文件。此动作让缓冲区的数据写入文件中，并释放系统所提供的文件资源。<br>参数：<br>stream：文件指针<br>返回值：<br>成功：<span class="hljs-number">0</span><br>失败：<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE * fp = <span class="hljs-literal">NULL</span>;<br>fp = fopen(<span class="hljs-string">&quot;abc.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>fclose(fp);<br></code></pre></td></tr></table></figure></blockquote><h4 id="10-3-文件的顺序读写"><a href="#10-3-文件的顺序读写" class="headerlink" title="10.3 文件的顺序读写"></a>10.3 文件的顺序读写</h4><h5 id="10-3-1-按照字符读写文件fgetc、fputc"><a href="#10-3-1-按照字符读写文件fgetc、fputc" class="headerlink" title="10.3.1 按照字符读写文件fgetc、fputc"></a>10.3.1 按照字符读写文件fgetc、fputc</h5><blockquote><p>(1) 写文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE * stream)</span>;<br>功能：将ch转换为<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>后写入stream指定的文件中<br>参数：<br>ch：需要写入文件的字符<br>stream：文件指针<br>返回值：<br>成功：成功写入文件的字符<br>失败：返回<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> buf[] = <span class="hljs-string">&quot;this is a test for fputc&quot;</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(buf);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-comment">//往文件fp写入字符buf[i]</span><br><span class="hljs-type">int</span> ch = fputc(buf[i], fp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ch = %c\n&quot;</span>, ch);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 文件结尾</p><p>在C语言中，EOF表示文件结束符(end of file)。在while循环中以EOF作为文件结束标志，这种以EOF作为文件结束标志的文件，必须是文本文件。在文本文件中，数据都是以字符的ASCII代码值的形式存放。我们知道，ASCII代码值的范围是0~127，不可能出现-1，因此可以用EOF作为文件结束标志。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> EOF (-1)</span><br></code></pre></td></tr></table></figure><p>当把数据以二进制形式存放到文件中时，就会有-1值的出现，因此不能采用EOF作为二进制文件的结束标志。为解决这一个问题，ANSI C提供一个feof函数，用来判断文件是否结束。feof函数既可用以判断二进制文件又可用以判断文本文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">feof</span><span class="hljs-params">(FILE * stream)</span>;<br>功能：检测是否读取到了文件结尾。判断的是最后一次“读操作的内容”，不是当前位置内容(上一个内容)。<br>参数：<br>stream：文件指针<br>返回值：<br>非<span class="hljs-number">0</span>值：已经到文件结尾<br><span class="hljs-number">0</span>：没有到文件结尾<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) 读文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span><span class="hljs-params">(FILE * stream)</span>;<br>功能：从stream指定的文件中读取一个字符<br>参数：<br>stream：文件指针<br>返回值：<br>成功：返回读取到的字符<br>失败：<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> ch;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> 0</span><br><span class="hljs-keyword">while</span> ((ch = fgetc(fp)) != EOF)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, ch);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">while</span> (!feof(fp)) <span class="hljs-comment">//文件没有结束，则执行循环</span><br>&#123;<br>ch = fgetc(fp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, ch);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(4) 强化训练：实现vi、cat命令</p><p><img src="/road2dasheng/img/07/clip_image002-167960183161415.jpg" alt="2016-06-06_165816"><img src="/road2dasheng/img/07/clip_image002-167960183819617.jpg" alt="2016-06-06_170326"></p></blockquote><h5 id="10-3-2-按照行读写文件fgets、fputs"><a href="#10-3-2-按照行读写文件fgets、fputs" class="headerlink" title="10.3.2 按照行读写文件fgets、fputs"></a>10.3.2 按照行读写文件fgets、fputs</h5><blockquote><p>(1) 写文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * str, FILE * stream)</span>;<br>功能：将str所指定的字符串写入到stream指定的文件中，字符串结束符 <span class="hljs-string">&#x27;\0&#x27;</span>  不写入文件。 <br>参数：<br>str：字符串<br>stream：文件指针<br>返回值：<span class="hljs-number">6</span><br>成功：<span class="hljs-number">0</span><br>失败：<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *buf[] = &#123; <span class="hljs-string">&quot;123456\n&quot;</span>, <span class="hljs-string">&quot;bbbbbbbbbb\n&quot;</span>, <span class="hljs-string">&quot;ccccccccccc\n&quot;</span> &#125;;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">fputs</span>(buf[i], fp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;len = %d\n&quot;</span>, len);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 读文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">char</span> * <span class="hljs-title function_">fgets</span><span class="hljs-params">(<span class="hljs-type">char</span> * str, <span class="hljs-type">int</span> size, FILE * stream)</span>;<br>功能：从stream指定的文件内读入字符，保存到str所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size - <span class="hljs-number">1</span>个字符为止，最后会自动加上字符 <span class="hljs-string">&#x27;\0&#x27;</span> 作为字符串结束。<br>参数：<br>str：字符串<br>size：指定最大读取字符串的长度（size - <span class="hljs-number">1</span>）<br>stream：文件指针<br>返回值：<br>成功：成功读取的字符串<br>读到文件尾或出错： <span class="hljs-literal">NULL</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span> (!feof(fp)) <span class="hljs-comment">//文件没有结束</span><br>&#123;<br><span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br><span class="hljs-type">char</span> *p = fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), fp);<br><span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;buf = %s&quot;</span>, buf);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) 强化训练：文件版四则运算</p><p>有个文件大小不确定，每行内容都是一个四则运算表达式，还没有算出结果，写一个程序，自动算出其结果后修改文件</p><p><img src="/road2dasheng/img/07/clip_image002-167960198839919.jpg" alt="2016-06-06_172151"></p></blockquote><h5 id="10-3-3-按照格式化文件fprintf、fscanf"><a href="#10-3-3-按照格式化文件fprintf、fscanf" class="headerlink" title="10.3.3 按照格式化文件fprintf、fscanf"></a>10.3.3 按照格式化文件fprintf、fscanf</h5><blockquote><p>(1) 写文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fprintf</span><span class="hljs-params">(FILE * stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * format, ...)</span>;<br>功能：根据参数format字符串来转换并格式化数据，然后将结果输出到stream指定的文件中，指定出现字符串结束符 <span class="hljs-string">&#x27;\0&#x27;</span>  为止。<br>参数：<br>stream：已经打开的文件<br>format：字符串格式，用法和<span class="hljs-built_in">printf</span>()一样<br>返回值：<br>成功：实际写入文件的字符个数<br>失败：<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;%d %d %d\n&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 读文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fscanf</span><span class="hljs-params">(FILE * stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * format, ...)</span>;<br>功能：从stream指定的文件读取字符串，并根据参数format字符串来转换并格式化数据。<br>参数：<br>stream：已经打开的文件<br>format：字符串格式，用法和<span class="hljs-built_in">scanf</span>()一样<br>返回值：<br>成功：参数数目，成功转换的值的个数<br>失败： - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d %d %d\n&quot;</span>, &amp;a, &amp;b, &amp;c);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d, c = %d\n&quot;</span>, a, b, c);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) 强化训练：文件版排序</p><p><img src="/road2dasheng/img/07/clip_image002-167960213196321.jpg" alt="2016-06-06_173443"></p></blockquote><h5 id="10-3-4-按照块读写文件fread、fwrite"><a href="#10-3-4-按照块读写文件fread、fwrite" class="headerlink" title="10.3.4 按照块读写文件fread、fwrite"></a>10.3.4 按照块读写文件fread、fwrite</h5><blockquote><p>(1) 写文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">fwrite</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nmemb, FILE *stream)</span>;<br>功能：以数据块的方式给文件写入内容<br>参数：<br>ptr：准备写入文件数据的地址<br>size： <span class="hljs-type">size_t</span> 为 <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>类型，此参数指定写入文件内容的块数据大小<br>nmemb：写入文件的块数，写入文件数据总大小为：size * nmemb<br>stream：已经打开的文件指针<br>返回值：<br>成功：实际成功写入文件数据的块数目，此值和 nmemb 相等<br>失败：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> id;<br>&#125;Stu;<br><br>Stu s[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">sprintf</span>(s[i].name, <span class="hljs-string">&quot;stu%d%d%d&quot;</span>, i, i, i);<br>s[i].id = i + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> ret = fwrite(s, <span class="hljs-keyword">sizeof</span>(Stu), <span class="hljs-number">3</span>, fp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret = %d\n&quot;</span>, ret);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(2) 读文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nmemb, FILE *stream)</span>;<br>功能：以数据块的方式从文件中读取内容<br>参数：<br>ptr：存放读取出来数据的内存空间<br>size： <span class="hljs-type">size_t</span> 为 <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>类型，此参数指定读取文件内容的块数据大小<br>nmemb：读取文件的块数，读取文件数据总大小为：size * nmemb<br>stream：已经打开的文件指针<br>返回值：<br>成功：实际成功读取到内容的块数，如果此值比nmemb小，但大于<span class="hljs-number">0</span>，说明读到文件的结尾。<br>失败：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> id;<br>&#125;Stu;<br><br>Stu s[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> ret = fread(s, <span class="hljs-keyword">sizeof</span>(Stu), <span class="hljs-number">3</span>, fp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret = %d\n&quot;</span>, ret);<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s = %s, %d\n&quot;</span>, s[i].name, s[i].id);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>(3) 强化训练：大文件拷贝</p><p><img src="/road2dasheng/img/07/clip_image002-167960222548023.jpg" alt="2016-06-06_174408"></p></blockquote><h4 id="10-4-文件的随机读写"><a href="#10-4-文件的随机读写" class="headerlink" title="10.4 文件的随机读写"></a>10.4 文件的随机读写</h4><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fseek</span><span class="hljs-params">(FILE *stream, <span class="hljs-type">long</span> offset, <span class="hljs-type">int</span> whence)</span>;<br>功能：移动文件流（文件光标）的读写位置。<br>参数：<br>stream：已经打开的文件指针<br>offset：根据whence来移动的位移数（偏移量），可以是正数，也可以负数，如果正数，则相对于whence往右移动，如果是负数，则相对于whence往左移动。如果向前移动的字节数超过了文件开头则出错返回，如果向后移动的字节数超过了文件末尾，再次写入时将增大文件尺寸。<br>whence：其取值如下：<br>SEEK_SET：从文件开头移动offset个字节<br>SEEK_CUR：从当前位置移动offset个字节<br>SEEK_END：从文件末尾移动offset个字节<br>返回值：<br>成功：<span class="hljs-number">0</span><br>失败：<span class="hljs-number">-1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">long</span> <span class="hljs-title function_">ftell</span><span class="hljs-params">(FILE *stream)</span>;<br>功能：获取文件流（文件光标）的读写位置。<br>参数：<br>stream：已经打开的文件指针<br>返回值：<br>成功：当前文件流（文件光标）的读写位置<br>失败：<span class="hljs-number">-1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rewind</span><span class="hljs-params">(FILE *stream)</span>;<br>功能：把文件流（文件光标）的读写位置移动到文件开头。<br>参数：<br>stream：已经打开的文件指针<br>返回值：<br>无返回值<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> id;<br>&#125;Stu;<br><br><span class="hljs-comment">//假如已经往文件写入3个结构体</span><br><span class="hljs-comment">//fwrite(s, sizeof(Stu), 3, fp);</span><br><br>Stu s[<span class="hljs-number">3</span>];<br>Stu tmp; <br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//文件光标读写位置从开头往右移动2个结构体的位置</span><br>fseek(fp, <span class="hljs-number">2</span> * <span class="hljs-keyword">sizeof</span>(Stu), SEEK_SET);<br><br><span class="hljs-comment">//读第3个结构体</span><br>ret = fread(&amp;tmp, <span class="hljs-keyword">sizeof</span>(Stu), <span class="hljs-number">1</span>, fp);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[tmp]%s, %d\n&quot;</span>, tmp.name, tmp.id);<br>&#125;<br><br><span class="hljs-comment">//把文件光标移动到文件开头</span><br><span class="hljs-comment">//fseek(fp, 0, SEEK_SET);</span><br>rewind(fp);<br><br>ret = fread(s, <span class="hljs-keyword">sizeof</span>(Stu), <span class="hljs-number">3</span>, fp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret = %d\n&quot;</span>, ret);<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;s === %s, %d\n&quot;</span>, s[i].name, s[i].id);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="10-5-Windows与Linux文本文件的区别"><a href="#10-5-Windows与Linux文本文件的区别" class="headerlink" title="10.5 Windows与Linux文本文件的区别"></a>10.5 Windows与Linux文本文件的区别</h4><blockquote><ul><li><p>b是二进制模式的意思，b只是在Windows有效，在Linux用r和rb的结果是一样的</p></li><li><p>Unix和Linux下所有的文本文件行都是\n结尾，而Windows所有的文本文件行都是\r\n结尾</p></li><li><p>在Windows平台下，以“文本”方式打开文件，不加b：</p></li><li><ul><li><ul><li>n 当读取文件的时候，系统会将所有的 “\r\n” 转换成 “\n”</li></ul></li></ul></li><li><ul><li><ul><li>n 当写入文件的时候，系统会将 “\n” 转换成 “\r\n” 写入</li></ul></li></ul></li><li><ul><li><ul><li>n 以”二进制”方式打开文件，则读\写都不会进行这样的转换</li></ul></li></ul></li><li><p>在Unix&#x2F;Linux平台下，“文本”与“二进制”模式没有区别，”\r\n” 作为两个字符原样输入输出</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **args)</span><br>&#123;<br><span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>FILE *p = fopen(args[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-keyword">if</span> (!p)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-type">char</span> a[<span class="hljs-number">1024</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>fgets(a, <span class="hljs-keyword">sizeof</span>(a), p);<br><br><span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (a[len])<br>&#123;<br><span class="hljs-keyword">if</span> (a[len] == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (a[len - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\r&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;windows file\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;linux file\n&quot;</span>);<br>&#125;<br>&#125;<br>len++;<br>&#125;<br><br>fclose(p);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="10-6-获取文件状态"><a href="#10-6-获取文件状态" class="headerlink" title="10.6 获取文件状态"></a>10.6 获取文件状态</h4><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">stat</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-keyword">struct</span> stat *buf)</span>;<br>功能：获取文件状态信息<br>参数：<br>path：文件名<br>buf：保存文件信息的结构体<br>返回值：<br>成功：<span class="hljs-number">0</span><br>失败<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> &#123;</span><br><span class="hljs-type">dev_t</span>         st_dev;         <span class="hljs-comment">//文件的设备编号</span><br><span class="hljs-type">ino_t</span>         st_ino;          <span class="hljs-comment">//节点</span><br><span class="hljs-type">mode_t</span>        st_mode;   <span class="hljs-comment">//文件的类型和存取的权限</span><br><span class="hljs-type">nlink_t</span>       st_nlink;     <span class="hljs-comment">//连到该文件的硬连接数目，刚建立的文件值为1</span><br><span class="hljs-type">uid_t</span>         st_uid;         <span class="hljs-comment">//用户ID</span><br><span class="hljs-type">gid_t</span>         st_gid;         <span class="hljs-comment">//组ID</span><br><span class="hljs-type">dev_t</span>         st_rdev;      <span class="hljs-comment">//(设备类型)若此文件为设备文件，则为其设备编号</span><br><span class="hljs-type">off_t</span>         st_size;        <span class="hljs-comment">//文件字节数(文件大小)</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> st_blksize;   <span class="hljs-comment">//块大小(文件系统的I/O 缓冲区大小)</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> st_blocks;    <span class="hljs-comment">//块数</span><br><span class="hljs-type">time_t</span>        st_atime;     <span class="hljs-comment">//最后一次访问时间</span><br><span class="hljs-type">time_t</span>        st_mtime;    <span class="hljs-comment">//最后一次修改时间</span><br><span class="hljs-type">time_t</span>        st_ctime;     <span class="hljs-comment">//最后一次改变时间(指属性)</span><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **args)</span><br>&#123;<br><span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span> =</span> &#123; <span class="hljs-number">0</span> &#125;;<br><br>stat(args[<span class="hljs-number">1</span>], &amp;st);<br><span class="hljs-type">int</span> size = st.st_size;<span class="hljs-comment">//得到结构体中的成员变量</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, size);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="10-7-删除文件、重命名文件"><a href="#10-7-删除文件、重命名文件" class="headerlink" title="10.7 删除文件、重命名文件"></a>10.7 删除文件、重命名文件</h4><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname)</span>;<br>功能：删除文件<br>参数：<br>pathname：文件名<br>返回值：<br>成功：<span class="hljs-number">0</span><br>失败：<span class="hljs-number">-1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">rename</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldpath, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newpath)</span>;<br>功能：把oldpath的文件名改为newpath<br>参数：<br>oldpath：旧文件名<br>newpath：新文件名<br>返回值：<br>成功：<span class="hljs-number">0</span><br>失败： - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="10-8-文件缓冲区"><a href="#10-8-文件缓冲区" class="headerlink" title="10.8 文件缓冲区"></a>10.8 文件缓冲区</h4><h5 id="10-8-1-文件缓冲区"><a href="#10-8-1-文件缓冲区" class="headerlink" title="10.8.1 文件缓冲区"></a>10.8.1 文件缓冲区</h5><blockquote><p>ANSI C标准采用“缓冲文件系统”处理数据文件。</p><p>所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区从内存向磁盘输出数据必须先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘去。</p><p>如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个地将数据送到程序数据区(给程序变量) 。</p></blockquote><h5 id="10-8-2-磁盘文件的存取"><a href="#10-8-2-磁盘文件的存取" class="headerlink" title="10.8.2 磁盘文件的存取"></a>10.8.2 磁盘文件的存取</h5><blockquote><p><img src="/road2dasheng/img/07/clip_image002-167960256683425.jpg" alt="2016-06-06_182106"></p><ul><li><p>磁盘文件，一般保存在硬盘、U盘等掉电不丢失的磁盘设备中，在需要时调入内存</p></li><li><p>在内存中对文件进行编辑处理后，保存到磁盘中</p></li><li><p>程序与磁盘之间交互，不是立即完成，系统或程序可根据需要设置缓冲区，以提高存取效率</p></li></ul></blockquote><h5 id="10-8-3-更新缓冲区"><a href="#10-8-3-更新缓冲区" class="headerlink" title="10.8.3 更新缓冲区"></a>10.8.3 更新缓冲区</h5><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fflush</span><span class="hljs-params">(FILE *stream)</span>;<br>功能：更新缓冲区，让缓冲区的数据立马写到文件中。<br>参数：<br>stream：文件指针<br>返回值：<br>成功：<span class="hljs-number">0</span><br>失败：<span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python入门视频教程-笔记</title>
    <link href="/road2dasheng/06_Pyhton%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/road2dasheng/06_Pyhton%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="B站黑马程序员-Python视频教程笔记"><a href="#B站黑马程序员-Python视频教程笔记" class="headerlink" title="B站黑马程序员-Python视频教程笔记"></a><a href="https://www.bilibili.com/video/BV1qW4y1a7fU?p=4&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-Python视频教程</a>笔记</h4><h4 id="一、-你好-Python"><a href="#一、-你好-Python" class="headerlink" title="一、 你好 Python"></a>一、 你好 Python</h4><h5 id="1-1-初识Python"><a href="#1-1-初识Python" class="headerlink" title="1.1  初识Python"></a>1.1  初识Python</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;起源&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206184959746.png" alt="image-20230206184959746"></li><li><em><strong>&#x3D;&#x3D;优雅&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185323576.png" alt="image-20230206185323576"></li><li><em><strong>&#x3D;&#x3D;应用场景&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185455855.png" alt="image-20230206185455855"></li></ul></blockquote><h5 id="1-2-编程语言"><a href="#1-2-编程语言" class="headerlink" title="1.2  编程语言"></a>1.2  编程语言</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;人类语言&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185740936.png" alt="image-20230206185740936"></li><li><em><strong>&#x3D;&#x3D;计算机不理解人类语言&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185859865.png" alt="image-20230206185859865"></li><li><em><strong>&#x3D;&#x3D;编程语言将人类语言转化为固定格式的语言，然后经翻译程序（编译器或解释器）转换为二进制数据&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206185951565.png" alt="image-20230206185951565"></li><li><em><strong>&#x3D;&#x3D;为什么不直接把人类语言通过翻译器转换给计算机&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206190350124.png" alt="image-20230206190350124"></li></ul></blockquote><h5 id="1-3-Python安装"><a href="#1-3-Python安装" class="headerlink" title="1.3 Python安装"></a>1.3 Python安装</h5><h6 id="1-3-1-windows"><a href="#1-3-1-windows" class="headerlink" title="1.3.1 windows"></a>1.3.1 windows</h6><blockquote><ul><li>下载<br><img src="/road2dasheng/img/06/image-20230206202200345.png" alt="image-20230206202200345"></li><li>安装<br>1：<br><img src="/road2dasheng/img/06/image-20230206203053241.png" alt="image-20230206203053241"><br>2：<br><img src="/road2dasheng/img/06/image-20230206203131493.png" alt="image-20230206203131493"><br>3：<br><img src="/road2dasheng/img/06/image-20230206203340212.png" alt="image-20230206203340212"><br>4：<br><img src="/road2dasheng/img/06/image-20230206203510838.png" alt="image-20230206203510838"><br>5：<br><img src="/road2dasheng/img/06/image-20230206203609719.png" alt="image-20230206203609719"><br>6：重启电脑，打开CMD，输入python</li></ul></blockquote><h6 id="1-3-2-MacOS（未写）"><a href="#1-3-2-MacOS（未写）" class="headerlink" title="1.3.2 MacOS（未写）"></a>1.3.2 MacOS（未写）</h6><h6 id="1-3-3-Linux（未写完）"><a href="#1-3-3-Linux（未写完）" class="headerlink" title="1.3.3 Linux（未写完）"></a>1.3.3 Linux（未写完）</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;依赖程序&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206214009799.png" alt="image-20230206214009799"></li><li><em><strong>&#x3D;&#x3D;下载&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206214243047.png" alt="image-20230206214243047"><br><img src="/road2dasheng/img/06/image-20230206214331536.png" alt="image-20230206214331536"></li><li><em><strong>&#x3D;&#x3D;安装&#x3D;&#x3D;</strong></em><br>1：<br><img src="/road2dasheng/img/06/image-20230206203053241.png" alt="image-20230206203053241"><br>2：<br><img src="/road2dasheng/img/06/image-20230206203131493.png" alt="image-20230206203131493"><br>3：<br><img src="/road2dasheng/img/06/image-20230206203340212.png" alt="image-20230206203340212"><br>4：<br><img src="/road2dasheng/img/06/image-20230206203510838.png" alt="image-20230206203510838"><br>5：<br><img src="/road2dasheng/img/06/image-20230206203609719.png" alt="image-20230206203609719"><br>6：***&#x3D;&#x3D;重启电脑，打开CMD，输入python&#x3D;&#x3D;***</li></ul></blockquote><h5 id="1-4-Python解释器"><a href="#1-4-Python解释器" class="headerlink" title="1.4 Python解释器"></a>1.4 Python解释器</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215145597.png" alt="image-20230206215145597"></li><li><em><strong>&#x3D;&#x3D;位置&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215224043.png" alt="image-20230206215224043"></li><li><em><strong>&#x3D;&#x3D;.py文件&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215346393.png" alt="image-20230206215346393"></li></ul></blockquote><h5 id="1-5-Python开发环境"><a href="#1-5-Python开发环境" class="headerlink" title="1.5 Python开发环境"></a>1.5 Python开发环境</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;Python程序的开发方式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215703149.png" alt="image-20230206215703149"></li><li><em><strong>&#x3D;&#x3D;Pycharm&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206215850954.png" alt="image-20230206215850954"></li></ul></blockquote><h6 id="1-5-1-下载"><a href="#1-5-1-下载" class="headerlink" title="1.5.1 下载"></a>1.5.1 下载</h6><blockquote><p>   <img src="/road2dasheng/img/06/image-20230206215954695.png" alt="image-20230206215954695"></p></blockquote><h6 id="1-5-2-安装"><a href="#1-5-2-安装" class="headerlink" title="1.5.2 安装"></a>1.5.2 安装</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206220857348.png" alt="image-20230206220857348"><br><img src="/road2dasheng/img/06/image-20230206220931223.png" alt="image-20230206220931223"><br><img src="/road2dasheng/img/06/image-20230206220951229.png" alt="image-20230206220951229"><br><img src="/road2dasheng/img/06/image-20230206221010183.png" alt="image-20230206221010183"><br><img src="/road2dasheng/img/06/image-20230206221025464.png" alt="image-20230206221025464"><br><img src="/road2dasheng/img/06/image-20230206221043659.png" alt="image-20230206221043659"></p></blockquote><h6 id="1-5-3-使用"><a href="#1-5-3-使用" class="headerlink" title="1.5.3 使用"></a>1.5.3 使用</h6><blockquote><ol><li><em><strong>&#x3D;&#x3D;新建工程&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206221501809.png" alt="image-20230206221501809"></li><li><em><strong>&#x3D;&#x3D;指定工程路径以及选择Python解释器&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206221746955.png" alt="image-20230206221746955"></li><li><em><strong>&#x3D;&#x3D;配置Python解释器&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206221814288.png" alt="image-20230206221814288"></li><li><em><strong>&#x3D;&#x3D;确认工程路径和解释器&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206221927453.png" alt="image-20230206221927453"> </li><li><em><strong>&#x3D;&#x3D;工程创建完成&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206222257781.png" alt="image-20230206222257781"></li></ol></blockquote><hr><h4 id="二、Python基础语法"><a href="#二、Python基础语法" class="headerlink" title="二、Python基础语法"></a>二、Python基础语法</h4><h5 id="2-1-字面量"><a href="#2-1-字面量" class="headerlink" title="2.1 字面量"></a>2.1 字面量</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206225020124.png" alt="image-20230206225020124"></p><ul><li><em><strong>&#x3D;&#x3D;常用的值类型&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206225339746.png" alt="image-20230206225339746"><br><img src="/road2dasheng/img/06/image-20230206225450175.png" alt="image-20230206225450175"></li></ul></blockquote><h5 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206225802843.png" alt="image-20230206225802843"></p></blockquote><h5 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206230018642.png" alt="image-20230206230018642"></p></blockquote><h5 id="2-4-数据类型"><a href="#2-4-数据类型" class="headerlink" title="2.4 数据类型"></a>2.4 数据类型</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206230308771.png" alt="image-20230206230308771"></p><ul><li><em><strong>&#x3D;&#x3D;type()语句：用于查看数据的类型&#x3D;&#x3D;</strong></em></li></ul><p><img src="/road2dasheng/img/06/image-20230206230448848.png" alt="image-20230206230448848"></p><ul><li><em><strong>&#x3D;&#x3D;变量无类型&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206230607854.png" alt="image-20230206230607854"></li><li><em><strong>&#x3D;&#x3D;字符串类型的定义方式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206230707480.png" alt="image-20230206230707480"></li></ul></blockquote><h5 id="2-5-数据类型转换"><a href="#2-5-数据类型转换" class="headerlink" title="2.5 数据类型转换"></a>2.5 数据类型转换</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206230804066.png" alt="image-20230206230804066"></p><ul><li><em><strong>&#x3D;&#x3D;常见的转换语句&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206230846417.png" alt="image-20230206230846417"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206230926846.png" alt="image-20230206230926846"></li></ul></blockquote><h5 id="2-6-标识符"><a href="#2-6-标识符" class="headerlink" title="2.6 标识符"></a>2.6 标识符</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206232605676.png" alt="image-20230206232605676"></p></blockquote><blockquote><ul><li><p><em><strong>&#x3D;&#x3D;命名规则&#x3D;&#x3D;</strong></em></p><p><img src="/road2dasheng/img/06/image-20230206232545339.png" alt="image-20230206232545339"></p><p>1 - 内容限定</p><p><img src="/road2dasheng/img/06/image-20230206231318650.png" alt="image-20230206231318650"><br>2 - 大小写敏感<br><img src="/road2dasheng/img/06/image-20230206231432769.png" alt="image-20230206231432769"><br>3 - 不能使用关键字<br><img src="/road2dasheng/img/06/image-20230206231537662.png" alt="image-20230206231537662"></p></li></ul></blockquote><blockquote><ul><li><h6 id="x3D-x3D-命名规范：以变量为例-x3D-x3D"><a href="#x3D-x3D-命名规范：以变量为例-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;命名规范：以变量为例&#x3D;&#x3D;"></a><em><strong>&#x3D;&#x3D;命名规范：以变量为例&#x3D;&#x3D;</strong></em></h6><p><img src="/road2dasheng/img/06/image-20230206232456752.png" alt="image-20230206232456752"><br>1 - 见名知意<br><img src="/road2dasheng/img/06/image-20230206232435368.png" alt="image-20230206232435368"><br>2 - 下划线命名法</p><p><img src="/road2dasheng/img/06/image-20230206232412840.png" alt="image-20230206232412840"><br>3 - 英文字母全小写<br><img src="/road2dasheng/img/06/image-20230206232345777.png" alt="image-20230206232345777"></p></li></ul></blockquote><h5 id="2-7-运算符"><a href="#2-7-运算符" class="headerlink" title="2.7 运算符"></a>2.7 运算符</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;算术运算符&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206232901942.png" alt="image-20230206232901942"></li><li><em><strong>&#x3D;&#x3D;赋值运算符&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206232942892.png" alt="image-20230206232942892"></li><li><em><strong>&#x3D;&#x3D;复合运算符&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206233012036.png" alt="image-20230206233012036"></li></ul></blockquote><h5 id="2-8-字符串扩展"><a href="#2-8-字符串扩展" class="headerlink" title="2.8 字符串扩展"></a>2.8 字符串扩展</h5><h6 id="2-8-1-字符串的三种定义方式"><a href="#2-8-1-字符串的三种定义方式" class="headerlink" title="2.8.1 字符串的三种定义方式"></a>2.8.1 字符串的三种定义方式</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206233254712.png" alt="image-20230206233254712"></p><ul><li><em><strong>&#x3D;&#x3D;引号嵌套&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206233408531.png" alt="image-20230206233408531"></li></ul></blockquote><h6 id="2-8-2-字符串拼接"><a href="#2-8-2-字符串拼接" class="headerlink" title="2.8.2 字符串拼接"></a>2.8.2 字符串拼接</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206233614942.png" alt="image-20230206233614942"></p><ul><li><em><strong>&#x3D;&#x3D;注意&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230206233658022.png" alt="image-20230206233658022"></li></ul></blockquote><h6 id="2-8-3-字符串格式化"><a href="#2-8-3-字符串格式化" class="headerlink" title="2.8.3 字符串格式化"></a>2.8.3 字符串格式化</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206233818043.png" alt="image-20230206233818043"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206233944307.png" alt="image-20230206233944307"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206234021770.png" alt="image-20230206234021770"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206234118627.png" alt="image-20230206234118627"></p></blockquote><h6 id="2-8-4-格式化的数字精度控制"><a href="#2-8-4-格式化的数字精度控制" class="headerlink" title="2.8.4 格式化的数字精度控制"></a>2.8.4 格式化的数字精度控制</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206234306806.png" alt="image-20230206234306806"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206234447985.png" alt="image-20230206234447985"></p></blockquote><h6 id="2-8-5-字符串格式化方式2"><a href="#2-8-5-字符串格式化方式2" class="headerlink" title="2.8.5 字符串格式化方式2"></a>2.8.5 字符串格式化方式2</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206234737583.png" alt="image-20230206234737583"></p></blockquote><h6 id="2-8-6-表达式的格式化"><a href="#2-8-6-表达式的格式化" class="headerlink" title="2.8.6 表达式的格式化"></a>2.8.6 表达式的格式化</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230206234946380.png" alt="image-20230206234946380"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206235014790.png" alt="image-20230206235014790"></p></blockquote><h5 id="2-9-数据输入：input语句"><a href="#2-9-数据输入：input语句" class="headerlink" title="2.9 数据输入：input语句"></a>2.9 数据输入：input语句</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230206235251638.png" alt="image-20230206235251638"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206235311420.png" alt="image-20230206235311420"></p></blockquote><blockquote><p><img src="/road2dasheng/img/06/image-20230206235343068.png" alt="image-20230206235343068"></p></blockquote><hr><h4 id="三、Python判断语句"><a href="#三、Python判断语句" class="headerlink" title="三、Python判断语句"></a>三、Python判断语句</h4><h5 id="3-1-前言"><a href="#3-1-前言" class="headerlink" title="3.1 前言"></a>3.1 前言</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207080344967.png" alt="image-20230207080344967"></p></blockquote><h5 id="3-2-布尔类型和比较运算符"><a href="#3-2-布尔类型和比较运算符" class="headerlink" title="3.2 布尔类型和比较运算符"></a>3.2 布尔类型和比较运算符</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;布尔类型的定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207085452264.png" alt="image-20230207085452264"></li><li><em><strong>&#x3D;&#x3D;比较运算符&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207085541085.png" alt="image-20230207085541085"><br><img src="/road2dasheng/img/06/image-20230207085607512.png" alt="image-20230207085607512"></li></ul></blockquote><h5 id="3-3-if-语句"><a href="#3-3-if-语句" class="headerlink" title="3.3 if 语句"></a>3.3 if 语句</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207085858733.png" alt="image-20230207085858733"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br>1、判断条件的结果一定要是布尔类型<br><img src="/road2dasheng/img/06/image-20230207090145521.png" alt="image-20230207090145521"><br>2、不要忘记判断条件后的： 引号<br>3、归属于if语句的代码块，需在前方填充4个空格缩进<br><img src="/road2dasheng/img/06/image-20230207090241671.png" alt="image-20230207090241671"></li></ul></blockquote><h5 id="3-4-if-else-语句"><a href="#3-4-if-else-语句" class="headerlink" title="3.4 if else 语句"></a>3.4 if else 语句</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207091258510.png" alt="image-20230207091258510"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207091419242.png" alt="image-20230207091419242"></li></ul></blockquote><h5 id="3-5-if-elif-else-语句"><a href="#3-5-if-elif-else-语句" class="headerlink" title="3.5 if elif else 语句"></a>3.5 if elif else 语句</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207091727164.png" alt="image-20230207091727164"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br>1、elif可以写多个<br><img src="/road2dasheng/img/06/image-20230207092501700.png" alt="image-20230207092501700"><br>2、判断是互斥且有序的，上一个满足后面的就不会判断了<br><img src="/road2dasheng/img/06/image-20230207092636447.png" alt="image-20230207092636447"><br>3、可以在条件判断中，直接写input语句，节省代码量<br><img src="/road2dasheng/img/06/image-20230207092650573.png" alt="image-20230207092650573"><br>4、可以将input输入语句直接写入判断条件中，节省代码量<br><img src="/road2dasheng/img/06/image-20230207092745514.png" alt="image-20230207092745514"></li></ul></blockquote><h5 id="3-6-判断语句的嵌套"><a href="#3-6-判断语句的嵌套" class="headerlink" title="3.6 判断语句的嵌套"></a>3.6 判断语句的嵌套</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207092940295.png" alt="image-20230207092940295"></p><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207093131987.png" alt="image-20230207093131987"></li><li><em><strong>&#x3D;&#x3D;简单嵌套&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207093223164.png" alt="image-20230207093223164"></li><li><em><strong>&#x3D;&#x3D;自由嵌套&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207093250553.png" alt="image-20230207093250553"></li><li><em><strong>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207093326824.png" alt="image-20230207093326824"></li></ul></blockquote><hr><h4 id="四、循环语句"><a href="#四、循环语句" class="headerlink" title="四、循环语句"></a>四、循环语句</h4><h5 id="4-1-前言"><a href="#4-1-前言" class="headerlink" title="4.1 前言"></a>4.1 前言</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207094109353.png" alt="image-20230207094109353"></p></blockquote><h5 id="4-2-While-循环"><a href="#4-2-While-循环" class="headerlink" title="4.2 While 循环"></a>4.2 While 循环</h5><h6 id="4-2-1-基础语法"><a href="#4-2-1-基础语法" class="headerlink" title="4.2.1 基础语法"></a>4.2.1 基础语法</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230207094506878.png" alt="image-20230207094506878"></p></blockquote><h6 id="4-2-2-注意事项"><a href="#4-2-2-注意事项" class="headerlink" title="4.2.2 注意事项"></a>4.2.2 注意事项</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230207094606623.png" alt="image-20230207094606623"></p></blockquote><h6 id="4-2-3-嵌套应用"><a href="#4-2-3-嵌套应用" class="headerlink" title="4.2.3 嵌套应用"></a>4.2.3 嵌套应用</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095034307.png" alt="image-20230207095034307"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095135492.png" alt="image-20230207095135492"></li></ul></blockquote><h6 id="4-2-4-嵌套案例"><a href="#4-2-4-嵌套案例" class="headerlink" title="4.2.4 嵌套案例"></a>4.2.4 嵌套案例</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;打印九九乘法表 &#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095345159.png" alt="image-20230207095345159"></li><li><em><strong>&#x3D;&#x3D;补充知识&#x3D;&#x3D;</strong></em><br>1、print输出不换行<br><img src="/road2dasheng/img/06/image-20230207095448843.png" alt="image-20230207095448843"><br>2、制表符 \t<br><img src="/road2dasheng/img/06/image-20230207095531049.png" alt="image-20230207095531049"></li></ul></blockquote><h5 id="4-3-for-循环"><a href="#4-3-for-循环" class="headerlink" title="4.3 for 循环"></a>4.3 for 循环</h5><h6 id="4-3-1-基础语法"><a href="#4-3-1-基础语法" class="headerlink" title="4.3.1 基础语法"></a>4.3.1 基础语法</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;与while循环的比较&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095917289.png" alt="image-20230207095917289"></li><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207095951281.png" alt="image-20230207095951281"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207100031385.png" alt="image-20230207100031385"></li></ul></blockquote><h6 id="4-3-2-range-语句"><a href="#4-3-2-range-语句" class="headerlink" title="4.3.2 range 语句"></a>4.3.2 range 语句</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;可迭代类型&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207100157295.png" alt="image-20230207100157295"></li><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207100539084.png" alt="image-20230207100539084"></li></ul></blockquote><h6 id="4-3-3-变量作用域"><a href="#4-3-3-变量作用域" class="headerlink" title="4.3.3 变量作用域"></a>4.3.3 变量作用域</h6><blockquote><p><img src="/road2dasheng/img/06/image-20230207101332358.png" alt="image-20230207101332358"><br><img src="/road2dasheng/img/06/image-20230207101402400.png" alt="image-20230207101402400"></p></blockquote><h6 id="4-3-4-嵌套应用"><a href="#4-3-4-嵌套应用" class="headerlink" title="4.3.4 嵌套应用"></a>4.3.4 嵌套应用</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;基本格式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207101514750.png" alt="image-20230207101514750"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br>1、缩进<br><img src="/road2dasheng/img/06/image-20230207101536850.png" alt="image-20230207101536850"><br>2、while循环和for循环可以相互嵌套<br><img src="/road2dasheng/img/06/image-20230207101649473.png" alt="image-20230207101649473"></li></ul></blockquote><h5 id="4-4-循环中断：break-和continue"><a href="#4-4-循环中断：break-和continue" class="headerlink" title="4.4 循环中断：break 和continue"></a>4.4 循环中断：break 和continue</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207101800526.png" alt="image-20230207101800526"></p><ul><li><em><strong>&#x3D;&#x3D;continue 关键字&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207101913748.png" alt="image-20230207101913748"><br><img src="/road2dasheng/img/06/image-20230207102101672.png" alt="image-20230207102101672"></li><li><em><strong>&#x3D;&#x3D;break 关键字&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207102154320.png" alt="image-20230207102154320"><br><img src="/road2dasheng/img/06/image-20230207102216322.png" alt="image-20230207102216322"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br>1、continue和break，在for和while循环中作用一致<br>2、在嵌套循环中，只能作用在所在的循环上，无法对上层循环起作用<br>！！！2.1 continue关键字只可以控制：它所在的循环临时中断<br><img src="/road2dasheng/img/06/image-20230207102446620.png" alt="image-20230207102446620"><br>！！！  2.2 break关键字同样只可以控制：它所在的循环永久中断<br><img src="/road2dasheng/img/06/image-20230207102526697.png" alt="image-20230207102526697"></li></ul></blockquote><h4 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h4><h5 id="5-1-函数介绍"><a href="#5-1-函数介绍" class="headerlink" title="5.1 函数介绍"></a>5.1 函数介绍</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;内涵&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103404563.png" alt="image-20230207103404563"></li><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103708768.png" alt="image-20230207103708768"></li></ul></blockquote><h5 id="5-2-函数的定义"><a href="#5-2-函数的定义" class="headerlink" title="5.2 函数的定义"></a>5.2 函数的定义</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;基础定义语法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103916445.png" alt="image-20230207103916445"></li><li><em><strong>&#x3D;&#x3D;使用步骤&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103933388.png" alt="image-20230207103933388"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207103948446.png" alt="image-20230207103948446"></li></ul></blockquote><h5 id="5-3-函数的参数"><a href="#5-3-函数的参数" class="headerlink" title="5.3 函数的参数"></a>5.3 函数的参数</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104228957.png" alt="image-20230207104228957"></li><li><em><strong>&#x3D;&#x3D;使用方式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104347274.png" alt="image-20230207104347274"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104406994.png" alt="image-20230207104406994"></li></ul></blockquote><h5 id="5-4-函数的返回值"><a href="#5-4-函数的返回值" class="headerlink" title="5.4 函数的返回值"></a>5.4 函数的返回值</h5><h6 id="5-4-1-return-语句"><a href="#5-4-1-return-语句" class="headerlink" title="5.4.1 return 语句"></a>5.4.1 return 语句</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104559834.png" alt="image-20230207104559834"></li><li><em><strong>&#x3D;&#x3D;使用方法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104658277.png" alt="image-20230207104658277"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104715112.png" alt="image-20230207104715112"></li></ul></blockquote><h6 id="5-4-2-None"><a href="#5-4-2-None" class="headerlink" title="5.4.2 None"></a>5.4.2 None</h6><blockquote><ul><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207104940205.png" alt="image-20230207104940205"></li><li><em><strong>&#x3D;&#x3D;如何返回None&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105134128.png" alt="image-20230207105134128"></li><li><em><strong>&#x3D;&#x3D;使用场景&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105309116.png" alt="image-20230207105309116"></li></ul></blockquote><h5 id="5-5-函数说明文档"><a href="#5-5-函数说明文档" class="headerlink" title="5.5 函数说明文档"></a>5.5 函数说明文档</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105443438.png" alt="image-20230207105443438"><br><img src="/road2dasheng/img/06/image-20230207105522316.png" alt="image-20230207105522316"></li><li><em><strong>&#x3D;&#x3D;定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105607996.png" alt="image-20230207105607996"></li></ul></blockquote><h5 id="5-6-函数的嵌套调用"><a href="#5-6-函数的嵌套调用" class="headerlink" title="5.6 函数的嵌套调用"></a>5.6 函数的嵌套调用</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105715000.png" alt="image-20230207105715000"></li><li><em><strong>&#x3D;&#x3D;执行流程&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207105731678.png" alt="image-20230207105731678"></li></ul></blockquote><h5 id="5-7-变量的作用域"><a href="#5-7-变量的作用域" class="headerlink" title="5.7 变量的作用域"></a>5.7 变量的作用域</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;局部变量&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207110159172.png" alt="image-20230207110159172"></li><li><em><strong>&#x3D;&#x3D;全局变量&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207110235347.png" alt="image-20230207110235347"></li><li><em><strong>&#x3D;&#x3D;global关键字：将函数内定义的变量声明为全局变量&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207110407641.png" alt="image-20230207110407641"><br><img src="/road2dasheng/img/06/image-20230207110445275.png" alt="image-20230207110445275"></li></ul></blockquote><h4 id="六、python-数据容器"><a href="#六、python-数据容器" class="headerlink" title="六、python 数据容器"></a>六、python 数据容器</h4><h5 id="6-1-数据容器入门"><a href="#6-1-数据容器入门" class="headerlink" title="6.1 数据容器入门"></a>6.1 数据容器入门</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207141359044.png" alt="image-20230207141359044"></li><li><em><strong>&#x3D;&#x3D;分类&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207141542038.png" alt="image-20230207141542038"></li></ul></blockquote><h5 id="6-2-数据容器：list-列表"><a href="#6-2-数据容器：list-列表" class="headerlink" title="6.2 数据容器：list(列表)"></a>6.2 数据容器：list(列表)</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;列表的定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207141932174.png" alt="image-20230207141932174"></li></ul><p><em><strong>&#x3D;&#x3D;！列表特点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207143200206.png" alt="image-20230207143200206"></p><ul><li><em><strong>&#x3D;&#x3D;列表的下标索引&#x3D;&#x3D;</strong></em><br>  <em>正向索引</em><br>  <img src="/road2dasheng/img/06/image-20230207142423850.png" alt="image-20230207142423850"></li></ul><p>  <em>反向索引</em><br>  <img src="/road2dasheng/img/06/image-20230207142450740.png" alt="image-20230207142450740"></p><p>  <em>嵌套索引</em><br>  <img src="/road2dasheng/img/06/image-20230207142530435.png" alt="image-20230207142530435"></p><ul><li><em><strong>&#x3D;&#x3D;列表的常用操作（方法）&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207142853698.png" alt="image-20230207142853698"></li></ul></blockquote><h5 id="6-3-list（列表）的遍历"><a href="#6-3-list（列表）的遍历" class="headerlink" title="6.3 list（列表）的遍历"></a>6.3 list（列表）的遍历</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;使用while循环遍历列表&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207143652064.png" alt="image-20230207143652064"></li><li><em><strong>&#x3D;&#x3D;使用for循环遍历列表&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207143732181.png" alt="image-20230207143732181"></li><li><em><strong>&#x3D;&#x3D;区别&#x3D;&#x3D;</strong></em><img src="/img/06/image-20230207143756454.png" alt="image-20230207143756454" style="zoom:80%;" /></li></ul></blockquote><h5 id="6-4-数据容器：tuple-元组"><a href="#6-4-数据容器：tuple-元组" class="headerlink" title="6.4 数据容器：tuple(元组)"></a>6.4 数据容器：tuple(元组)</h5><blockquote><ul><li>元组的作用<br><img src="/road2dasheng/img/06/image-20230207144019289.png" alt="image-20230207144019289"></li><li><em><strong>&#x3D;&#x3D;元组的定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207144037482.png" alt="image-20230207144037482"></li><li><em><strong>&#x3D;&#x3D;元组的操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207144127804.png" alt="image-20230207144127804"><br><img src="/road2dasheng/img/06/image-20230207144251970.png" alt="image-20230207144251970"></li><li>元组的特点<br><img src="/road2dasheng/img/06/image-20230207144321973.png" alt="image-20230207144321973"></li></ul></blockquote><h5 id="6-5-数据容器：str-字符串"><a href="#6-5-数据容器：str-字符串" class="headerlink" title="6.5 数据容器：str(字符串)"></a>6.5 数据容器：str(字符串)</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;内涵&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207144520635.png" alt="image-20230207144520635"></li><li><em><strong>&#x3D;&#x3D;索引&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207144544004.png" alt="image-20230207144544004"></li><li><em><strong>&#x3D;&#x3D;操作（方法）&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207162543753.png" alt="image-20230207162543753"></li><li><em><strong>&#x3D;&#x3D;特点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207162712846.png" alt="image-20230207162712846"></li><li><em><strong>&#x3D;&#x3D;比较大小&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207165658035.png" alt="image-20230207165658035"><br><img src="/road2dasheng/img/06/image-20230207165758635.png" alt="image-20230207165758635"></li></ul></blockquote><h5 id="6-6-数据容器（序列）的切片"><a href="#6-6-数据容器（序列）的切片" class="headerlink" title="6.6 数据容器（序列）的切片"></a>6.6 数据容器（序列）的切片</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;序列的含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163130319.png" alt="image-20230207163130319"></li><li><em><strong>&#x3D;&#x3D;序列的常用操作 - 切片&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163229732.png" alt="image-20230207163229732"></li><li><em><strong>&#x3D;&#x3D;切片示例&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163308099.png" alt="image-20230207163308099"><br><img src="/road2dasheng/img/06/image-20230207163337009.png" alt="image-20230207163337009"></li></ul></blockquote><h5 id="6-7-数据容器：set-集合"><a href="#6-7-数据容器：set-集合" class="headerlink" title="6.7 数据容器：set(集合)"></a>6.7 数据容器：set(集合)</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163525868.png" alt="image-20230207163525868"></li><li><em><strong>&#x3D;&#x3D;定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163559846.png" alt="image-20230207163559846"></li><li><em><strong>&#x3D;&#x3D;常用操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163623278.png" alt="image-20230207163623278"></li><li><em><strong>&#x3D;&#x3D;特点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207163823734.png" alt="image-20230207163823734"></li></ul></blockquote><h5 id="6-8-数据容器：dict-字典、映射"><a href="#6-8-数据容器：dict-字典、映射" class="headerlink" title="6.8 数据容器：dict(字典、映射)"></a>6.8 数据容器：dict(字典、映射)</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164411010.png" alt="image-20230207164411010"></li><li><em><strong>&#x3D;&#x3D;定义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164506391.png" alt="image-20230207164506391"></li><li><em><strong>&#x3D;&#x3D;字典数据的获取&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164549697.png" alt="image-20230207164549697"></li><li><em><strong>&#x3D;&#x3D;嵌套&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164637288.png" alt="image-20230207164637288"><br><img src="/road2dasheng/img/06/image-20230207164714188.png" alt="image-20230207164714188"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164758604.png" alt="image-20230207164758604"></li><li><em><strong>&#x3D;&#x3D;常用操作（方法）&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164859281.png" alt="image-20230207164859281"></li><li><em><strong>&#x3D;&#x3D;特点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207164915100.png" alt="image-20230207164915100"></li></ul></blockquote><h5 id="6-9-数据容器的通用操作"><a href="#6-9-数据容器的通用操作" class="headerlink" title="6.9 数据容器的通用操作"></a>6.9 数据容器的通用操作</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;数据容器对比&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207165249073.png" alt="image-20230207165249073"></li><li><em><strong>&#x3D;&#x3D;数据容器通用操作（方法）&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207165432366.png" alt="image-20230207165432366"></li></ul></blockquote><h5 id="6-10-综合案例"><a href="#6-10-综合案例" class="headerlink" title="6.10 综合案例"></a>6.10 综合案例</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207165920874.png" alt="image-20230207165920874"></p></blockquote><hr><h4 id="七、函数进阶"><a href="#七、函数进阶" class="headerlink" title="七、函数进阶"></a>七、函数进阶</h4><h5 id="7-1-函数多返回值"><a href="#7-1-函数多返回值" class="headerlink" title="7.1 函数多返回值"></a>7.1 函数多返回值</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207170256424.png" alt="image-20230207170256424"><br><img src="/road2dasheng/img/06/image-20230207170321882.png" alt="image-20230207170321882"></p></blockquote><h5 id="7-2-函数多种传参方式"><a href="#7-2-函数多种传参方式" class="headerlink" title="7.2 函数多种传参方式"></a>7.2 函数多种传参方式</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;参数种类&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170620424.png" alt="image-20230207170620424"></li><li><em><strong>&#x3D;&#x3D;位置参数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170605629.png" alt="image-20230207170605629"></li><li><em><strong>&#x3D;&#x3D;关键字参数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170729644.png" alt="image-20230207170729644"></li><li><em><strong>&#x3D;&#x3D;缺省参数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170748546.png" alt="image-20230207170748546"></li><li><em><strong>&#x3D;&#x3D;不定长参数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207170814643.png" alt="image-20230207170814643"></li></ul><p><img src="/road2dasheng/img/06/image-20230207171209075.png" alt="image-20230207171209075"></p><p><img src="/road2dasheng/img/06/image-20230207171619291.png" alt="image-20230207171619291"><br><em><strong>&#x3D;&#x3D;综上：&#x3D;&#x3D;</strong></em><br>位置不定长传递以*号标记一个形式参数，以元组的形式接受参数，形式参数一般命名为args<br>关键字不定长传递以**号标记一个形式参数，以字典的形式接受参数，形式参数一般命名为kwargs</p></blockquote><h5 id="7-3-匿名函数"><a href="#7-3-匿名函数" class="headerlink" title="7.3 匿名函数"></a>7.3 匿名函数</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;函数作为参数传递&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207172044975.png" alt="image-20230207172044975"></li><li><em><strong>&#x3D;&#x3D;lambda匿名函数&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207172204828.png" alt="image-20230207172204828"></li></ul></blockquote><hr><h4 id="八、python文件操作"><a href="#八、python文件操作" class="headerlink" title="八、python文件操作"></a>八、python文件操作</h4><h5 id="8-0-文件及其操作的含义"><a href="#8-0-文件及其操作的含义" class="headerlink" title="8.0 文件及其操作的含义"></a>8.0 文件及其操作的含义</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;什么是文件&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175440492.png" alt="image-20230207175440492"></li><li><em><strong>&#x3D;&#x3D;什么是文件操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175516480.png" alt="image-20230207175516480"></li></ul></blockquote><h5 id="8-1-文件的编码"><a href="#8-1-文件的编码" class="headerlink" title="8.1 文件的编码"></a>8.1 文件的编码</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;什么是文件编码&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175036934.png" alt="image-20230207175036934"></li><li><em><strong>&#x3D;&#x3D;文件编码方式&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175120133.png" alt="image-20230207175120133">注：UTF-8是目前全球通用的编码格式，除非有特殊需求，否则，一律以UTF-8格式进行文件编码即可。</li></ul></blockquote><h5 id="8-2-文件的读取"><a href="#8-2-文件的读取" class="headerlink" title="8.2 文件的读取"></a>8.2 文件的读取</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;常用方法汇总&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207175755741.png" alt="image-20230207175755741"></li><li><em><strong>&#x3D;&#x3D;常用方法详述&#x3D;&#x3D;</strong></em><br>1、open()方法<br><img src="/road2dasheng/img/06/image-20230207175904706.png" alt="image-20230207175904706"><br><img src="/road2dasheng/img/06/image-20230207180132972.png" alt="image-20230207180132972"><br>2、***&#x3D;&#x3D;read()方法&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180840856.png" alt="image-20230207180840856"><br>3、***&#x3D;&#x3D;readlines()方法&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180749863.png" alt="image-20230207180749863"><br>4、***&#x3D;&#x3D;readline()方法&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180550876.png" alt="image-20230207180550876"><br>5、***&#x3D;&#x3D;for循环读取文件行&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180524473.png" alt="image-20230207180524473"><br>6、***&#x3D;&#x3D;close()关闭文件对象&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180507636.png" alt="image-20230207180507636"><br>7、***&#x3D;&#x3D;with open()方法&#x3D;&#x3D;***<br><img src="/road2dasheng/img/06/image-20230207180436525.png" alt="image-20230207180436525"></li></ul></blockquote><h5 id="8-3-文件的写入"><a href="#8-3-文件的写入" class="headerlink" title="8.3 文件的写入"></a>8.3 文件的写入</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;文件的写操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181036813.png" alt="image-20230207181036813"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181059768.png" alt="image-20230207181059768"></li></ul></blockquote><h5 id="8-4-文件的追加"><a href="#8-4-文件的追加" class="headerlink" title="8.4 文件的追加"></a>8.4 文件的追加</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;文件的追加操作&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181213717.png" alt="image-20230207181213717"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181244031.png" alt="image-20230207181244031"></li></ul></blockquote><h5 id="8-5-文件操作综合案例"><a href="#8-5-文件操作综合案例" class="headerlink" title="8.5 文件操作综合案例"></a>8.5 文件操作综合案例</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207181328964.png" alt="image-20230207181328964"></p></blockquote><hr><h4 id="九、python异常、模块与包"><a href="#九、python异常、模块与包" class="headerlink" title="九、python异常、模块与包"></a>九、python异常、模块与包</h4><h5 id="9-1-了解异常"><a href="#9-1-了解异常" class="headerlink" title="9.1 了解异常"></a>9.1 了解异常</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;什么是异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181919475.png" alt="image-20230207181919475"></li><li><em><strong>&#x3D;&#x3D;bug是什么&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207181937325.png" alt="image-20230207181937325"></li></ul></blockquote><h5 id="9-2-异常的捕获方法"><a href="#9-2-异常的捕获方法" class="headerlink" title="9.2 异常的捕获方法"></a>9.2 异常的捕获方法</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;为什么要捕获异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207183444545.png" alt="image-20230207183444545"></li><li><em><strong>&#x3D;&#x3D;捕获异常的方法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207183649135.png" alt="image-20230207183649135"><br><em><strong>&#x3D;&#x3D;0、语法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184923110.png" alt="image-20230207184923110"><br><em><strong>&#x3D;&#x3D;1、捕获常规异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207183815732.png" alt="image-20230207183815732"><br><em><strong>&#x3D;&#x3D;2、捕获指定异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207183859846.png" alt="image-20230207183859846"><br><em><strong>&#x3D;&#x3D;3、捕获多个异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184508899.png" alt="image-20230207184508899"><br><em><strong>&#x3D;&#x3D;4、捕获异常并输出描述信息&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184554469.png" alt="image-20230207184554469"><br><em><strong>&#x3D;&#x3D;5、捕获所有异常&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184610533.png" alt="image-20230207184610533"><br><em><strong>&#x3D;&#x3D;6、异常else&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184635432.png" alt="image-20230207184635432"><br><em><strong>&#x3D;&#x3D;7、异常finally&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207184703979.png" alt="image-20230207184703979"></li></ul></blockquote><h5 id="9-3-异常的传递"><a href="#9-3-异常的传递" class="headerlink" title="9.3 异常的传递"></a>9.3 异常的传递</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207185119362.png" alt="image-20230207185119362"><br><img src="/road2dasheng/img/06/image-20230207185153893.png" alt="image-20230207185153893"></p></blockquote><h5 id="9-4-Python模块"><a href="#9-4-Python模块" class="headerlink" title="9.4 Python模块"></a>9.4 Python模块</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;模块的含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207185658434.png" alt="image-20230207185658434"></li><li><em><strong>&#x3D;&#x3D;模块的导入：模块的导入一般写在代码文件的开头位置&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207185743071.png" alt="image-20230207185743071"><br><em><strong>&#x3D;&#x3D;1、import模块名&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212004261.png" alt="image-20230207212004261"><br><em><strong>&#x3D;&#x3D;2、from 模块名 import 功能名&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212023320.png" alt="image-20230207212023320"><br>***&#x3D;&#x3D;3、from 模块名 import <em>&#x3D;&#x3D;</em>**<br><img src="/road2dasheng/img/06/image-20230207212033935.png" alt="image-20230207212033935"><br><em><strong>&#x3D;&#x3D;4、as定义别名&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212058354.png" alt="image-20230207212058354"></li><li><em><strong>&#x3D;&#x3D;自定义模块&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212242291.png" alt="image-20230207212242291"></li><li><em><strong>&#x3D;&#x3D;测试模块&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207212611827.png" alt="image-20230207212611827"></li><li><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em><br>1、<br><img src="/road2dasheng/img/06/image-20230207212836404.png" alt="image-20230207212836404"><br>2、<br><img src="/road2dasheng/img/06/image-20230207212955319.png" alt="image-20230207212955319"></li></ul></blockquote><h5 id="9-5-Python包"><a href="#9-5-Python包" class="headerlink" title="9.5 Python包"></a>9.5 Python包</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213214547.png" alt="image-20230207213214547"></li><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213245082.png" alt="image-20230207213245082"></li><li><em><strong>&#x3D;&#x3D;创建&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213330021.png" alt="image-20230207213330021"></li><li><em><strong>&#x3D;&#x3D;使用&#x3D;&#x3D;</strong></em><br><em><strong>&#x3D;&#x3D;方式1：&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213404521.png" alt="image-20230207213404521"><br><em><strong>&#x3D;&#x3D;方式2：&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213559951.png" alt="image-20230207213559951"></li></ul></blockquote><h5 id="9-6-安装第三方Python包"><a href="#9-6-安装第三方Python包" class="headerlink" title="9.6 安装第三方Python包"></a>9.6 安装第三方Python包</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;什么是第三方包&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213731865.png" alt="image-20230207213731865"></li><li><em><strong>&#x3D;&#x3D;安装第三方包&#x3D;&#x3D;</strong></em><br><em><strong>&#x3D;&#x3D;1、pip命令&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207213848844.png" alt="image-20230207213848844"><br><img src="/road2dasheng/img/06/image-20230207213925315.png" alt="image-20230207213925315"><br><em><strong>&#x3D;&#x3D;2、pycharm&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207214036558.png" alt="image-20230207214036558"></li></ul></blockquote><h4 id="十、数据可视化"><a href="#十、数据可视化" class="headerlink" title="十、数据可视化"></a>十、数据可视化</h4><h5 id="10-1-json数据格式"><a href="#10-1-json数据格式" class="headerlink" title="10.1 json数据格式"></a>10.1 json数据格式</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;含义&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207215102933.png" alt="image-20230207215102933"></li><li><em><strong>&#x3D;&#x3D;作用&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207215135798.png" alt="image-20230207215135798"><br><img src="/road2dasheng/img/06/image-20230207215211600.png" alt="image-20230207215211600"></li><li><em><strong>&#x3D;&#x3D;python数据和Json数据的转化&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230207220224205.png" alt="image-20230207220224205"></li></ul></blockquote><h5 id="10-2-pyecharts模块介绍"><a href="#10-2-pyecharts模块介绍" class="headerlink" title="10.2 pyecharts模块介绍"></a>10.2 pyecharts模块介绍</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207222046588.png" alt="image-20230207222046588"></p></blockquote><h5 id="10-3-折线图可视化"><a href="#10-3-折线图可视化" class="headerlink" title="10.3 折线图可视化"></a>10.3 折线图可视化</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207230131006.png" alt="image-20230207230131006"></p></blockquote><h5 id="10-4-地图可视化"><a href="#10-4-地图可视化" class="headerlink" title="10.4  地图可视化"></a>10.4  地图可视化</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207230421518.png" alt="image-20230207230421518"></p></blockquote><h5 id="10-5-动态展示柱状图"><a href="#10-5-动态展示柱状图" class="headerlink" title="10.5 动态展示柱状图"></a>10.5 动态展示柱状图</h5><blockquote><p><img src="/road2dasheng/img/06/image-20230207230337591.png" alt="image-20230207230337591"></p></blockquote><hr><h4 id="十一、面向对象"><a href="#十一、面向对象" class="headerlink" title="十一、面向对象"></a>十一、面向对象</h4><h5 id="11-1-初识对象"><a href="#11-1-初识对象" class="headerlink" title="11.1 初识对象"></a>11.1 初识对象</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;为什么需要使用对象？&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/Python%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0.assets/image-20230213221001714.png" alt="image-20230213221001714"><br><img src="/road2dasheng/img/06/image-20230213223431699.png" alt="image-20230213223431699"></li></ul></blockquote><h5 id="11-2-成员方法"><a href="#11-2-成员方法" class="headerlink" title="11.2 成员方法"></a>11.2 成员方法</h5><blockquote><ul><li><p><strong>&#x3D;&#x3D;<em>掌握类的定义和使用语法</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213225057127.png" alt="image-20230213225057127"></p></li><li><p><strong>&#x3D;&#x3D;<em>成员变量和成员方法</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213225331339.png" alt="image-20230213225331339"></p></li><li><p><strong>&#x3D;&#x3D;<em>成员方法的定义</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213225751002.png" alt="image-20230213225751002"></p></li><li><p><em><strong>&#x3D;&#x3D;注意点&#x3D;&#x3D;</strong></em></p><p>只有通过self，成员方法才能访问成员变量；self出现在形参列表中，但是不占用参数位置，无需理会</p></li><li><p><img src="/road2dasheng/img/06/image-20230213230040689.png" alt="image-20230213230040689"></p></li></ul></blockquote><h5 id="11-3-类和对象"><a href="#11-3-类和对象" class="headerlink" title="11.3 类和对象"></a>11.3 类和对象</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>使用类描述事物的思想</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213230633155.png" alt="image-20230213230633155"></li><li><em><strong>&#x3D;&#x3D;为什么要创建对象&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230213230909912.png" alt="image-20230213230909912"><br><img src="/road2dasheng/img/06/image-20230213231122142.png" alt="image-20230213231122142"><br><img src="/road2dasheng/img/06/image-20230213231226296.png" alt="image-20230213231226296"></li><li><strong>&#x3D;&#x3D;<em>面向对象编程</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213231908044.png" alt="image-20230213231908044"></li><li><strong>&#x3D;&#x3D;<em>面向对象编程的三大特点</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213235847804.png" alt="image-20230213235847804"></li></ul></blockquote><h5 id="11-4-构造方法"><a href="#11-4-构造方法" class="headerlink" title="11.4 构造方法"></a>11.4 构造方法</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>属性（成员变量）的赋值</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213232507159.png" alt="image-20230213232507159"></li><li><strong>&#x3D;&#x3D;<em>构造方法</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230213232833224.png" alt="image-20230213232833224"></li></ul></blockquote><h5 id="11-5-几种常用的类内置方法"><a href="#11-5-几种常用的类内置方法" class="headerlink" title="11.5 几种常用的类内置方法"></a>11.5 几种常用的类内置方法</h5><blockquote><ul><li><em><em>&#x3D;&#x3D;__*str__字符串方法</em>&#x3D;&#x3D;</em>*<br><img src="/road2dasheng/img/06/image-20230213234630538.png" alt="image-20230213234630538"></li><li><em><em>&#x3D;&#x3D;__*lt__小于符号比较方法</em>&#x3D;&#x3D;</em>*<br><img src="/road2dasheng/img/06/image-20230213234919460.png" alt="image-20230213234919460"></li><li><em><em>&#x3D;&#x3D;__*le__小于等于比较方法</em>&#x3D;&#x3D;</em>*<br><img src="/road2dasheng/img/06/image-20230213235231368.png" alt="image-20230213235231368"></li><li><em><strong>&#x3D;&#x3D;__eq__相等比较方法&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230213235446084.png" alt="image-20230213235446084"></li></ul></blockquote><h5 id="11-6-封装"><a href="#11-6-封装" class="headerlink" title="11.6 封装"></a>11.6 封装</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>内涵</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214000034229.png" alt="image-20230214000034229"></li><li><strong>&#x3D;&#x3D;<em>私有成员</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214000140224.png" alt="image-20230214000140224"><br><img src="/road2dasheng/img/06/image-20230214000508065.png" alt="image-20230214000508065"><br><img src="/road2dasheng/img/06/image-20230214000747254.png" alt="image-20230214000747254"><br><img src="/road2dasheng/img/06/image-20230214001033295.png" alt="image-20230214001033295"></li></ul></blockquote><h5 id="11-7-继承"><a href="#11-7-继承" class="headerlink" title="11.7 继承"></a>11.7 继承</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>为什么需要继承</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214001353910.png" alt="image-20230214001353910"><br><img src="/road2dasheng/img/06/image-20230214001541910.png" alt="image-20230214001541910"></li><li><strong>&#x3D;&#x3D;<em>单继承</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214001758592.png" alt="image-20230214001758592"></li><li><strong>&#x3D;&#x3D;<em>多继承</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214001903960.png" alt="image-20230214001903960"><br><img src="/road2dasheng/img/06/image-20230214002109552.png" alt="image-20230214002109552"></li><li><em><strong>&#x3D;&#x3D;复写&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230214002838304.png" alt="image-20230214002838304"><br><img src="/road2dasheng/img/06/image-20230214003222493.png" alt="image-20230214003222493"></li></ul></blockquote><h5 id="11-8-类型注解"><a href="#11-8-类型注解" class="headerlink" title="11.8 类型注解"></a>11.8 类型注解</h5><blockquote><ul><li><strong>&#x3D;&#x3D;<em>为什么需要类型注解</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214003420099.png" alt="image-20230214003420099"><br><img src="/road2dasheng/img/06/image-20230214003507600.png" alt="image-20230214003507600"><br><img src="/road2dasheng/img/06/image-20230214003614850.png" alt="image-20230214003614850"></li><li><strong>&#x3D;&#x3D;<em>类型注解的作用</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214003806560.png" alt="image-20230214003806560"></li><li><strong>&#x3D;&#x3D;<em>变量类型注解的语法</em>&#x3D;&#x3D;</strong><br><img src="/road2dasheng/img/06/image-20230214004010760.png" alt="image-20230214004010760"><br><img src="/road2dasheng/img/06/image-20230214004402225.png" alt="image-20230214004402225"><br><img src="/road2dasheng/img/06/image-20230214004459426.png" alt="image-20230214004459426"><br><img src="/road2dasheng/img/06/image-20230214004647996.png" alt="image-20230214004647996"></li><li><em><strong>&#x3D;&#x3D;类型注解的限制&#x3D;&#x3D;</strong></em><br> <img src="/road2dasheng/img/06/image-20230214004801118.png" alt="image-20230214004801118"></li><li><strong>&#x3D;&#x3D;<em>函数（方法）的类型注解 - 形参注解</em>&#x3D;&#x3D;</strong><br> <img src="/road2dasheng/img/06/image-20230214005256695.png" alt="image-20230214005256695"></li><li><em><strong>&#x3D;&#x3D;函数（方法）的类型注解 - 返回值注解&#x3D;&#x3D;</strong></em><br> <img src="/road2dasheng/img/06/image-20230214005412412.png" alt="image-20230214005412412"></li><li><em><strong>&#x3D;&#x3D;Union类型&#x3D;&#x3D;</strong></em><br> <img src="/road2dasheng/img/06/image-20230214005653174.png" alt="image-20230214005653174"><br> <img src="/road2dasheng/img/06/image-20230214005751943.png" alt="image-20230214005751943"></li></ul></blockquote><h5 id="11-9-多态"><a href="#11-9-多态" class="headerlink" title="11.9 多态"></a>11.9 多态</h5><blockquote><ul><li><em><strong>&#x3D;&#x3D;多态：同样的行为（函数），传入不同的对象，得到不同的状态&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230214010029907.png" alt="image-20230214010029907"><br><img src="/road2dasheng/img/06/image-20230214010221187.png" alt="image-20230214010221187"></li><li><em><strong>&#x3D;&#x3D;抽象类&#x3D;&#x3D;</strong></em><br><img src="/road2dasheng/img/06/image-20230214010644501.png" alt="image-20230214010644501"><br><img src="/road2dasheng/img/06/image-20230214010926228.png" alt="image-20230214010926228"><br><img src="/road2dasheng/img/06/image-20230214011308788.png" alt="image-20230214011308788"></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git&amp;Github视频教程-笔记</title>
    <link href="/road2dasheng/05_Git&amp;GitHub%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/road2dasheng/05_Git&amp;GitHub%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://www.bilibili.com/video/BV1sJ411D7xN/?p=2&spm_id_from=pageDriver&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-Git视频课程</a>笔记</p><h3 id="一、Git介绍"><a href="#一、Git介绍" class="headerlink" title="一、Git介绍"></a>一、Git介绍</h3><blockquote><p>git是目前世界上最先进的分布式版本控制系统</p></blockquote><h4 id="Git与Github的区别"><a href="#Git与Github的区别" class="headerlink" title="Git与Github的区别"></a>Git与Github的区别</h4><blockquote><p>（1）Git是一个分布式版本控制系统，简单的说就是一个软件，用于记录一个或若干个文件内容变化，以便将来查阅特定版本修改情况的软件</p></blockquote><blockquote><p>（2）Github是一个为用户提供Git服务的网站，简单的说就是一个可以存放代码的地方（不过可以放的肯定不止有代码）。Github除了提供管理Git的web界面外，还提供了订阅、关注、讨论组、在线编辑器等丰富的功能。</p></blockquote><hr><h3 id="二、Git的使用"><a href="#二、Git的使用" class="headerlink" title="二、Git的使用"></a>二、Git的使用</h3><h4 id="2-1-本地仓库"><a href="#2-1-本地仓库" class="headerlink" title="2.1 本地仓库"></a>2.1 本地仓库</h4><h5 id="2-1-1-工作流程"><a href="#2-1-1-工作流程" class="headerlink" title="2.1.1 工作流程"></a>2.1.1 工作流程</h5><blockquote><p><strong>① Git本地操作的三个区域：</strong><br><img src="/road2dasheng/img/05/05_02.png" alt="git-本地操作-三个区域.jpg"><br><strong>② 工作流程：</strong><br><img src="/road2dasheng/img/05/05_03.png" alt="git-本地操作-工作流程.jpg"></p></blockquote><hr><h5 id="2-1-2-创建本地仓库"><a href="#2-1-2-创建本地仓库" class="headerlink" title="2.1.2 创建本地仓库"></a>2.1.2 创建本地仓库</h5><blockquote><p><strong>① 在安装好后首次使用需要先进行全局配置</strong><br>在桌面空白处右键，点击“Git Bash Here”,输入：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config -- global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config -- global user.email <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>② 创建本地仓库</strong><br>当我们需要使用Git去管理某个新项目&#x2F;已存在的项目的时候，就需要创建仓库了。<br>注意：创建仓库使用的目录不一定要求是空目录，选择一个非空目录也是可以的，但是不建议在现有项目上来学习Git。<br>注意：为了避免在学习或使用过程中出现各种奇葩问题，请不要使用包含中文的目录名（父目录也是如此）</p></blockquote><blockquote><blockquote><p><strong>a. 创建空目录</strong></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br><span class="hljs-built_in">ls</span><br><span class="hljs-built_in">cd</span> documents<br><span class="hljs-built_in">mkdir</span> pro_git<br></code></pre></td></tr></table></figure><blockquote><blockquote><p><strong>b. 在命令行中进入pro_git</strong></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> pro_git<br></code></pre></td></tr></table></figure><blockquote><blockquote><p><strong>c. Git仓库初始化（让Git知道，它需要来管理这个目录）</strong></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>命令执行结果：在pro_git目录里生成.git文件夹。注意：该文件夹是由Git创建的，不能删除也不能随意更改里面的内容</p><blockquote><blockquote><p><strong>d.Git常用操作指令</strong></p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">指令1：git status                  //查看当前状态`<br><br>指令2.1：git add 文件名            //添加一个文件到缓存区<br>指令2.2：git add 文件名1 文件名2   //添加多个文件到缓存区<br>指令2.3：git add .                 //添加当前目录到缓存区<br><br>指令3：git commit -m <span class="hljs-string">&quot;注释内容&quot;</span>    //提交至版本库<br></code></pre></td></tr></table></figure><hr><h5 id="2-1-3-版本回退"><a href="#2-1-3-版本回退" class="headerlink" title="2.1.3 版本回退"></a>2.1.3 版本回退</h5><p>版本回退分为两步骤进行操作：</p><blockquote><p><strong>步骤1：</strong><br>查看版本，确定需要回到的时刻点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">//指令：<br>git <span class="hljs-built_in">log</span>                  //显示日志<br>git <span class="hljs-built_in">log</span> --pretty=oneline //显示日志（每条日志只显示一行）<br></code></pre></td></tr></table></figure><blockquote><p><strong>步骤2：</strong><br>回退操作</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//指令：<br>git reset --hard 提交编号  //回退到“提交编号”对应的版本<br></code></pre></td></tr></table></figure><p>注意：回到过去之后，要想再回到之前最新版本的时候，则需要使用指令去查看历史操作，以得到最新的commit id。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//指令：<br>git reflog<br></code></pre></td></tr></table></figure><hr><h4 id="2-2-远程仓库"><a href="#2-2-远程仓库" class="headerlink" title="2.2 远程仓库"></a>2.2 远程仓库</h4><blockquote><p>以 <em><strong>github</strong></em> 为例。</p></blockquote><h5 id="2-2-1-远程仓库的创建"><a href="#2-2-1-远程仓库的创建" class="headerlink" title="2.2.1 远程仓库的创建"></a>2.2.1 远程仓库的创建</h5><blockquote><p><a href="/img/05/05_08.jpg">Github的使用</a></p></blockquote><h5 id="2-2-2-两种常规使用方式"><a href="#2-2-2-两种常规使用方式" class="headerlink" title="2.2.2 两种常规使用方式"></a>2.2.2 两种常规使用方式</h5><blockquote><p>方式1：基于HTTPS协议</p><blockquote><p>a.创建空目录，名字建议和远程仓库的名字一样</p></blockquote></blockquote><blockquote><blockquote><p>b.使用指令克隆远程仓库到本地<br><code>git clone 远程仓库地址</code></p></blockquote></blockquote><blockquote><blockquote><p>c.对克隆的仓库进行相关操作<br>c-1 添加到暂存区<br><code>git add 文件名</code></p></blockquote></blockquote><blockquote><blockquote><p>c-2 提交到本地仓库<br><code>git commit -m &quot;注释&quot;</code></p></blockquote></blockquote><blockquote><blockquote><p>c-3 提交到远程仓库<br><code>git push</code><br>注意：首次往远程仓库提交内容的时候会出现错误，原因在于不是任何人都可以往远程仓库提交内容，必须先鉴权。<br>具体操作为：<a href="https://www.bilibili.com/video/BV18v411w7WL/?spm_id_from=333.337.search-card.all.click&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">Github不再支持密码验证的解决方案</a></p></blockquote></blockquote><blockquote><blockquote><p>c-4 将远程仓库的文件pull到本地仓库<br><code>git pull</code></p></blockquote></blockquote><p><em><strong>&#x3D;&#x3D;提醒：每天工作前先git pull获取远程仓库最新的版本；每天下班前要git push将本地代码提交到远程仓库；&#x3D;&#x3D;</strong></em></p><hr><blockquote><p>方式2：**&#x3D;&#x3D;基于SSH协议(推荐)&#x3D;&#x3D;**<br>注：该方式与基于HTTPS协议的方式相比，只是影响github对于用户身份的鉴权方式，对于git的具体操作（如git add, git commit等）没有任何影响。</p></blockquote><blockquote><blockquote><p>a. 生成客户端公私钥文件<br>注：<a href="https://blog.csdn.net/lili1158/article/details/127688072">需要先安装openSSH</a><br><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code></p></blockquote></blockquote><blockquote><blockquote><p>b. 上传公钥文件内容（&#x2F;c&#x2F;Users&#x2F;zhawb&#x2F;.ssh&#x2F;id_rsa.pub）</p></blockquote></blockquote><blockquote><blockquote><p>c. 后续操作与方式1:a~c一样</p></blockquote></blockquote><hr><h4 id="2-3-分支管理"><a href="#2-3-分支管理" class="headerlink" title="2.3 分支管理"></a>2.3 分支管理</h4><h5 id="2-3-1-分支的概念"><a href="#2-3-1-分支的概念" class="headerlink" title="2.3.1 分支的概念"></a>2.3.1 分支的概念</h5><blockquote><p>--在版本回退时，每次提交后都会有记录，Git把它们串成时间线，形成类似于时间轴的就是一个分支，我们称之为master分支。<br>--在开发的时候往往是团队协作，多人进行开发，因此光有一个分支是无法满足多人同时开发的需求的，并且在分支上工作并不影响其他分支的正常使用，会更加安全，Git鼓励开发者使用分支去完成一些开发任务，如下图所示：</p></blockquote><blockquote><p><img src="/road2dasheng/img/05/05_04.jpg" alt="分支的概念.png"></p></blockquote><hr><h5 id="2-3-2-分支管理的相关指令"><a href="#2-3-2-分支管理的相关指令" class="headerlink" title="2.3.2 分支管理的相关指令"></a>2.3.2 分支管理的相关指令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看分支：git branch<br><br>创建分支：git branch 分支名<br><br>切换分支：git checkout 分支名<br><br>删除分支：git branch -d 分支名<br><br>合并分支：git merge 分支名<br><br>创建并切换分支：git checkout -b 分支名<br><br>删除远程仓库分支：git push origin -d 分支名<br><br>将当前分支与远程仓库关联：git push --set-upstream origin 分支名<br><br></code></pre></td></tr></table></figure><blockquote><p>注：<br>1、当前分支的前面有个“*”的标记<br><img src="/road2dasheng/img/05/05_05.jpg" alt="当前分支.png"><br>2、在删除分支的时候，一定要先退出要删除的分支，然后才能删除</p></blockquote><hr><h4 id="2-4-忽略文件"><a href="#2-4-忽略文件" class="headerlink" title="2.4 忽略文件"></a>2.4 忽略文件</h4><blockquote><p>场景：在项目目录下有很多万年不变的文件目录，或者还有一些目录即便有改动，我们也不想让其提交到远程仓库的文档，此时我们可以使用“忽略文件”机制来实现需求。</p></blockquote><blockquote><p>具体操作：新建一个名为.gitignore的文件，该文件用于声明忽略文件或不忽略文件的规则，规则对当前目录及其子目录生效。</p></blockquote><blockquote><p>常见规则：</p></blockquote><pre><code class="hljs">1） /文件夹名称/            过滤整个文件夹2） *.zip                   过滤所有的.zip文件3） /文件夹名称/文件名称    过滤该文件夹下的某个文件4） !文件名称               不过滤具体某个文件</code></pre><hr><h3 id="三、git常用命令"><a href="#三、git常用命令" class="headerlink" title="三、git常用命令"></a>三、git常用命令</h3><p><img src="/road2dasheng/img/05/05_01.jpg" alt="git常用命令"></p><hr><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://www.bilibili.com/video/BV1st411r7Sj/?p=4&spm_id_from=pageDriver&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-GitHub视频课程</a>笔记</p><h3 id="一、使用GitHub-的目的"><a href="#一、使用GitHub-的目的" class="headerlink" title="一、使用GitHub 的目的"></a>一、使用GitHub 的目的</h3><p>借助github托管项目代码</p><h3 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h3><h4 id="2-1-仓库-repository"><a href="#2-1-仓库-repository" class="headerlink" title="2.1 仓库(repository)"></a>2.1 仓库(repository)</h4><p>仓库用来存放项目代码，&#x3D;&#x3D;每个项目对应一个仓库&#x3D;&#x3D;，多个开源项目则有多个仓库</p><h4 id="2-2-收藏-star"><a href="#2-2-收藏-star" class="headerlink" title="2.2 收藏(star)"></a>2.2 收藏(star)</h4><p>收藏项目，方便下次查看</p><h4 id="2-3-复制克隆项目-fork"><a href="#2-3-复制克隆项目-fork" class="headerlink" title="2.3 复制克隆项目(fork)"></a>2.3 复制克隆项目(fork)</h4><p>fork的项目是独立存在的</p><h4 id="2-4-发起请求-pull-request"><a href="#2-4-发起请求-pull-request" class="headerlink" title="2.4 发起请求(pull request)"></a>2.4 发起请求(pull request)</h4><p><img src="/road2dasheng/img/05/05_06.jpg" alt="pull request.jpg"></p><h4 id="2-5-关注-watch"><a href="#2-5-关注-watch" class="headerlink" title="2.5 关注(watch)"></a>2.5 关注(watch)</h4><p>如果关注了某个项目，那么该项目以后有任何更新，都会第一时间提醒你</p><h4 id="2-6-事务卡片-issue"><a href="#2-6-事务卡片-issue" class="headerlink" title="2.6 事务卡片(issue)"></a>2.6 事务卡片(issue)</h4><p>用于交流讨论</p><h4 id="2-7-GitHub主页"><a href="#2-7-GitHub主页" class="headerlink" title="2.7 GitHub主页"></a>2.7 GitHub主页</h4><p>该页左侧主要显示用户动态以及关注用户或关注仓库的动态；右侧显示所有的git库</p><h4 id="2-8-仓库主页"><a href="#2-8-仓库主页" class="headerlink" title="2.8 仓库主页"></a>2.8 仓库主页</h4><p>主要显示项目的信息，如：项目代码，版本，star&#x2F;fork&#x2F;watch情况等</p><h4 id="2-9-个人主页"><a href="#2-9-个人主页" class="headerlink" title="2.9 个人主页"></a>2.9 个人主页</h4><p>个人信息：头像，个人简介，关注我的人，我关注的人，我关注的git库，我的开源项目，我贡献的开源项目等信息</p><h3 id="三、注册github账号"><a href="#三、注册github账号" class="headerlink" title="三、注册github账号"></a>三、注册github账号</h3><p><a href="https://www.github.com/">Github官方网址</a></p><h3 id="四、创建仓库-x2F-创建新项目"><a href="#四、创建仓库-x2F-创建新项目" class="headerlink" title="四、创建仓库&#x2F;创建新项目"></a>四、创建仓库&#x2F;创建新项目</h3><p>note: 一个仓库对应一个开源项目；通过git可以管理仓库<br><strong>仓库主页说明：</strong><br><img src="/road2dasheng/img/05/05_07.jpg" alt="仓库主页说明.png">)</p><h3 id="五、仓库管理"><a href="#五、仓库管理" class="headerlink" title="五、仓库管理"></a>五、仓库管理</h3><h4 id="5-1-新建文件"><a href="#5-1-新建文件" class="headerlink" title="5.1 新建文件"></a>5.1 新建文件</h4><h4 id="5-2-编辑文件"><a href="#5-2-编辑文件" class="headerlink" title="5.2 编辑文件"></a>5.2 编辑文件</h4><h4 id="5-3-删除文件"><a href="#5-3-删除文件" class="headerlink" title="5.3 删除文件"></a>5.3 删除文件</h4><h4 id="5-4-上传文件"><a href="#5-4-上传文件" class="headerlink" title="5.4 上传文件"></a>5.4 上传文件</h4><h4 id="5-5-搜索仓库文件"><a href="#5-5-搜索仓库文件" class="headerlink" title="5.5 搜索仓库文件"></a>5.5 搜索仓库文件</h4><h4 id="5-6-下载-x2F-检出项目"><a href="#5-6-下载-x2F-检出项目" class="headerlink" title="5.6 下载&#x2F;检出项目"></a>5.6 下载&#x2F;检出项目</h4><h3 id="六、Github-Issues"><a href="#六、Github-Issues" class="headerlink" title="六、Github Issues"></a>六、Github Issues</h3><p>用于交流解决问题</p><h3 id="七、开源项目贡献流程"><a href="#七、开源项目贡献流程" class="headerlink" title="七、开源项目贡献流程"></a>七、开源项目贡献流程</h3><h4 id="7-1-新建Issue"><a href="#7-1-新建Issue" class="headerlink" title="7.1 新建Issue"></a>7.1 新建Issue</h4><p>提交使用的问题或建议或想法</p><h4 id="7-2-新建pull-request"><a href="#7-2-新建pull-request" class="headerlink" title="7.2 新建pull request"></a>7.2 新建pull request</h4><p>步骤：（1）fork项目<br>（2）修改自己仓库的代码<br>（3）新建pull request<br>（4）等待原项目作者审核操作</p>]]></content>
    
    
    <categories>
      
      <category>编程开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码托管</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习入门视频教程-笔记</title>
    <link href="/road2dasheng/04_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/road2dasheng/04_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="B站黑马程序员-机器学习入门视频课程笔记"><a href="#B站黑马程序员-机器学习入门视频课程笔记" class="headerlink" title="B站黑马程序员-机器学习入门视频课程笔记"></a><a href="https://www.bilibili.com/video/BV1pf4y1y7kw/?spm_id_from=333.880.my_history.page.click&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-机器学习入门视频课程</a>笔记</h3><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1-1-人工智能"><a href="#1-1-人工智能" class="headerlink" title="1.1 人工智能"></a>1.1 人工智能</h4><h5 id="1-1-1-人工智能应用场景"><a href="#1-1-1-人工智能应用场景" class="headerlink" title="1.1.1 人工智能应用场景"></a>1.1.1 人工智能应用场景</h5><p><img src="/road2dasheng/img/04/04_01.png" alt="人工智能应用场景"></p><h5 id="1-1-2-人工智能小案例"><a href="#1-1-2-人工智能小案例" class="headerlink" title="1.1.2 人工智能小案例"></a>1.1.2 人工智能小案例</h5><p><img src="/road2dasheng/img/04/04_02.png" alt="人工智能小案例"></p><h5 id="1-1-3-人工智能发展必备三要素"><a href="#1-1-3-人工智能发展必备三要素" class="headerlink" title="1.1.3 人工智能发展必备三要素"></a>1.1.3 人工智能发展必备三要素</h5><p><img src="/road2dasheng/img/04/04_03.png" alt="人工智能发展必备三要素"></p><blockquote><ul><li>算力之CPU、GPU对比：CPU主要适合IO密集型的任务; GPU主要适合计算密集型任务</li><li>什么类型的程序适合在GPU上运行 <img src="/road2dasheng/img/04/04_04.png" alt="什么类型的程序适合在GPU上运行"></li><li><a href="http://www.sohu.com/a/201309334_468740">CPU和GPU的区别</a></li><li><a href="https://buzzorange.com/techorange/2017/09/27/what-intel-google-nvidia-microsoft-do-for-ai-chips/">Google TPU介绍</a></li></ul></blockquote><h5 id="1-1-4-人工智能、机器学习和深度学习"><a href="#1-1-4-人工智能、机器学习和深度学习" class="headerlink" title="1.1.4 人工智能、机器学习和深度学习"></a>1.1.4 人工智能、机器学习和深度学习</h5><p><img src="/road2dasheng/img/04/04_05.png" alt="人工智能、机器学习和深度学习的关系"></p><blockquote><p>机器学习是人工智能的一个实现途径，深度学习是机器学习的一个方法发展而来的</p></blockquote><h5 id="1-1-5-人工智能的发展历程"><a href="#1-1-5-人工智能的发展历程" class="headerlink" title="1.1.5 人工智能的发展历程"></a>1.1.5 人工智能的发展历程</h5><blockquote><ol><li>起源<blockquote><ul><li>图灵测试<img src="/road2dasheng/img/04/04_06.png" alt="图灵测试"></li><li>达特茅斯会议 <img src="/road2dasheng/img/04/04_07.png" alt="达特茅斯会议"></li></ul></blockquote></li><li>发展<blockquote><ul><li>学术界可谓仁者见仁、智者见智，我们将人工智能的发展历程划分为以下6个阶段：<img src="/road2dasheng/img/04/04_08.png" alt="人工智能发展阶段"><img src="/road2dasheng/img/04/04_09.png" alt="人工智能发展阶段"></li></ul></blockquote></li></ol></blockquote><h5 id="1-1-6-人工智能主要分支"><a href="#1-1-6-人工智能主要分支" class="headerlink" title="1.1.6 人工智能主要分支"></a>1.1.6 人工智能主要分支</h5><blockquote><p>通讯、感知与行动是现代人工智能的三个关键能力</p><p>&#x3D;&#x3D;分支一：计算机视觉（CV）&#x3D;&#x3D;</p><blockquote><p>  计算机视觉(CV)是指机器感知环境的能力。这一技术类别中的经典任务有图像形成、图像处理、图像提取和图像的三维推理。物体检测和人脸识别是其比较成功的研究领域。<img src="/road2dasheng/img/04/04_10.png" alt="分支一：计算机视觉"></p></blockquote><p>&#x3D;&#x3D;分支二：语音识别&#x3D;&#x3D;</p><blockquote><p> 语音识别是指识别语音(说出的语言)并将其转换成对应文本的技术。相反的任务(文本转语音&#x2F;TTS)也是这一领域内一个类似的研究主题。<img src="/road2dasheng/img/04/04_11.png" alt="分支二：语音识别"><br> 语音识别领域仍然面临着声纹识别和「鸡尾酒会效应」等一些特殊情况的难题。<br> 现代语音识别系统严重依赖于云，在离线时可能就无法取得理想的工作效果。</p></blockquote><p>&#x3D;&#x3D;分支三：文本挖掘&#x2F;分类&#x3D;&#x3D;</p><blockquote><p>这里的文本挖掘主要是指文本分类，该技术可用于理解、组织和分类结构化或非结构化文文档。其涵盖的主要任务有句法分析、情绪分析和垃圾信息检测。<img src="/road2dasheng/img/04/04_12.png" alt="分支三：文本挖掘/分类"><br>文本挖掘和分类领域的一个瓶颈出现在歧义和有偏差的数据上。</p></blockquote><p>&#x3D;&#x3D;分支四：机器翻译&#x3D;&#x3D;</p><blockquote><p>机器翻译(MT)是利用机器的力量自动将一种自然语言(源语言)的文本翻译成另一种语言(目标语言)。<img src="/road2dasheng/img/04/04_13.png" alt="分支四：机器翻译"><br>在某些情况下，俚语和行话等内容的翻译会比较困难(受限词表问题)。<br>专业领域的机器翻译(比如医疗领域)表现通常不好。</p></blockquote><p>&#x3D;&#x3D;分支五：机器人&#x3D;&#x3D;</p><blockquote><p>机器人学(Robotics)研究的是机器人的设计、制造、运作和应用，以及控制它们的计算机系统、传感反馈和信息处理。<img src="/road2dasheng/img/04/04_14.png" alt="分支五：机器人"></p></blockquote><p>&#x3D;&#x3D;总的来说，人工智能领域的研究前沿正逐渐从搜索、知识和推理领域转向机器学习、深度学习、计算机视觉和机器人领域。&#x3D;&#x3D;</p></blockquote><h4 id="1-2-机器学习工作流程"><a href="#1-2-机器学习工作流程" class="headerlink" title="1.2 机器学习工作流程"></a>1.2 机器学习工作流程</h4><h5 id="1-2-1-什么是机器学习"><a href="#1-2-1-什么是机器学习" class="headerlink" title="1.2.1 什么是机器学习"></a>1.2.1 什么是机器学习</h5><blockquote><p>机器学习是指从数据中自动分析获得模型，并利用模型对未知数据进行预测。 <img src="/road2dasheng/img/04/04_15.png" alt="机器学习"></p></blockquote><h5 id="1-2-2-机器学习工作流程"><a href="#1-2-2-机器学习工作流程" class="headerlink" title="1.2.2 机器学习工作流程"></a>1.2.2 机器学习工作流程</h5><blockquote><p>获取数据 -&gt; 数据基本处理 -&gt; 特征工程 -&gt; 机器学习（模型训练）-&gt; 结果达到要求,上线服务 -&gt; 结果未达到要求，重复前述步骤  <img src="/road2dasheng/img/04/04_16.png" alt="机器学习工作流程"></p></blockquote><h5 id="1-2-3-数据集介绍"><a href="#1-2-3-数据集介绍" class="headerlink" title="1.2.3 数据集介绍"></a>1.2.3 数据集介绍</h5><blockquote><p>&#x3D;&#x3D;- 数据简介&#x3D;&#x3D;</p><blockquote><p>一行数据成为一个样本<br>一列数据成为一个特征<br>有些数据有目标值（标签值），有些数据没有目标值</p></blockquote><p>&#x3D;&#x3D;- 数据类型构成&#x3D;&#x3D;</p><blockquote><p>类型一：特征值 + 目标值（连续的或离散的）<br>类型二：只有特征值，没有目标值</p></blockquote><p>&#x3D;&#x3D;- 数据分割&#x3D;&#x3D;</p><blockquote><p>训练数据：用于训练，构建模型<br>测试数据：在模型检验时使用，用于评估模型是否有效<br>两种数据的划分比例：7:3 或 8:2 或 7.5:2.5</p></blockquote></blockquote><h5 id="1-2-4-数据基本处理"><a href="#1-2-4-数据基本处理" class="headerlink" title="1.2.4 数据基本处理"></a>1.2.4 数据基本处理</h5><blockquote><p>即对数据进行缺失值、去除异常值等处理</p></blockquote><h5 id="1-2-5-特征工程"><a href="#1-2-5-特征工程" class="headerlink" title="1.2.5 特征工程"></a>1.2.5 特征工程</h5><blockquote><ul><li><p>定义</p><blockquote><p>指使用专业背景知识和技巧处理数据，使得特征能在机器学习算法上发挥更好的作用的过程</p></blockquote></li><li><p>作用</p><blockquote><p>机器学习领域的大神Andrew Ng(吴恩达)老师说“Coming up with features is difficult, time-consuming, requires expert knowledge. “Applied machine learning” is basically feature engineering. ”<br>&#x3D;&#x3D;业界广泛流传：数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。&#x3D;&#x3D;</p></blockquote></li><li><p>内涵</p><blockquote><p>&#x3D;&#x3D;– 特征提取&#x3D;&#x3D;</p><blockquote><p> 将任意数据（如文本或图像）转换为可用于机器学习的数字特征<img src="/road2dasheng/img/04/04_17.png" alt="特征提取"><br> &#x3D;&#x3D;– 特征预处理&#x3D;&#x3D;<br>通过一些转换函数将特征数据转换成更加适合算法模型的特征数据过程<img src="/road2dasheng/img/04/04_18.png" alt="特征预处理"><br>&#x3D;&#x3D;– 特征降维&#x3D;&#x3D;<br> 指在某些限定条件下，降低随机变量(特征)个数，得到一组“不相关”主变量的过程<img src="/road2dasheng/img/04/04_19.png" alt="特征降维"></p></blockquote></blockquote></li></ul></blockquote><h5 id="1-2-6-机器学习"><a href="#1-2-6-机器学习" class="headerlink" title="1.2.6 机器学习"></a>1.2.6 机器学习</h5><blockquote><p>选择合适的算法对模型进行训练（具体内容见[[#^edf363 | 机器学习算法]]）</p></blockquote><h5 id="1-2-7-模型评估"><a href="#1-2-7-模型评估" class="headerlink" title="1.2.7 模型评估"></a>1.2.7 模型评估</h5><blockquote><p>对训练好的模型进行评估（具体内容见[[#^cbe98e| 模型评估]]）</p></blockquote><h5 id="1-2-8-拓展阅读"><a href="#1-2-8-拓展阅读" class="headerlink" title="1.2.8 拓展阅读"></a>1.2.8 拓展阅读</h5><p>[[#^bce1d5 | 机器学习项目的完整流程]]</p><h4 id="1-3-机器学习算法"><a href="#1-3-机器学习算法" class="headerlink" title="1.3 机器学习算法"></a>1.3 机器学习算法</h4><p>^edf363</p><h5 id="1-3-1-监督学习"><a href="#1-3-1-监督学习" class="headerlink" title="1.3.1 监督学习"></a>1.3.1 监督学习</h5><blockquote><ul><li><p>定义</p><blockquote><p>输入数据是由输入特征值和目标值所组成。<br>函数的输出值可以是一个连续的值(称为回归)；或是有限个离散值(称为分类)</p></blockquote></li><li><p>回归问题</p><blockquote><p>如预测房价，根据样本集拟合出一条连续曲线 <img src="/road2dasheng/img/04/04_20.png" alt="回归问题"></p></blockquote></li><li><p>分类问题</p><blockquote><p>如根据肿瘤特征判断良性还是恶性，得到的结果是“良性”或者“恶性”，是离散的。<img src="/road2dasheng/img/04/04_21.png" alt="分类问题"></p></blockquote></li></ul></blockquote><h5 id="1-3-2-无监督学习"><a href="#1-3-2-无监督学习" class="headerlink" title="1.3.2 无监督学习"></a>1.3.2 无监督学习</h5><blockquote><ul><li>定义<blockquote><p>输入数据是由输入特征值组成，没有目标值。<br>输入数据没有被标记，也没有确定的结果。样本数据类别未知。需要根据样本间的相似性对样本集进行类别划分。<img src="/road2dasheng/img/04/04_22.png" alt="无监督学习"></p></blockquote></li></ul></blockquote><h5 id="1-3-3-半监督学习"><a href="#1-3-3-半监督学习" class="headerlink" title="1.3.3 半监督学习"></a>1.3.3 半监督学习</h5><blockquote><ul><li>定义<br>训练集同时包含有标记样本数据和未标记样本数据。</li></ul></blockquote><h5 id="1-3-4-强化学习"><a href="#1-3-4-强化学习" class="headerlink" title="1.3.4 强化学习"></a>1.3.4 强化学习</h5><blockquote><ul><li>定义<blockquote><p>实质是make decisions 问题，即自动进行决策，并且可以做连续决策。<img src="/road2dasheng/img/04/04_23.png" alt="强化学习"></p></blockquote></li><li>&#x3D;&#x3D;强化学习的目标是获得最多的累计奖励&#x3D;&#x3D;</li></ul></blockquote><h5 id="1-3-5-上述算法对比"><a href="#1-3-5-上述算法对比" class="headerlink" title="1.3.5 上述算法对比"></a>1.3.5 上述算法对比</h5><blockquote><ul><li>&#x3D;&#x3D;监督学习和无监督学习的对比&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_24.png" alt="监督学习和无监督学习的对比"></li></ul><p>-&#x3D;&#x3D;监督学习和半监督学习训练方式的对比&#x3D;&#x3D;</p><blockquote><p>–  监督学习的训练方式<img src="/road2dasheng/img/04/04_25.png" alt="监督学习和半监督学习训练方式的对比"><br>– 半监督学习的训练方式 <img src="/road2dasheng/img/04/04_26.png" alt="监督学习和半监督学习训练方式的对比"></p></blockquote><ul><li>&#x3D;&#x3D;监督学习和强化学习的对比&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_27.png" alt="监督学习和强化学习的对比"></li></ul></blockquote><h5 id="1-3-6-总结"><a href="#1-3-6-总结" class="headerlink" title="1.3.6 总结"></a>1.3.6 总结</h5><blockquote><p>&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_29.png" alt="监督学习和强化学习的对比"></p></blockquote><h5 id="1-3-7-拓展阅读"><a href="#1-3-7-拓展阅读" class="headerlink" title="1.3.7 拓展阅读"></a>1.3.7 拓展阅读</h5><blockquote><ul><li>[[#^5ed916 | 独立同分布]]</li><li><a href="http://sports.sina.com.cn/chess/weiqi/2017-10-21/doc-ifymyyxw4023875.shtml">Alphago进化史 漫画告诉你Zero为什么这么牛</a></li></ul></blockquote><h4 id="1-4-模型评估"><a href="#1-4-模型评估" class="headerlink" title="1.4 模型评估"></a>1.4 模型评估</h4><p>^cbe98e</p><h5 id="1-4-1-作用"><a href="#1-4-1-作用" class="headerlink" title="1.4.1 作用"></a>1.4.1 作用</h5><blockquote><p>模型评估是模型开发过程不可或缺的一部分。它有助于发现表达数据的最佳模型和所选模型将来工作的性能如何。</p></blockquote><h5 id="1-4-2-类型"><a href="#1-4-2-类型" class="headerlink" title="1.4.2 类型"></a>1.4.2 类型</h5><blockquote><ul><li><p>按照数据集的目标值不同，可以把模型评估分为分类模型评估和回归模型评估。</p></li><li><p>分类模型评估指标</p><blockquote><p>– <a href="https://cloud.tencent.com/developer/article/1510724">准确率(Accuracy)、精确率(Precision)和召回率(Recall)</a></p><ul><li><ul><li><a href="https://blog.csdn.net/matrix_space/article/details/50384518">F1-score</a></li></ul></li><li><ul><li><a href="https://zhuanlan.zhihu.com/p/33407505">AUC</a></li></ul></li></ul></blockquote></li><li><p>回归模型评估</p><blockquote><p>– <a href="https://zhuanlan.zhihu.com/p/143169742">均方根误差</a><br>– <a href="https://zhuanlan.zhihu.com/p/143169742">相对平方误差</a><br>– <a href="https://zhuanlan.zhihu.com/p/143169742">平均绝对误差 </a><br>– <a href="https://zhuanlan.zhihu.com/p/143169742">相对绝对误差</a></p></blockquote></li></ul></blockquote><h5 id="1-4-3-拟合"><a href="#1-4-3-拟合" class="headerlink" title="1.4.3 拟合"></a>1.4.3 拟合</h5><blockquote><p>模型的表现效果大致可以分为两类：过拟合、欠拟合。<img src="/road2dasheng/img/04/04_30.png" alt="拟合"></p><ul><li>欠拟合<img src="/road2dasheng/img/04/04_31.png" alt="欠拟合"></li><li>过拟合<img src="/road2dasheng/img/04/04_32.png" alt="过拟合"></li></ul></blockquote><h4 id="1-5-深度学习简介"><a href="#1-5-深度学习简介" class="headerlink" title="1.5 深度学习简介"></a>1.5 深度学习简介</h4><h5 id="1-5-1-定义"><a href="#1-5-1-定义" class="headerlink" title="1.5.1 定义"></a>1.5.1 定义</h5><blockquote><ul><li>深度学习（Deep Learning）（也称为深度结构学习[Deep Structured Learning]、层次学习[Hierarchical Learning]或者是深度机器学习 [Deep Machine Learning]）</li><li>是一类算法集合</li><li>是机器学习的一个分支</li><li>&#x3D;&#x3D;深度学习方法近年来，在会话识别、图像识别和对象侦测等领域表现出了惊人的准确性。&#x3D;&#x3D;</li><li>但是，“深度学习”这个词语很古老，它在1986年由Dechter在机器学习领域提出，然后在2000年有Aizenberg等人引入到人工神经网络中。而现在，由于Alex Krizhevsky在2012年使用卷积网络结构赢得了Image Net比赛之后受到大家的瞩目。</li></ul></blockquote><h5 id="1-5-2-起源"><a href="#1-5-2-起源" class="headerlink" title="1.5.2 起源"></a>1.5.2 起源</h5><blockquote><ul><li><a href="https://zh.wikipedia.org/zh-hans/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">神经网络</a></li><li><a href="https://zh.wikipedia.org/zh-hans/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">卷积神经网络</a></li></ul></blockquote><h5 id="1-5-3-演示"><a href="#1-5-3-演示" class="headerlink" title="1.5.3 演示"></a>1.5.3 演示</h5><blockquote><p><a href="http://playground.tensorflow.org/">深度学习演示</a></p></blockquote><h5 id="1-5-4-各层负责内容"><a href="#1-5-4-各层负责内容" class="headerlink" title="1.5.4 各层负责内容"></a>1.5.4 各层负责内容</h5><blockquote><p>&#x3D;&#x3D;多层神经网络，在最初几层是识别简单内容，后面几层是识别一些复杂内容&#x3D;&#x3D;</p><ul><li>1层：负责识别颜色及简单纹理<img src="/road2dasheng/img/04/04_33.png" alt="1层"></li><li>2层：一些神经元可以识别更加细化的纹理，布纹，刻纹，叶纹等<img src="/road2dasheng/img/04/04_34.png" alt="2层"></li><li>3层：一些神经元负责感受黑夜里的黄色烛光，高光，萤火，鸡蛋黄色等<img src="/road2dasheng/img/04/04_35.png" alt="3层"></li><li>4层：一些神经元识别萌狗的脸，宠物形貌，圆柱体事物，七星瓢虫等的存在<img src="/road2dasheng/img/04/04_36.png" alt="4层"></li><li>5层：一些神经元负责识别花，黑眼圈动物，鸟，键盘，原型屋顶等<img src="/road2dasheng/img/04/04_37.png" alt="5层"></li></ul></blockquote><h3 id="二、算法"><a href="#二、算法" class="headerlink" title="二、算法"></a>二、算法</h3><h4 id="2-1-K-近邻算法"><a href="#2-1-K-近邻算法" class="headerlink" title="2.1 K-近邻算法"></a>2.1 K-近邻算法</h4><blockquote><ul><li>K Nearest Neighbor算法⼜叫KNN算法，这个算法是机器学习⾥⾯⼀个⽐较经典的算法，总体来说KNN算法是相对⽐较容易理解的算法<img src="/road2dasheng/img/04/04_38.png" alt="KNN"></li><li>&#x3D;&#x3D;根据你的“邻居”来推断出你的类别&#x3D;&#x3D;</li></ul></blockquote><h5 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1 定义"></a>2.1.1 定义</h5><blockquote><ul><li>如果⼀个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的⼤多数属于某⼀个类别，则该样本也属于这个类别。&#x3D;&#x3D;KNN算法最早是由Cover和Hart提出的⼀种分类算法&#x3D;&#x3D;</li></ul></blockquote><h5 id="2-1-2-距离公式"><a href="#2-1-2-距离公式" class="headerlink" title="2.1.2 距离公式"></a>2.1.2 距离公式</h5><blockquote><ul><li>基本性质<img src="/road2dasheng/img/04/04_43.png" alt="距离公式的基本性质"></li><li>常见的距离公式 <blockquote><p>–  &#x3D;&#x3D;欧式距离(Euclidean Distance)&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_39.png" alt="欧式距离公式"><br>– &#x3D;&#x3D;曼哈顿距离(Manhattan Distance)&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_44.png" alt="曼哈顿距离公式"><br>– &#x3D;&#x3D;切⽐雪夫距离(Chebyshev Distance)&#x3D;&#x3D;<br>国际象棋中，国王可以直⾏、横⾏、斜⾏，所以国王⾛⼀步可以移动到相邻8个⽅格中的任意⼀个。国王从格⼦(x1,y1) ⾛到格⼦(x2,y2)最少需要多少步？这个距离就叫切⽐雪夫距离<img src="/road2dasheng/img/04/04_45.png" alt="切比雪夫距离公式"><br>– &#x3D;&#x3D;闵可夫斯基距离(Minkowski Distance)&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_46.png" alt="闵可夫斯基距离公式"><br>– &#x3D;&#x3D;上述距离公式的缺点&#x3D;&#x3D;&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_47.png" alt="闵可夫斯基距离公式的缺点"><br>– &#x3D;&#x3D;拓展阅读&#x3D;&#x3D;</p></blockquote></li></ul></blockquote><h5 id="2-1-3-应用"><a href="#2-1-3-应用" class="headerlink" title="2.1.3 应用"></a>2.1.3 应用</h5><blockquote><ul><li>电影类型分析<img src="/road2dasheng/img/04/04_40.png" alt="电影类型分析"><img src="/road2dasheng/img/04/04_41.png" alt="电影类型分析"></li><li>&#x3D;&#x3D;算法流程总结&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_42.png" alt="KNN算法流程"></li><li>API调用</li></ul></blockquote><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><h4 id="1-机器学习项目的完整流程"><a href="#1-机器学习项目的完整流程" class="headerlink" title="1_机器学习项目的完整流程"></a>1_机器学习项目的完整流程</h4><p>^bce1d5</p><h5 id="1-1-抽象成数学问题"><a href="#1-1-抽象成数学问题" class="headerlink" title="1.1 抽象成数学问题"></a>1.1 抽象成数学问题</h5><blockquote><p>明确问题是进行机器学习的第一步。机器学习的训练过程通常都是一件非常耗时的事情，胡乱尝试时间成本是非常高的。 这里的抽象成数学问题，指的明确我们可以获得什么样的数据，抽象出的问题，是一个分类还是回归或者是聚类的问题。</p></blockquote><h5 id="1-2-获取数据"><a href="#1-2-获取数据" class="headerlink" title="1.2 获取数据"></a>1.2 获取数据</h5><blockquote><ul><li>数据决定了机器学习结果的上限，而算法只是尽可能逼近这个上限。</li><li>数据要有代表性，否则必然会过拟合。</li><li>而且对于分类问题，数据偏斜不能过于严重，不同类别的数据数量不要有数量级的差距。</li><li>而且还要对数据的量级有一个评估，多少个样本，多少个特征，可以估算出其对内存的消耗程度，判断训练过程中内存是否能够放得下。如果 放不下就得考虑改进算法或者使用一些降维的技巧了。如果数据量实在太大，那就要考虑分布式了。</li></ul></blockquote><h5 id="1-3-特征预处理与特征选择"><a href="#1-3-特征预处理与特征选择" class="headerlink" title="1.3 特征预处理与特征选择"></a>1.3 特征预处理与特征选择</h5><blockquote><ul><li>良好的数据要能够提取出良好的特征才能真正发挥作用。</li><li>特征预处理、数据清洗是很关键的步骤，往往能够使得算法的效果和性能得到显著提高。归一化、离散化、因子化、缺失值处理、去除共线性 等，数据挖掘过程中很多时间就花在它们上面。这些工作简单可复制，收益稳定可预期，是机器学习的基础必备步骤。</li><li>筛选出显著特征、摒弃非显著特征，需要机器学习工程师反复理解业务。这对很多结果有决定性的影响。特征选择好了，非常简单的算法也能 得出良好、稳定的结果。这需要运用特征有效性分析的相关技术，如相关系数、卡方检验、平均互信息、条件熵、后验概率、逻辑回归权重等 方法。</li></ul></blockquote><h5 id="1-4-训练模型与调优"><a href="#1-4-训练模型与调优" class="headerlink" title="1.4 训练模型与调优"></a>1.4 训练模型与调优</h5><blockquote><p>直到这一步才能用到具体的算法进行训练。现在很多算法都能够封装成黑盒供人使用。但是真正考验水平的是调整这些算法的（超）参 数，使得结果变得更加优良。这需要我们对算法的原理有深入的理解。理解越深入，就越能发现问题的症结，提出良好的调优方案。</p></blockquote><h5 id="1-5-模型诊断"><a href="#1-5-模型诊断" class="headerlink" title="1.5 模型诊断"></a>1.5 模型诊断</h5><blockquote><ul><li>用于确定模型调优的方向与思路</li><li>过拟合、欠拟合 判断是模型诊断中至关重要的一步。常见的方法如交叉验证，绘制学习曲线等。过拟合的基本调优思路是增加数据量，降低模 型复杂度。欠拟合的基本调优思路是提高特征数量和质量，增加模型复杂度。</li><li>误差分析也是机器学习至关重要的步骤。通过观察误差样本全面分析产生误差的原因:是参数的问题还是算法选择的问题，是特征的问题还是数据本身的问题……</li><li>诊断后的模型需要进行调优，调优后的新模型需要重新进行诊断，这是一个反复迭代不断逼近的过程，需要不断地尝试， 进而达到最优状态。</li></ul></blockquote><h5 id="1-6-模型融合"><a href="#1-6-模型融合" class="headerlink" title="1.6 模型融合"></a>1.6 模型融合</h5><blockquote><ul><li>一般来说，模型融合后都能使得效果有一定提升。而且效果很好。</li><li>工程上，主要提升算法准确度的方法是分别在模型的前端（特征清洗和预处理，不同的采样模式）与后端（模型融合）上下功夫。因为他们比较标准可复制，效果比较稳定。而直接调参的工作不会很多，毕竟大量数据训练起来太慢了，而且效果难以保证。</li></ul></blockquote><h5 id="1-7-上线运行"><a href="#1-7-上线运行" class="headerlink" title="1.7 上线运行"></a>1.7 上线运行</h5><blockquote><p>这一部分内容主要跟工程实现的相关性比较大。工程上是结果导向，模型在线上运行的效果直接决定模型的成败。 不单纯包括其准确程度、误差等情况，还包括其运行的速度(时间复杂度)、资源消耗程度（空间复杂度）、稳定性是否可接受。</p></blockquote><h5 id="1-8-总结"><a href="#1-8-总结" class="headerlink" title="1.8 总结"></a>1.8 总结</h5><blockquote><p>&#x3D;&#x3D;这些工作流程主要是工程实践上总结出的一些经验。并不是每个项目都包含完整的一个流程。这里的部分只是一个指导性的说明，只有大家自 己多实践，多积累项目经验，才会有自己更深刻的认识。&#x3D;&#x3D;</p></blockquote><h4 id="2-独立同分布IID（Independent-and-Identically-Distributed）"><a href="#2-独立同分布IID（Independent-and-Identically-Distributed）" class="headerlink" title="2_独立同分布IID（Independent and Identically Distributed）"></a>2_独立同分布IID（Independent and Identically Distributed）</h4><p>^5ed916</p><h5 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h5><blockquote><p>在概率统计理论中，如果变量序列或者其他随机变量有相同的概率分布，并且互相独立，那么这些随机变量是独立同分布。 在西瓜书中解释是：输入空间中的所有样本服从一个隐含未知的分布，训练数据所有样本都是独立地从这个分布上采样而得。</p></blockquote><h5 id="2-2-独立、同分布和独立同分布的简单解释"><a href="#2-2-独立、同分布和独立同分布的简单解释" class="headerlink" title="2.2 独立、同分布和独立同分布的简单解释"></a>2.2 独立、同分布和独立同分布的简单解释</h5><blockquote><p>&#x3D;&#x3D;<img src="/road2dasheng/img/04/04_28.png" alt="监督学习和强化学习的对比"></p></blockquote><h5 id="2-3-机器学习领域的重要假设"><a href="#2-3-机器学习领域的重要假设" class="headerlink" title="2.3 机器学习领域的重要假设"></a>2.3 机器学习领域的重要假设</h5><blockquote><p>&#x3D;&#x3D;IID独立同分布即假设训练数据和测试数据是满足相同分布的，它是通过训练数据获得的模型能够在测试集获得好的效果的一个基本保障。&#x3D;&#x3D;</p></blockquote><h5 id="2-4-目前发展"><a href="#2-4-目前发展" class="headerlink" title="2.4 目前发展"></a>2.4 目前发展</h5><blockquote><ul><li>机器学习并不总要求独立同分布，在不少问题中要求样本数据采样自同一个分布是因为希望用训练数据集得到的模型可以合理的用于测试数据集，使用独立同分布假设能够解释得通。</li><li>目前一些机器学习内容已经不再囿于独立同分布假设下，一些问题会假设样本没有同分布。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux入门视频教程-笔记</title>
    <link href="/road2dasheng/03_Linux%E5%85%A5%E9%97%A8/"/>
    <url>/road2dasheng/03_Linux%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="B站黑马程序员-Linux入门视频课程笔记"><a href="#B站黑马程序员-Linux入门视频课程笔记" class="headerlink" title="B站黑马程序员-Linux入门视频课程笔记"></a><a href="https://www.bilibili.com/video/BV1n84y1i7td?p=24&vd_source=ce97f8ebe1ffd37a2e287328d33d93b1">B站黑马程序员-Linux入门视频课程</a>笔记</h3><h4 id="1-初识Linux"><a href="#1-初识Linux" class="headerlink" title="1. 初识Linux"></a>1. 初识Linux</h4><h5 id="1-1-Linux内核"><a href="#1-1-Linux内核" class="headerlink" title="1.1 Linux内核"></a>1.1 Linux内核</h5><blockquote><ul><li><img src="/road2dasheng/img/03/image-20230202175738140.png" alt="image-20230202175738140"></li></ul></blockquote><h5 id="1-2-Linux发行版"><a href="#1-2-Linux发行版" class="headerlink" title="1.2 Linux发行版"></a>1.2 Linux发行版</h5><blockquote><ul><li><img src="/road2dasheng/img/03/image-20230202180326202.png" alt="image-20230202180326202"></li><li><img src="/road2dasheng/img/03/image-20230202180845094.png" alt="image-20230202180845094"></li></ul></blockquote><h5 id="1-3-WSL：-Windows-Subsystem-for-Linux"><a href="#1-3-WSL：-Windows-Subsystem-for-Linux" class="headerlink" title="1.3 WSL： Windows Subsystem for Linux"></a>1.3 WSL： Windows Subsystem for Linux</h5><blockquote><p>WSL作为windows10系统带来的全新特性，正在逐步颠覆开发人员既有的选择</p><blockquote><ul><li>传统方式获取Linux操作系统环境，是安装完整的虚拟机，如VMWare</li><li>使用WSL，可以以非常轻量化的方式，得到Linux系统环境 </li><li>WSL图解<br><img src="/road2dasheng/img/03/image-20230202192204547.png" alt="image-20230202192204547"></li><li>WSL部署<br><img src="/road2dasheng/img/03/image-20230202192639405.png" alt="image-20230202192639405"></li></ul></blockquote></blockquote><h5 id="1-4-虚拟机快照"><a href="#1-4-虚拟机快照" class="headerlink" title="1.4 虚拟机快照"></a>1.4 虚拟机快照</h5><blockquote><ul><li>虚拟机快照可以保存虚拟机的状态，当虚拟机出现问题时，可以通过预先制作的快照恢复到制作时候的状态，用作备份用<br><img src="/road2dasheng/img/03/image-20230202215145813.png" alt="image-20230202215145813"></li></ul></blockquote><hr><h4 id="2-Linux基础命令"><a href="#2-Linux基础命令" class="headerlink" title="2. Linux基础命令"></a>2. Linux基础命令</h4><h5 id="2-1-重要知识点"><a href="#2-1-重要知识点" class="headerlink" title="2.1 重要知识点"></a>2.1 重要知识点</h5><blockquote><p>Linux的目录结构</p><blockquote><ul><li>Linux的顶级目录只有一个，称为“根目录”</li><li>Windows系统的顶级目录可以有多个，即各个盘符</li></ul></blockquote></blockquote><blockquote><p>Linux路径的描述形式</p><blockquote><ul><li>在Linux系统中，路径之间的层级关系，使用:&#x2F;来表示</li><li>在Windows系统中，路径之间的层级关系，使用:\来表示</li></ul></blockquote></blockquote><blockquote><p>Linux特殊路径符</p><blockquote><ul><li><code>.</code> :表示当前目录</li><li><code>..</code> :表示上一级目录</li><li><code>~</code> :表示HOME目录</li></ul></blockquote></blockquote><blockquote><p>通配符<code>*</code>：表示通配符，即匹配任意内容（包含空），用于做模糊匹配</p><blockquote><ul><li><code>test*</code>：表示匹配任何以test开头的内容</li><li><code>*test</code>：表示匹配任何以test结尾的内容</li><li><code>*test*</code>：表示匹配任何包含test的内容</li></ul></blockquote></blockquote><h5 id="2-2-文件操作命令1"><a href="#2-2-文件操作命令1" class="headerlink" title="2.2 文件操作命令1"></a>2.2 文件操作命令1</h5><blockquote><ul><li>touch命令<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">touch</span> Linux路径<br><span class="hljs-comment"># touch命令无选项，参数必填，表示要创建的文件路径</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>cat命令<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">cat</span> Linux路径<br><span class="hljs-comment"># cat命令无选项，参数必填，表示被查看的文件路径</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>more命令 | less命令<blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">* 语法：more | less Linux路径</span><br># <span class="hljs-keyword">more</span>命令 | less命令均无选项，参数必填，表示被查看的文件路径<br># <span class="hljs-keyword">cat</span>命令是直接将内容全部显示出来，而<span class="hljs-keyword">more</span>命令 | less命令支持翻页<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="2-3-文件操作命令2"><a href="#2-3-文件操作命令2" class="headerlink" title="2.3 文件操作命令2"></a>2.3 文件操作命令2</h5><blockquote><ul><li>cp命令:用于复制文件或文件夹<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">touch</span> [-r] 参数1 参数2<br><span class="hljs-comment"># -r选项：可选，用于复制文件夹使用，表示递归</span><br><span class="hljs-comment"># 参数1：Linux路径，表示被复制的文件或文件夹</span><br><span class="hljs-comment"># 参数2：Linux路径，表示粘贴的地方</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>mv命令:用于移动文件或文件夹<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">mv</span> 参数1 参数2<br><span class="hljs-comment"># 参数1：表示被移动的文件或文件夹</span><br><span class="hljs-comment"># 参数2：表示要移动去的地方，如果目标不存在，则对被移动的文件进行改名（即1的名称会被改为2的名称），以确保目标存在</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>rm命令:用于删除文件或文件夹<blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">* 语法：<span class="hljs-built_in">rm</span> [-<span class="hljs-type">r</span> -<span class="hljs-type">f</span>] 参数<span class="hljs-number">1</span> 参数<span class="hljs-number">2</span> ······ 参数N<br><span class="hljs-comment"># -r选项：用于删除文件夹</span><br><span class="hljs-comment"># -f选项：表示force，强制删除（不会弹出提示确认信息）</span><br>!普通用户删除内容不会弹出提示，只有root管理员用户删除内容才会有内容提示，所以一般普通用户用不到<span class="hljs-operator">-f</span>选项<br><span class="hljs-comment"># 参数1、参数2、······参数N表示要删除的文件或文件夹路径，按照空格隔开</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="2-4-查找命令"><a href="#2-4-查找命令" class="headerlink" title="2.4 查找命令"></a>2.4 查找命令</h5><blockquote><ul><li>which命令:用于查看所使用的一系列命令的程序文件的位置<blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>语法：which 要查找的命令 <br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>find命令：用于搜索指定的文件<blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">* 语法：<span class="hljs-built_in">find</span> 起始路径 -name “被查找文件名”<br><span class="hljs-comment"># 支持通配符进行模糊搜索</span><br><br>* 语法：<span class="hljs-built_in">find</span> 起始路径 -size +|-n[k|M|G]<br><span class="hljs-comment"># +、-表示大于和小于</span><br><span class="hljs-comment"># n表示文件大小的数字</span><br><span class="hljs-comment"># k、M、G表示单位:kb、MB、GB</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="2-5-grep、wc和管道符"><a href="#2-5-grep、wc和管道符" class="headerlink" title="2.5 grep、wc和管道符"></a>2.5 grep、wc和管道符</h5><blockquote><ul><li>grep命令：用于从文件中通过关键字过滤文件行<blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">* 语法：grep [-n] 关键字 文件路径<br><span class="hljs-meta"># 选项，-n：可选，表示在结果中显示匹配的行的行号</span><br><span class="hljs-meta"># 参数1，关键字：必填，表示过滤的关键字，如果带有空格或其它特殊符号，建议使用<span class="hljs-string">&quot;&quot;</span>将其包围起来</span><br><span class="hljs-meta"># 参数2，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>wc命令：用于统计文件的行数、单词数量等<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">wc</span> [-c -m -l -w] 文件路径<br><span class="hljs-comment"># 选项，-c：统计bytes数量</span><br><span class="hljs-comment"># 选项，-m：统计字符数量</span><br><span class="hljs-comment"># 选项，-l：统计行数</span><br><span class="hljs-comment"># 选项，-w：统计单词数量</span><br><span class="hljs-comment"># 参数，文件路径：被统计的文件，可作为内容输入的端口</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>管道符：将管道符左边命令的结果，作为右边命令的输入<blockquote><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-symbol">*</span> 语法：命令1|<span class="hljs-string">命令2</span><br><span class="hljs-string"># 管道符可以嵌套使用：命令1</span>|<span class="hljs-string">命令2</span>|<span class="hljs-string">命令3</span>|<span class="hljs-string">···</span>|<span class="hljs-string">命令N</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="2-6-echo和重定向符"><a href="#2-6-echo和重定向符" class="headerlink" title="2.6 echo和重定向符"></a>2.6 echo和重定向符</h5><blockquote><ul><li>echo命令：用于在命令行内输出指定内容<blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">* 语法：echo 输出的内容<br><span class="hljs-meta"># 无需选项，只有一个参数，表示要输出的内容，如果内容里带有空格或其它特殊符号，建议使用<span class="hljs-string">&quot;&quot;</span>将其包围起来</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>反引号（或飘号）&#96;：被其包围的内容，会被作为命令执行，而非普通字符<blockquote><p><img src="/road2dasheng/img/03/image-20230203180328836.png" alt="image-20230203180328836"></p></blockquote></li></ul></blockquote><blockquote><ul><li>重定向符：将左侧命令的结果覆盖或追加到右侧指定的文件中<blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">：将左侧命令的结果，覆盖写入到符号右侧指定的文件中</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;：将左侧命令的结果，追加写入到符号右侧指定的文件中</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>tail命令：用于查看文件尾部内容，跟踪文件的最新更改<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">tail</span> [-f -num] Linux路径<br><span class="hljs-comment"># 选项，-f：表示持续跟踪</span><br><span class="hljs-comment"># 选项，-num：表示查看尾部num(具体数字)行，不填默认10行</span><br><span class="hljs-comment"># 参数，Linux路径：表示被跟踪的文件路径</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><hr><h4 id="3-Linux用户和权限"><a href="#3-Linux用户和权限" class="headerlink" title="3. Linux用户和权限"></a>3. Linux用户和权限</h4><h5 id="3-1-认知root用户"><a href="#3-1-认知root用户" class="headerlink" title="3.1 认知root用户"></a>3.1 认知root用户</h5><blockquote><p>什么是root用户？</p><blockquote><ul><li>无论windows、MacOS、Linux均采用多用户的管理模式进行权限管理</li><li>在Linux系统中，拥有最大权限的账户名为：root（超级管理员）</li><li>普通用户的权限一般在其home目录内是不受限的，而一旦出了home目录，在大多地方普通用户就仅有只读和执行权限，没有修改权限</li></ul></blockquote></blockquote><blockquote><p>掌握su命令</p><blockquote><ul><li>su命令就是用于账户切换的系统命令，全称为Switch User</li><li>语法：<code>su [-] [用户名]</code> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">* -符是可选的，表示是否在切换用户后加载环境变量，建议带上<br>* 参数：用户名，表示要切换的用户，用户名也可以省略，省略表示切换到root<br>* 切换用户后，可以通过<span class="hljs-keyword">exit</span>命令退回上一个用户，也可以使用快捷键Ctrl+d<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><blockquote><p>掌握sudo命令</p><blockquote><ul><li>虽然通过su命令可以切换到root用户得到最大权限，但不建议长期使用root用户，避免带来系统损坏</li><li>可以使用sudo命令，为普通的命令授权，临时以root身份执行</li><li>语法：<code>sudo 其它命令</code><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>在其它命令之前，带上sudo，即可为这条命令临时赋予root授权<br><span class="hljs-bullet">* </span>但是并不是所有的用户，都有权利使用sudo，需要为普通用户配置sudo认证<br><span class="hljs-bullet">* </span>配置sudo认证：用root用户执行visudo命令，增加相应配置项<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><h5 id="3-2-用户、用户组管理"><a href="#3-2-用户、用户组管理" class="headerlink" title="3.2 用户、用户组管理"></a>3.2 用户、用户组管理</h5><blockquote><p>用户、用户组的概念</p><blockquote><ul><li>Linux系统中可以配置多个用户和多个用户组，用户也可以加入多个用户组</li><li><img src="/road2dasheng/img/03/image-20230201165252463.png" alt="image-20230201165252463"></li><li>Linux中关于权限的管控级别有2个级别，分别是：<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>针对用户的权限控制<br><span class="hljs-bullet">* </span>针对用户组的权限控制<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><blockquote><p>用户、用户组的命令</p><blockquote><ul><li>创建用户组<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">groupadd 用户组名<br><span class="hljs-bullet">* </span>需要用root用户执行<br></code></pre></td></tr></table></figure></li><li>删除用户组<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">groupdel 用户组名<br><span class="hljs-bullet">* </span>需要用root用户执行<br></code></pre></td></tr></table></figure></li><li>创建用户<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">uesradd [-g -d] 用户名<br>* 需要用root用户执行<br>* 选项：-g，指定用户的组，不指定-g，会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g<br>* 选项：-d，指定用户home路径，不指定，home目录默认在：/home/用户名<br></code></pre></td></tr></table></figure></li><li>删除用户<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">userdel [-r] 用户名<br>* 需要用root用户执行<br>* 选项：-r，删除用户的home目录，不使用-r，删除用户时，home目录保留 <br></code></pre></td></tr></table></figure></li><li>查看用户所属组<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">id [用户名]<br><span class="hljs-bullet">* </span>需要用root用户执行<br><span class="hljs-bullet">* </span>参数：用户名，被查看的用户，如果不提供则查看自身<br></code></pre></td></tr></table></figure></li><li>修改用户所属组<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">usermod</span> -aG 用户组 用户名<br>· 需要用root用户执行<br>· 将指定用户加入指定用户组<br></code></pre></td></tr></table></figure></li><li>查看系统中全部用户信息</li><li><img src="/road2dasheng/img/03/image-20230201173417822.png" alt="image-20230201173417822"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">getent passwd<br>* 显示的信息含义为:<br>用户名:密码(x):用户ID:组ID:描述信息(无用):home目录:执行终端（默认bash）<br></code></pre></td></tr></table></figure></li><li>查看系统中全部用户组信息</li><li><img src="/road2dasheng/img/03/image-20230201174256230.png" alt="image-20230201174256230"><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">getent <span class="hljs-keyword">group</span><br><span class="hljs-title">* 显示的信息含义为:</span><br><span class="hljs-title">用户组名:密码(x</span>):用户组ID<br></code></pre></td></tr></table></figure></li></ul></blockquote></blockquote><h5 id="3-3-查看权限控制"><a href="#3-3-查看权限控制" class="headerlink" title="3.3 查看权限控制"></a>3.3 查看权限控制</h5><blockquote><ul><li>查看Linux文件的权限管控信息</li></ul><blockquote><ul><li>通过<code>ls -l</code>命令以列表形式查看内容，并显示权限细节&#96;</li></ul><p><img src="/road2dasheng/img/03/image-20230201175837692.png" alt="image-20230201175837692"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>序号1，表示文件、文件夹的权限控制信息<br><span class="hljs-bullet">* </span>序号2，表示文件、文件夹所属用户<br><span class="hljs-bullet">* </span>序号3，表示文件、文件夹所属用户组<br></code></pre></td></tr></table></figure></blockquote></blockquote><blockquote><ul><li>Linux中读、写、执行三种权限的含义</li></ul><blockquote><p>** <img src="/road2dasheng/img/03/image-20230201181730316.png" alt="image-20230201181730316"></p><p>** <img src="/road2dasheng/img/03/image-20230201181933171.png" alt="image-20230201181933171"></p></blockquote></blockquote><h5 id="3-4-修改权限控制-chmod命令"><a href="#3-4-修改权限控制-chmod命令" class="headerlink" title="3.4 修改权限控制 - chmod命令"></a>3.4 修改权限控制 - chmod命令</h5><blockquote><ul><li>可以通过chmod命令，修改文件、文件夹的权限信息</li></ul><blockquote><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">语法：chmod [-R] 权限 文件或文件夹<br><br>* 选项：-R，对文件夹内的全部内容应用同样的操作<br><br> ！注意：只有文件、文件夹的所属用户或root用户可以修改<br><br># 示例：chmod u<span class="hljs-operator">=</span>rwx<span class="hljs-punctuation">,</span>g<span class="hljs-operator">=</span>rx<span class="hljs-punctuation">,</span>o<span class="hljs-operator">=</span><span class="hljs-keyword">x</span> hello.txt<span class="hljs-punctuation">,</span> 将文件权限修改修改为：rwxr-<span class="hljs-keyword">x</span>--<span class="hljs-keyword">x</span><br>       chmod -R u<span class="hljs-operator">=</span>rwx<span class="hljs-punctuation">,</span>g<span class="hljs-operator">=</span>rx<span class="hljs-punctuation">,</span>o<span class="hljs-operator">=</span><span class="hljs-keyword">x</span> test<span class="hljs-punctuation">,</span> 将文件夹test以及文件夹内全部内容权限设              置为：rwxr-<span class="hljs-keyword">x</span>--<span class="hljs-keyword">x</span><br></code></pre></td></tr></table></figure></blockquote></blockquote><blockquote><ul><li>使用数字序号标记权限<blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">* 权限可以用<span class="hljs-number">3</span>位数字来代表，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其它用户权限<br>&gt;* r=<span class="hljs-number">4</span>，w=<span class="hljs-number">2</span>，x=<span class="hljs-number">1</span><br>* rwx的相互组合可以得到从<span class="hljs-number">0</span>到<span class="hljs-number">7</span>的<span class="hljs-number">8</span>种权限组合<br>  如<span class="hljs-number">7</span>代表<span class="hljs-symbol">:rwx</span>，<span class="hljs-number">5</span>代表<span class="hljs-symbol">:r-x</span>，<span class="hljs-number">1</span>代表<span class="hljs-symbol">:--x</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="3-5-修改权限控制-chown命令"><a href="#3-5-修改权限控制-chown命令" class="headerlink" title="3.5 修改权限控制 - chown命令"></a>3.5 修改权限控制 - chown命令</h5><blockquote><p>使用chown命令，可以修改文件、文件夹的所属用户和用户组</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">语法：<span class="hljs-built_in">chown</span> [-R] [用户][:][用户组] 文件或文件夹<br>* 选项：-R，同<span class="hljs-built_in">chmod</span>，对文件夹内全部内容应用相同规则<br>* 选项：用户，修改所属用户<br>* 选项：用户组，修改所属用户组<br>* “:”符号是用于分隔用户和用户组<br><br>! 注意：普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行<br><br><span class="hljs-comment"># 示例：chown root hello.txt，将hello.txt所属用户修改为root</span><br>       <span class="hljs-built_in">chown</span> :root hello.txt，将hello.txt所属用户组修改为root<br>       <span class="hljs-built_in">chown</span> root:<span class="hljs-built_in">test</span> hello.txt，将hello.txt所属用户修改为root,用户组修改为<span class="hljs-built_in">test</span><br>       <span class="hljs-built_in">chown</span> -R root <span class="hljs-built_in">test</span>，将<span class="hljs-built_in">test</span>文件夹和文件夹内全部内容的所属用户修改为root<br></code></pre></td></tr></table></figure></blockquote></blockquote><hr><h4 id="4-vi-vim编辑器"><a href="#4-vi-vim编辑器" class="headerlink" title="4. vi\vim编辑器"></a>4. vi\vim编辑器</h4><blockquote><ul><li>vi\vim是visual interface的简称，是Linux中最经典的文本编辑器</li><li>同图形化界面中的文本编辑器一样，vi是命令行下对文本文件进行编辑的绝佳选择</li><li>vim是vi的加强版本，兼容vi的所有指令，不仅能编辑文本，而且还具有shell程序的编辑功能，可以用不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性</li></ul></blockquote><h5 id="4-1-三种工作模式"><a href="#4-1-三种工作模式" class="headerlink" title="4.1 三种工作模式"></a>4.1 三种工作模式</h5><blockquote><ul><li><p>命令模式（Command mode）：此模式下所敲的按键，编辑器都理解为命令，以命令驱动执行不同的功能，所以此模式下不能自由进行文本编辑</p></li><li><p>输入模式（Insert mode）：也就是所谓的编辑模式、插入模式，所以此模式下可以对文件内容进行自由编辑</p></li><li><p>底线模式（Last line mode）：以:开始，通常用于文件的保存、退出</p><p><img src="/road2dasheng/img/03/image-20230203204551402.png" alt="image-20230203204551402"></p></li></ul></blockquote><h5 id="4-2-快捷键"><a href="#4-2-快捷键" class="headerlink" title="4.2 快捷键"></a>4.2 快捷键</h5><blockquote><ul><li><img src="/road2dasheng/img/03/image-20230203210542149.png" alt="image-20230203210542149"></li><li><img src="/road2dasheng/img/03/image-20230203210614769.png" alt="image-20230203210614769"></li><li><img src="/road2dasheng/img/03/image-20230203210647887.png" alt="image-20230203210647887"></li></ul></blockquote><hr><h4 id="5-Linux实用操作"><a href="#5-Linux实用操作" class="headerlink" title="5. Linux实用操作"></a>5. Linux实用操作</h4><h5 id="5-1-各类实用快捷键"><a href="#5-1-各类实用快捷键" class="headerlink" title="5.1 各类实用快捷键"></a>5.1 各类实用快捷键</h5><blockquote><ul><li>强制停止<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>Ctrl + C：用于程序出问题时或者命令输错时强制停止<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>退出、登出<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">* Ctrl + d：用于退出某些特定程序，利于<span class="hljs-keyword">python</span>，但不能用于<span class="hljs-keyword">vi</span>\<span class="hljs-keyword">vim</span>的退出<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>历史命令搜索<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>history：显示已经执行过的命令，序号越大说明执行的时间与此刻的时间越接近<br><span class="hljs-bullet">* </span>!命令前缀：从已经执行过的命令中自下往上匹配与命令前缀相同的那一条命令并直接执行<br><span class="hljs-bullet">* </span>Ctrl + r：输入内容去匹配历史命令，如果搜索到的内容时需要的，那么回车可以直接执行，如果不想执行，可以按下-&gt;或&lt;-键<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>光标移动<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>ctrl + a：跳到命令开头<br><span class="hljs-bullet">* </span>ctrl + e：跳到命令结尾<br><span class="hljs-bullet">* </span>ctrl + &lt;-键：向左跳一个单词<br><span class="hljs-bullet">* </span>ctrl + -&gt;键：向右跳一个单词<br></code></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>清屏<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>ctrl + l：清空终端内容<br><span class="hljs-bullet">* </span>clear命令：清空终端内容<br></code></pre></td></tr></table></figure></li></ul></blockquote><h5 id="5-2-软件安装"><a href="#5-2-软件安装" class="headerlink" title="5.2 软件安装"></a>5.2 软件安装</h5><blockquote><p>操作系统安装软件的方式一般分为：下载安装包自行安装或者系统的应用商店内安装</p></blockquote><blockquote><ul><li>使用yum为CentOS系统安装软件<blockquote><p>yum命令：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake">* 语法：yum [-y] [<span class="hljs-keyword">install</span> | <span class="hljs-keyword">remove</span> | search] 软件名称<br><span class="hljs-comment"># 选项，-y：自动确认，无需手动确认安装或卸载过程</span><br><span class="hljs-comment"># install：安装</span><br><span class="hljs-comment"># remove：卸载</span><br><span class="hljs-comment"># search：搜索</span><br>! yum命令需要root权限哦，可以su切换到root，或使用sudo提权<br>! yum命令需要联网<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>使用apt为Ubuntu系统安装软件<blockquote><p>apt命令：DEB包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake">* 语法：apt [-y] [<span class="hljs-keyword">install</span> | <span class="hljs-keyword">remove</span> | search] 软件名称<br><span class="hljs-comment"># 选项，-y：自动确认，无需手动确认安装或卸载过程</span><br><span class="hljs-comment"># install：安装</span><br><span class="hljs-comment"># remove：卸载</span><br><span class="hljs-comment"># search：搜索</span><br>! apt命令需要root权限哦，可以su切换到root，或使用sudo提权<br>! apt命令需要联网<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-3-systemctl命令"><a href="#5-3-systemctl命令" class="headerlink" title="5.3 systemctl命令"></a>5.3 systemctl命令</h5><blockquote><ul><li>Linux系统很多软件（内置或第三方）均支持使用systemctl命令控制：启动、停止、开机自启。能够被systemctl管理的软件，一般也称之为：服务<blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">* 语法：systemctl start | stop | status | <span class="hljs-built_in">enable</span> | <span class="hljs-built_in">disable</span> 服务名<br><span class="hljs-comment"># start：启动</span><br><span class="hljs-comment"># stop： 关闭</span><br><span class="hljs-comment"># status： 查看状态</span><br><span class="hljs-comment"># enable： 开启开机自启</span><br><span class="hljs-comment"># disable：关闭开机自启</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>系统内置的服务比较多，比如：<blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>NetworkManager，主网络服务；<br><span class="hljs-bullet">* </span>network，副网络服务；<br><span class="hljs-bullet">* </span>firewalld，防火墙服务；<br><span class="hljs-bullet">* </span>sshd，ssh服务（XShell远程登录Linux使用的就是这个服务）<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>除了内置的服务以外，部分第三方软件安装后也可以以systemctl进行控制，并且其它第三方软件通过手动添加后也能进行控制<blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">部分第三方软件：<br><span class="hljs-number">1</span>、安装ntp软件<br>* 语法：yum <span class="hljs-keyword">install</span> -y ntp <br><span class="hljs-comment"># 可以通过ntpd服务名，配合systemctl进行控制</span><br><br><span class="hljs-number">2</span>、安装apache服务器软件<br>* 语法：yum <span class="hljs-keyword">install</span> -y httpd<br><span class="hljs-comment"># 可以通过httpd服务名，配合systemctl进行控制</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-4-软链接"><a href="#5-4-软链接" class="headerlink" title="5.4 软链接"></a>5.4 软链接</h5><blockquote><ul><li>在系统中创建软链接，可以将文件、文件夹链接到其它位置。类似Windows系统中的《快捷方式》<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">ln</span> -s 参数1 参数2<br><span class="hljs-comment"># -s选项：创建软连接</span><br><span class="hljs-comment"># 参数1：被链接的文件或文件夹</span><br><span class="hljs-comment"># 参数2：要链接去的目的地</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-5-日期和时区"><a href="#5-5-日期和时区" class="headerlink" title="5.5 日期和时区"></a>5.5 日期和时区</h5><blockquote><ul><li>date命令：用于在命令行中查看系统的时间<blockquote><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs excel">* 语法：<span class="hljs-built_in">date</span> [-d] [+格式化字符串]<br># -d选项：按照给定的字符串显示日期，一般用于日期计算<br>  <span class="hljs-built_in">year</span>  -  年<br>  <span class="hljs-built_in">month</span> -  月<br>  <span class="hljs-built_in">day</span>   -  天<br>  <span class="hljs-built_in">hour</span>  -  小时<br>  <span class="hljs-built_in">minute</span> - 分钟<br>  <span class="hljs-built_in">second</span> - 秒<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/road2dasheng/img/03/image-20230204094126253.png" alt="image-20230204094126253"></h2></blockquote></li></ul><blockquote><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haml"># 格式化字符串：通过特定的字符串标记，来控制显示的日期格式<br><span class="hljs-tag">  %<span class="hljs-selector-tag">Y</span></span> - 年<br><span class="hljs-tag">  %<span class="hljs-selector-tag">y</span></span> - 年份后两位数字 (00..99)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">m</span></span> - 月份 (01..12)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">d</span></span> - 日 (01..31)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">H</span></span> - 小时 (00..23)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">M</span></span> - 分钟 (00..59)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">S</span></span> - 秒 (00..60)<br><span class="hljs-tag">  %<span class="hljs-selector-tag">s</span></span> - 自 1970-01-01 00:00:00 UTC 到现在的秒数<br>！使用date命令本体，无选项，是直接查看时间 <br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230204093218562.png" alt="image-20230204093218562"><br><img src="/road2dasheng/img/03/image-20230204093302400.png" alt="image-20230204093302400"><br><img src="/road2dasheng/img/03/image-20230204093325753.png" alt="image-20230204093325753"><br>！如上，由于中间带有空格，所以使用双引号包围格式化字符串，作为整体。</p></blockquote></blockquote><blockquote><ul><li>修改Linux时区：一般通过date查看的日期时间是不准确的，这是因为系统默认时区非中国的东八区<blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">* 语法：rm -f <span class="hljs-regexp">/etc/</span>localtime<br>       sudo ln -s <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia<span class="hljs-regexp">/Shanghai /</span>etc/localtime<br># 即：将系统自带的localtime文件删除，并将<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span>Asia/Shanghai文件链接为localtime文件即可<br># 执行上述命令需要切换到root账户<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><ul><li>ntp程序：可以自动联网同步时间，也可以通过手动校准时间<blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">* 自动校准： <br>  1、安装ntp<br>     yum -y install<span class="hljs-built_in"> ntp</span><br><span class="hljs-built_in"></span>  2、启动并设置开机自启<br>     systemctl start<span class="hljs-built_in"> ntp</span><br><span class="hljs-built_in"></span>     systemctl <span class="hljs-built_in">enable</span><span class="hljs-built_in"> ntp</span><br><span class="hljs-built_in"></span>* 手动校准：<br>   1、安装ntp<br>     yum -y install ntp、<br>   2、通过阿里云提供的服务网址配合ntpdate（安装ntp后会附带这个命令）命令进行校准<br>     ntpdate -u ntp.aliyun.com<br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-6-IP地址、主机名"><a href="#5-6-IP地址、主机名" class="headerlink" title="5.6  IP地址、主机名"></a>5.6  IP地址、主机名</h5><blockquote><ul><li>IP地址：每一台联网的电脑都会有一个地址，用于和其它计算机进行通讯；<blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># IP地址主要有2个版本，V4版本和V6版本（V6很少用，课程暂不涉及）；</span><br><span class="hljs-meta"># IPv4版本的地址格式是：a.b.c.d，其中abcd表示0~255的数字，如192.168.88.101就是一个标准的IP地址</span><br><span class="hljs-meta"># 可以通过ifconfig命令查看本机的ip地址，如无法使用ifconfig命令，可以安装net-tools</span><br></code></pre></td></tr></table></figure></blockquote></li><li>特殊IP地址<blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"># <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>：这个<span class="hljs-built_in">IP</span>地址用于指代本机<br>#   <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>：可以用于指代本机；可以在端口绑定中用来确定绑定关系；在一些<span class="hljs-built_in">IP</span>地址限制中，表示所有<span class="hljs-built_in">IP</span>的意思，如放行规则设              置为<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>，表示允许任意<span class="hljs-built_in">IP</span>访问<br></code></pre></td></tr></table></figure></blockquote></li><li>主机名：每一台电脑除了对外联络地址（IP地址）以外，也可以有一个名字，称之为主机名<blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 可以使用<span class="hljs-built_in">hostname</span>命令查看主机名<br># 可以使用hostnamectl <span class="hljs-keyword">set</span>-<span class="hljs-built_in">hostname</span> 主机名，修改主机名（需root）<br></code></pre></td></tr></table></figure></blockquote></li><li>域名解析：通过主机名或字符地址去代替数字化的IP地址<blockquote><p><img src="/road2dasheng/img/03/image-20230204101954961.png" alt="image-20230204101954961"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"># 即先查看本机的记录（私人地址本，Windows看C:\Windows\System32\drivers\etc\hosts；Linux看/etc/hosts），再联   网去DNS服务器（如<span class="hljs-number">114.114.114.114</span>，<span class="hljs-number">8.8.8.8</span>等）询问<br></code></pre></td></tr></table></figure></blockquote></li><li>配置主机名映射<blockquote><p>比如一般情况下XShell是通过IP地址连接到Linux服务器，但也可以在Windows系统的C:\Windows\System32\drivers\etc\hosts文件中修改配置实现通过域名进行连接<br><img src="/road2dasheng/img/03/image-20230204102736125.png" alt="image-20230204102736125"></p></blockquote></li><li>在虚拟机中配置固定IP地址<br>虚拟机的Linux操作系统，其IP地址是通过DHCP服务获取的，即动态获取IP地址，所以每次重启设备后都会获取一次，可能导致IP地址频繁变更，这种情况会造成需要频繁修改远程连接到系统的终端软件的配置，以及相关域名的解析文件（如果有的话）而将虚拟机的IP进行固定便会减少这些不必要的麻烦<blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">配置步骤：<br> <span class="hljs-number">1</span>、在VMware Workstation中配置<span class="hljs-built_in">IP</span>地址网关和网段（<span class="hljs-built_in">IP</span>地址的范围）<br></code></pre></td></tr></table></figure><p> <img src="/road2dasheng/img/03/image-20230204220924720.png" alt="image-20230204220924720"></p></blockquote></li></ul><blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">2、在Linux系统中手动修改配置文件，固定IP<br>   使用vim编辑/etc/sysconfig/network-scripts/ifcfg-ens33文件，填入如下内容,然后执行    <br>   systemctl restart network 重启网卡<br></code></pre></td></tr></table></figure><p> <img src="/road2dasheng/img/03/image-20230204221258688.png" alt="image-20230204221258688"></p></blockquote></blockquote><h5 id="5-7-网络传输"><a href="#5-7-网络传输" class="headerlink" title="5.7  网络传输"></a>5.7  网络传输</h5><blockquote><ul><li>ping命令：用于检查指定的网络服务器是否处于可联通状态<blockquote><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">* 语法：<span class="hljs-built_in">ping</span> [-c num] ip或主机名<br><span class="hljs-meta"># 选项，-c, num：检查的次数（num次），不使用-c选项，将无限次数持续检查</span><br><span class="hljs-meta"># 参数，ip或主机名：被检查的服务器的ip地址或主机名地址</span><br></code></pre></td></tr></table></figure></blockquote></li><li>wget命令：非交互式的文件下载器，可以在命令行内下载网络文件<blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 语法：wget [-b] url<br><span class="hljs-meta prompt_"># </span><span class="language-bash">选项，-b：表示后台下载，会将日志写入到当前工作目录的wget-log文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数，url：下载链接</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过<span class="hljs-built_in">tail</span>命令可以监控后台下载进度：<span class="hljs-built_in">tail</span> -f wget-log</span><br>！无论下载是否完成，都会生成要下载的文件，如果下载未完成，需及时清理未完成的不可用文件<br></code></pre></td></tr></table></figure></blockquote></li><li>curl命令：发送http网络请求，可用于下载文件、获取信息等<blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 语法：curl [-o] url<br><span class="hljs-meta prompt_"># </span><span class="language-bash">选项，-o：用于下载文件，当url是下载链接时，可以使用此选项保存文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数，url：要发起请求的网络地址</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过<span class="hljs-built_in">tail</span>命令可以监控后台下载进度：<span class="hljs-built_in">tail</span> -f wget-log</span><br>！无论下载是否完成，都会生成要下载的文件，如果下载未完成，需及时清理未完成的不可用文件<br></code></pre></td></tr></table></figure></blockquote></li><li>端口：是设备与外界通讯交流的出入口<blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>、端口分类<br>物理端口：又可称之为接口，是可见的端口，如USB接口，RJ45网口，HDMI端口等<br>虚拟端口：是指计算机内部的端口，是不可见的，是用来操作系统和外部进行交互使用的<br><br><span class="hljs-number">2</span>、端口作用<br>计算机程序之间的通讯，通过<span class="hljs-built_in">IP</span>只能锁定计算机，但是无法锁定具体的程序，通过端口可以锁定计算机上具体的程序，确保程序之间进行沟通 <br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230204224134019.png" alt="image-20230204224134019"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>、虚拟端口分类<br><span class="hljs-attribute">Linux</span>系统可以支持<span class="hljs-number">65535</span>个端口，这<span class="hljs-number">6</span>万多个端口分为<span class="hljs-number">3</span>类进行使用：<br><span class="hljs-comment"># 公认端口：1~1023，通常用于一些系统内置或知名程序的预留使用，如SSH、HTTPS服务的22、443端口</span><br><span class="hljs-comment"># 注册端口：1024~49151，通常可以随意使用，用于松散的绑定一些程序\服务</span><br><span class="hljs-comment"># 动态端口：49152~65535，通常不会固定绑定程序，而是当程序对外进行网络链接时，用于临时使用</span><br><br><span class="hljs-attribute">4</span>、查看端口占用<br><span class="hljs-comment"># 安装nmap：yum -y install nmap；然后执行命令：nmap 被查看的IP地址</span><br>  <span class="hljs-comment"># 安装netstat：yum -y install net-tools；然后执行命令：netstat -anp | grep 端口号</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-8-进程管理"><a href="#5-8-进程管理" class="headerlink" title="5.8  进程管理"></a>5.8  进程管理</h5><blockquote><ul><li>进程的概念<blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 程序的运行是被操作系统所管理的。</span><br><span class="hljs-meta"># 为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程</span><br><span class="hljs-meta"># 每一个进程都会被分配一个独有的：进程ID（进程号）</span><br></code></pre></td></tr></table></figure></blockquote></li><li>查看进程：可以通过ps命令查看进程信息<blockquote><p>1、查看全部进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">* 语法：<span class="hljs-built_in">ps</span> [-<span class="hljs-type">e</span> -<span class="hljs-type">f</span>]<br><span class="hljs-comment"># 选项，-e：显示出全部的进程</span><br><span class="hljs-comment"># 选项，-f：以完全格式化的形式展示信息（展示全部信息）</span><br>！一般来说，固定用法就是： <span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span> 列出全部进程的全部信息<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230204233623508.png" alt="image-20230204233623508"></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-meta"># UID：进程所属的用户ID</span><br><span class="hljs-meta"># PID：进程的进程号ID</span><br><span class="hljs-meta"># PPID：进程的父ID（启动此进程的其它进程）</span><br><span class="hljs-meta"># C：此进程的CPU占用率（百分比）</span><br><span class="hljs-meta"># STIME：进程的启动时间</span><br><span class="hljs-meta"># TTY：启动此进程的终端序号，如显示?，表示非终端启动</span><br><span class="hljs-meta"># TIME：进程占用CPU的时间</span><br><span class="hljs-meta"># <span class="hljs-keyword">CMD</span>：进程对应的名称或启动路径或启动命令</span><br></code></pre></td></tr></table></figure><p>2、查看指定进程</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">* 语法：<span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> 关键字<br># 关键字：命令名称\UID\PID等<br># 如：<span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> <span class="hljs-number">30001</span>，过滤带有<span class="hljs-number">30001</span>关键字的进程信息（一般指代过滤<span class="hljs-number">30001</span>进程号）<br></code></pre></td></tr></table></figure><p>3、关闭进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">kill</span> [-9] PID <br><span class="hljs-comment"># 选项，-9：表示强制关闭进程，不使用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身处理机制</span><br></code></pre></td></tr></table></figure></blockquote></li></ul></blockquote><h5 id="5-9-主机状态"><a href="#5-9-主机状态" class="headerlink" title="5.9  主机状态"></a>5.9  主机状态</h5><blockquote><ul><li>查看系统资源占用<blockquote><p>top命令：查看CPU、内存使用情况，类似Windows的任务管理器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">* 语法：<span class="hljs-attribute">top</span><br># 默认每<span class="hljs-number">5</span>秒刷新一次，按<span class="hljs-selector-tag">q</span>或ctrl + c退出<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205112815476.png" alt="image-20230205112815476"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第一行</span><br>  top:命令名称；14:36:57:当前系统时间；2 <span class="hljs-built_in">users</span>:2个用户登录；load average:1、5、15分钟负载<br><span class="hljs-comment"># 第二行</span><br>  Tasks：175个进程；2 running：1个进程在运行；177 sleeping：174个进程睡眠；0个停止和僵尸进程<br><span class="hljs-comment"># 第三行</span><br>  %Cpu(s):CPU使用率；us:用户CPU使用率；sy:系统CPU使用率；ni:高优先级进程占用CPU时间百分比；   <span class="hljs-built_in">id</span>:空闲CPU率；wa:IO等待CPU占用率；hi:CPU硬件中断率；si:CPU软件中断率；st：强制等待占用CPU率<br><span class="hljs-comment"># 第四行和第五行</span><br>  Kib Mem：物理内存；total：总量；free：空闲；used：使用；buff/cache：buff和cache占用<br>  KibSwap：虚拟内存；total：总量；free：空闲；used：使用；buff/cache：buff和cache占用<br><span class="hljs-comment"># 其它</span><br>  PID：进程<span class="hljs-built_in">id</span>；USER：进程所属用户；PR：进程优先级，越小越高；NI：负值表示高优先级，正表示低优先级<br>  VIRT：进程使用虚拟内存，单位KB；RES：进程使用物理内存，单位KB；SHR：进程使用共享内存，单位KB<br>  S：进程状态（S休眠，R运行，Z僵死状态，N负数优先级，I空闲状态）；%CPU：进程占用CPU率<br>  %MEM：进程占用内存率；TIME+：进程使用CPU时间总计，单位10毫秒；<br>  COMMAND：进程的命令或名称或程序文件路径<br></code></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">* 选项<br>  -<span class="hljs-selector-tag">p</span>：只显示某个进程的信息<br>  -d：设置刷新时间，默认是<span class="hljs-number">5s</span><br>  -c：显示产生进程的完整命令，默认是进程名<br>  -n：指定刷新次数，如 <span class="hljs-attribute">top</span> -n <span class="hljs-number">3</span>，则刷新<span class="hljs-number">3</span>次后退出<br>  -<span class="hljs-selector-tag">b</span>：以非交互非全屏模式运行，以批次的方式执行<span class="hljs-attribute">top</span>，一般配合-n指定输出几次统计信息，将输出重定向到       指定文件，如<span class="hljs-attribute">top</span> -<span class="hljs-selector-tag">b</span> -n <span class="hljs-number">3</span> &gt; /tmp/<span class="hljs-attribute">top</span><span class="hljs-selector-class">.tmp</span><br>  -<span class="hljs-selector-tag">i</span>：不显示任何闲置（idle）或无用（zombie）的进程<br>  -u：查找特定用户启动的进程<br></code></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">* 交互：当<span class="hljs-attribute">top</span>以交互式运行（非-<span class="hljs-selector-tag">b</span>选项启动），可以用以下交互式命令进行控制<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205120047377.png" alt="image-20230205120047377"></p></blockquote></li></ul></blockquote><blockquote><ul><li>磁盘信息监控<blockquote><p>1、df命令：用于查看硬盘的使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：<span class="hljs-built_in">df</span> [-h]<br><span class="hljs-comment"># 选项，-h：以更加人性化的单位显示</span><br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205120822083.png" alt="image-20230205120822083"><br>2、iostat命令：用于查看CPU、磁盘的相关信息</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit">* 语法：iostat [-x] [num1] [num2]<br><span class="hljs-meta"># 选项，-x：显示更多信息</span><br><span class="hljs-meta"># 参数，num1：刷新间隔</span><br><span class="hljs-meta"># 参数，num2：刷新次数</span><br><span class="hljs-meta"># tps：该设备每秒的传输次数；<span class="hljs-string">&quot;一次传输&quot;</span>意思是<span class="hljs-string">&quot;一次I/O请求&quot;</span>。多个逻辑请求可能会被合并为<span class="hljs-string">&quot;一次I/O请   求&quot;</span>。<span class="hljs-string">&quot;一次传输&quot;</span>请求的大小是未知的</span><br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205121225486.png" alt="image-20230205121225486"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用iostat的-x选项，可以显示更多信息</span><br>  rrqm/s   -  每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求               发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并<br>  wrqm/s   -  每秒这个设备相关的写入请求有多少被Merge了<br>  rsec/s   -  每秒读取的扇区数；sectors<br>  wsec/    -  每秒写入的扇区数。<br>  rKB/s    -  每秒发送到设备的读取请求数<br>  wKB/s    -  每秒发送到设备的写入请求数<br>  avgrq-sz -  平均请求扇区的大小<br>  avgqu-sz -  平均请求队列的长度。毫无疑问，队列长度越短越好。    <br>  await    -  每一个IO请求的处理的平均时间（单位是微秒毫秒）。<br>  svctm    -  表示平均每次设备I/O操作的服务时间（以毫秒为单位）<br>  %util    -  磁盘利用率<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205121858925.png" alt="image-20230205121858925"></p></blockquote></li></ul></blockquote><blockquote><ul><li>网络状态监控<blockquote><p>sar命令：用于查看网络的相关统计，该命令非常复杂，这里仅简单用于统计网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法：sar -n DEV num1 num2<br><span class="hljs-comment"># 选项</span><br>  -n：查看网络<br><span class="hljs-comment"># 参数</span><br>  DEV：表示查看网络接口<br>  num1：刷新间隔（不填代表查看一次结束）<br>  num2：查看次数（不填代表无限次）<br><span class="hljs-comment"># 信息解读</span><br>  IFACE    -  本地网卡接口的名称<br>  rxpck/s  -  每秒钟接受的数据包<br>  txpck/s  -  每秒钟发送的数据包<br>  rxKB/S   -  每秒钟接受的数据包大小，单位为KB<br>  txKB/S   -  每秒钟发送的数据包大小，单位为KB<br>  rxcmp/s  -  每秒钟接受的压缩数据包<br>  txcmp/s  -  每秒钟发送的压缩包<br>  rxmcst/s -  每秒钟接收的多播数据包<br>  如查看2次，隔3秒刷新一次，并最终汇总平均记录：<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205123346127.png" alt="image-20230205123346127"></p></blockquote></li></ul></blockquote><h5 id="5-10-环境变量"><a href="#5-10-环境变量" class="headerlink" title="5.10 环境变量"></a>5.10 环境变量</h5><blockquote><p>环境变量是操作系统在运行的时候，记录的一些关键性信息，用以辅助系统运行</p><blockquote><ul><li>env命令：用于查看当前系统中记录的环境变量<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">* 环境变量是一种KeyValue型结构，即名称和值<br><span class="hljs-comment"># 常见的环境变量</span><br>  HOME = /root 用户home目录的路径<br>  <span class="hljs-keyword">USER</span> <span class="hljs-title">= root</span> 当前的操作用户<br>   PWD = 当前的工作路径<br>   ······<br></code></pre></td></tr></table></figure><img src="/road2dasheng/img/03/image-20230205133107047.png" alt="image-20230205133107047"></li></ul></blockquote><ul><li>PATH：记录了系统执行任何命令的搜索路径<blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 例如执行命令 env | grep PATH，出现如下结果：</span><br>  <span class="hljs-regexp">/usr/</span>local/sbin<br>  <span class="hljs-regexp">/usr/</span>local/bin<br>  <span class="hljs-regexp">/usr/</span>sbin<br>  <span class="hljs-regexp">/usr/</span>bin:<span class="hljs-regexp">/root/</span>bin<br>当执行任何命令，都会按照顺序从上述路径中搜索要执行的程序的本体。<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205135154070.png" alt="image-20230205135154070"></p></blockquote></li><li>$符号：用于取”变量”的值<blockquote><p>环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 语法<br><span class="hljs-meta prompt_">  $</span><span class="language-bash">环境变量名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>`可以取得PATH这个环境变量的值，并通过<span class="hljs-built_in">echo</span>语句输出出来</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">当和其它内容混合在一起的时候，可以通过&#123;&#125;来标注取的变量是谁，如`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PATH&#125;</span>ABC`</span><br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205140700228.png" alt="image-20230205140700228"></p></blockquote></li><li>自定义环境变量<blockquote><p>1、临时设置</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm">* 语法<br>  ex<span class="hljs-keyword">port</span> 变量名=变量值<br></code></pre></td></tr></table></figure><p>2、永久生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法<br>  针对当前用户生效，配置在当前用户的：~/.bashrc文件中<br>  针对所有用户生效，配置在系统的： /etc/profile文件中<br>  通过语法：<span class="hljs-built_in">source</span> 配置文件，进行立刻生效，或重启系统生效<br></code></pre></td></tr></table></figure></blockquote></li><li>自定义PATH<blockquote><p><img src="/road2dasheng/img/03/image-20230205142103919.png" alt="image-20230205142103919"></p></blockquote></li></ul></blockquote><h5 id="5-11-windows和linux的文件交互"><a href="#5-11-windows和linux的文件交互" class="headerlink" title="5.11 windows和linux的文件交互"></a>5.11 windows和linux的文件交互</h5><blockquote><ul><li>通过Xshell的文件管理系统实现<blockquote><p>在Xshell的隧道窗格（<code>view</code>里选择）的文件管理器中，可以方便地：<br>1、浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑<br>2、浏览文件系统，找到合适的目录，将本地电脑的文件拖入，便可快速上传到Linux中</p></blockquote></li><li>通过rz、sz命令实现<blockquote><p>rz、sz命令需要安装，可以通过 <code>yum -y install lrzsz</code>命令即可安装。<br>1、输入<code>rz</code>命令并执行，会直接打开windows的文件管理器，然后选择文件进行上传即可， 只是这种方式上传速度较慢，而通过Xshell的文件管理器进行文件上传速度较快<br>2、输入<code>sz 下载的文件</code>命令，会将Linux中的文件下载到windows中（存放文件的位置需要自己设置）</p></blockquote></li></ul></blockquote><h5 id="5-12-压缩、解压"><a href="#5-12-压缩、解压" class="headerlink" title="5.12 压缩、解压"></a>5.12 压缩、解压</h5><blockquote><ul><li>压缩格式<blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-built_in">zip</span>： Linux、Windows和MacOS系统常用<br>7<span class="hljs-built_in">zip</span>： Windows系统常用<br>  rar： Windows系统常用<br>  tar： Linux、MacOS常用<br>gzip： Linux、MacOS常用<br></code></pre></td></tr></table></figure></blockquote></li><li>tar命令<blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Linux和Mac系统常用有2种压缩格式，后缀名分别是`.tat`和`.gz(.tar.gz)`,这两种格式tar命令均适用</span><br><span class="hljs-string">.tar</span>，称之为tarball，归档文件，即简单的将文件组装到一个<span class="hljs-string">.tar</span>的文件内，并没有太多文件体积的减少，         仅仅是简单的封装<br><span class="hljs-string">.gz</span>，也常见为<span class="hljs-string">.tar.gz</span>，gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减        少压缩后的体积<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs llvm">* 语法<br>  tar [-<span class="hljs-keyword">c</span> -v -<span class="hljs-keyword">x</span> -f -z -C] 参数<span class="hljs-number">1</span> 参数<span class="hljs-number">2</span> ··· 参数N<br># 选项<br>  -<span class="hljs-keyword">c</span>：创建压缩文件，用于压缩模式<br>  -v：显示压缩、解压过程，用于查看进度<br>  -<span class="hljs-keyword">x</span>：解压模式<br>  -f：要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个<br>  -z：gzip模式，不使用-z就是普通的tarball格式，-z选项一般<br>  -C：选择解压的目的地，用于解压模式<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>示例<br>1、tar压缩<br>！-z选项如果使用的话，一般处于选项位第一个<br>！-f选项，必须在选项位最后一个<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205162355188.png" alt="image-20230205162355188"></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">2</span>、<span class="hljs-variable">tar</span>解压<br>！<span class="hljs-operator">-</span><span class="hljs-variable">f</span>选项必须在选项组合体的最后一位<br>！<span class="hljs-operator">-</span><span class="hljs-variable">z</span>选项建议在开头位置<br>！<span class="hljs-operator">-</span><span class="hljs-built_in">C</span>选项单独使用，和解压所需的其它参数分开<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205162722026.png" alt="image-20230205162722026"></p></blockquote></li><li>zip和unzip命令<blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 语法<br>  zip [-r] 参数1 参数2 ··· 参数N<br><span class="hljs-comment"># 选项</span><br>  -r：如果压缩时包含文件夹，需要使用-r选项，和<span class="hljs-built_in">rm</span>、<span class="hljs-built_in">cp</span>等命令的-r效果一致<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205163632263.png" alt="image-20230205163632263"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 语法<br>  unzip [-d] 参数<br><span class="hljs-section"># 选项</span><br>  -d：指定要解压去的位置，同tar的-C选项<br><span class="hljs-section"># 参数</span><br>  被解压的zip压缩包文件<br></code></pre></td></tr></table></figure><p><img src="/road2dasheng/img/03/image-20230205163950079.png" alt="image-20230205163950079"></p></blockquote></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建手机文件免费备份仓库</title>
    <link href="/road2dasheng/02_%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%8B%E6%9C%BA%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E4%BB%93%E5%BA%93/"/>
    <url>/road2dasheng/02_%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%8B%E6%9C%BA%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h5 id="时间：13-46"><a href="#时间：13-46" class="headerlink" title="时间：13:46"></a>时间：13:46</h5><h5 id="地点：-苏州-冰雪坞"><a href="#地点：-苏州-冰雪坞" class="headerlink" title="地点： 苏州 _ 冰雪坞"></a>地点： 苏州 _ 冰雪坞</h5><h4 id="一、手机相册的备份"><a href="#一、手机相册的备份" class="headerlink" title="一、手机相册的备份"></a>一、手机相册的备份</h4><blockquote><p><em><strong>问题1：原来存储在云端的照片如何备份？</strong></em></p><blockquote><p>我的做法是将它们都下载下来<br>然后打包成一个压缩文件上传到别的空间大的网盘<br>例如阿里云或者百度云等<br>等以后闲暇的时候再去整理<br>因为整理照片实在是太耗精力和时间<br>所以最好是“分而治之”<br>在从云端把照片下载完，并且也已经上传到别的网盘中去后<br>就可以把云空间的照片删掉了，同时关闭手机端的照片同步功能<br>因为手机一般自带的云空间很小，不适合用来存储照片<br>只能用于同步一些录音、笔记之类的文件<br>当然有钱任性可以忽略上面那些话<br>毕竟会员虽然需要花钱，但是它省心啊。。</p></blockquote></blockquote><blockquote><p><em><strong>问题2：原来存储在手机端的照片如何备份？</strong></em></p><blockquote><p>我的做法是首先要在手机端新建几个相册<br>例如家人、朋友、同学等等<br>首先将手机里的照片分门别类的移动到这些相册里<br>然后可以在手机的文件管理器里将这些相册分别打包成压缩文件<br>接着将他们都上传到空间大的网盘（如阿里云盘，不放心的话可以放在网盘的私密区域）<br>这种备份因为不能做到云端和手机端的实时同步，所以需要按期去完成<br>周期长短看自己喜好，我选择的是每半年更新一次备份<br>同时目前主流的网盘都有相册备份的功能<br>这种备份和自己手动备份的不一样<br>它是和手机相册实时同步的（手机端有了新照片会自动同步到手机备份相册，<br>并且手机端删除的照片云端仍然会继续保存，同样的云端删除的照片手机端也会继续保存）<br>当然如果担心安全问题的话<br>也可以自己选择需要备份的相册（这时候就能看出之前在手机端创建不同相册的好处了）<br>最后在备份好后，手机端的照片尽量不要删除<br>因为网盘端一般都是根据照片名称对照片进行排序<br>最后呈现的效果完全不一样<br>除非上传之前挨个给照片按照你理想中的排序方式进行重命名<br>目前来看应该是个不小的工作量<br>但如果能写个给很多照片重命名的小程序，应该可以接受<br>&#x3D;&#x3D;挖个坑，以后有时间研究一下&#x3D;&#x3D;<br>而手机端是可以选择按照创建时间来对照片进行排序的<br>所以不到必须删不可的时候还是别删吧</p></blockquote></blockquote><h4 id="二、手机微信文件的备份"><a href="#二、手机微信文件的备份" class="headerlink" title="二、手机微信文件的备份"></a>二、手机微信文件的备份</h4><blockquote><p><em><strong>问题1：手机微信和电脑微信的文件能不能同时备份</strong></em></p><blockquote><p>我的理解是因为手机微信和电脑微信是可以同步的<br>并且手机微信是可以选择“自动下载 - 其他设备查看的照片、视频和文件在手机上自动下载”的<br>所以电脑微信的内容其实手机微信都同时保存了<br>因此只需要备份手机微信内容就能够实现两端微信的同时备份</p></blockquote></blockquote><blockquote><p><em><strong>问题2：如何备份手机微信</strong></em></p><blockquote><p>直接贴个链接吧，不想打字了<br><a href="https://zhuanlan.zhihu.com/p/148312766">微信聊天记录备份恢复_知乎-超人</a></p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>个人生产力系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建属于自己的免费云端存储空间</title>
    <link href="/road2dasheng/01_%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BA%91%E7%AB%AF%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/"/>
    <url>/road2dasheng/01_%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E4%BA%91%E7%AB%AF%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h5 id="时间：12-18-am"><a href="#时间：12-18-am" class="headerlink" title="时间：12:18 am"></a>时间：12:18 am</h5><h5 id="地点：-苏州-冰雪坞"><a href="#地点：-苏州-冰雪坞" class="headerlink" title="地点： 苏州 _ 冰雪坞"></a>地点： 苏州 _ 冰雪坞</h5><h4 id="一、技术盘"><a href="#一、技术盘" class="headerlink" title="一、技术盘"></a>一、技术盘</h4><blockquote><p><strong>阿里云盘</strong></p><blockquote><p>因为我是阿里云盘的第一批内测用户（3T，永久有效，但每年需要登录一次）<br>加上学生认证赠送的存储空间（1T，3年有效期）<br>以及其他的福利（例如新用户赠礼）（100G，永久有效）<br>所以我云盘的存储空间达到了惊人的近5T，对于个人用户来说已经足够了<br>而且它目前上传和下载的速度比某知名网盘快得实在太多<br>希望它能一直保持 :smile:<br>因此我将它主要用于大型文件的存储，例如三维建模软件等<br>主要想法是依托它搭建一个自己的技术仓库（<strong>硬实力的积累</strong>）</p></blockquote></blockquote><h4 id="二、知识盘"><a href="#二、知识盘" class="headerlink" title="二、知识盘"></a>二、知识盘</h4><blockquote><p><strong>百度网盘 + (坚果云&amp;iCloud)</strong></p><blockquote><p>虽然没赶上百度网盘的内测，但也遇到了它抢占市场的窗口期<br>薅到了4个T的羊毛 :grinning:（永久有效）<br>但奈何不开会员的下载速度太慢<br>因此我将它主要用于小型文件的存储，例如电子书等<br>坚果云作为国内目前唯一一个支持WebDAV的云服务<br>我主要用它同步一些小的文件，例如Zotero管理的文献资料（每月1G上传，3G下载）<br>而iCloud也是配合Zotero实现文献的多平台同步阅读（ipad做移动端需要下载PDF Expert）<br>关于如何“搭建自己的文献阅读生态”，这个专题我有时间会再详细阐述，先挖个坑<br>回到主题，使用它们的主要想法是依托它们搭建一个自己的知识仓库（<strong>软实力的培养</strong>）</p></blockquote></blockquote><h4 id="三、盘一盘"><a href="#三、盘一盘" class="headerlink" title="三、盘一盘"></a>三、盘一盘</h4><blockquote><p><strong>小米云空间</strong></p><blockquote><p>因为我是小米的铁粉（2014年至今）<br>所以平常用的笔记本、手机、手表、耳机等都是在小米买的<br>也算搭建了一个小生态吧<br>在如今我觉得已经算是比较强大的MIUI+的加持下<br>用户体验相当Nice!!!<br>上面这些其实和小米云服务没啥关系<br>我就是想夸下小米<br>这些年真的一直在进步<br>雷布斯说：“要一直做感动人心的产品”<br>我不知道你们有没有被感动，但我深以为然<br>都说小米一直在模仿苹果或者说抄袭苹果<br>我绝不否认这个观点<br>从外观设计、软件交互等等都能一眼看出<br>但苹果毕竟是行业老大啊<br>开始的时候肯定只能是跟随<br>当然也有可能这辈子我都看不到小米干掉苹果的那一天<br>毕竟乔老爷子是多少年才出一个的人物啊<br>但小米愿意对标苹果，就凭这份勇气我跟了<br>另外话说回来<br>苹果产品什么价，小米产品什么价<br>“还要啥自行车啊”<br>有些激动，主要确实被MIUI+感动到了<br>去年卡成那个鬼样子，短短不到一年时间已经能够这么丝滑<br>真的太开心了，那个熟悉的小米感觉又回来了<br>虽然不知道这种开心能持续多久，但偶尔感受下还是很惬意的<br>好了，回到正题<br>因为我没开会员，我的小米云空间才20G<br>所以它啥也干不了。。<br>哎，我的开心没有了，它来的好快 :disappointed:<br>不对，icloud好像只有5个G :v:</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>个人生产力系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
